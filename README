=====================================================================
Introduction
======================================================================

The Whiley programming language employs the extended static checking
to eliminate he errors at the compile time, and compiles the
high-level Whiley program into different kinds of implementations.
However, the C implementations that the Whiley compiler generates are
currently quite inefficient, due to always using unbounded integers,
unbounded data structures with frequent copying, etc. This project
aims to use the program analysis techniques to generate efficient
parallel implementations in C and OpenCL and to gain the speed-up
across heterogeneous platforms.

======================================================================
Installation
======================================================================

1. The Whiley Intermediate Language Interpreter (WyIL Interpreter)
----------------------------------------------------------------------
To play with WyIL interpreter, please Open Cygwin/terminal and follow
the below instructions.
$ git clone https://github.com/samminweng/WhileyOpenCL
$ cd WhileyOpenCL/
$ ant  
$ cd examples/
$ ./../bin/wyopcl sieve.whiley 100
or add the verbose option to print out the interpretation.
$ ./../bin/wyopcl -verbose sieve.whiley 100

2. Whiley-to-OpenCL translator
The Whiley-to-OpenCL translator is written in Java and aims to generate
C/OpenCL code and proof obligation. At this stage, we will use the prime
example as the main test case (perhaps we need more) to manually generate
its OpenCL code and produce the proof obligations in SMT syntax, which
allows us to make use of different SMT solvers (e.g. Z3). 
----------------------------------------------------------------------
2.1 Bound Analyzer
Bound analyzer aims to infer the bounds and check the bounds consistent
with all constraints. To run the bound analyzer on Whiley programs,
use the below commands:
$ git clone https://github.com/samminweng/WhileyOpenCL
$ cd WhileyOpenCL/
$ ant
$ cd tests/bounds
$ ./../../bin/wyopcl -a range IfElse_Valid_2.whiley 

======================================================================
Unit Testing
======================================================================

1. WyIL Interpreter
The interpreter can be verified with 915 test cases by using the commands:
$ ant report
The unit test results are summarized at 'report/interpreter/index.html'. 
The current success rate is 95.85% (Failures: 22, Errors: 16, Skipped: 94).

2. Whiley-to-OpenCL translator
2.1 Bound Analyzer
The bound analyzer currently is being used to analyze the valid test
Whiley programs, including {IfElse_Valid_1..2}, {BoolList_Valid_2}, 
{While_Valid_1}, {For_Valid_1}. To run the tests, use the below commands:
$ ant bounds
The unit test results are summarized at 'report/bounds/index.html'. 

