=====================================================================
Introduction
======================================================================

The Whiley programming language employs the extended static checking
to eliminate he errors at the compile time, and compiles the
high-level Whiley program into different kinds of implementations.
However, the C implementations that the Whiley compiler generates are
currently quite inefficient, due to always using unbounded integers,
unbounded data structures with frequent copying, etc. This project
aims to use the program analysis techniques to generate efficient
parallel implementations in C and OpenCL and to gain the speed-up
across heterogeneous platforms.

======================================================================
Installation
======================================================================
Please Open Cygwin/terminal and follow the below instructions.
$ git clone https://github.com/samminweng/WhileyOpenCL
$ cd WhileyOpenCL/
$ ant  

The libraries are created and put inside 'lib' folder. To update the
code from GitHub, use the below commands:
$ git reset --hard HEAD
$ git pull

======================================================================
Usage
======================================================================
1. Whiley-to-OpenCL translator
The Whiley-to-OpenCL translator is written in Java and aims to generate
C/OpenCL code and proof obligation. At this stage, we will use the prime
example as the main test case (perhaps we need more) to manually generate
its OpenCL code and produce the proof obligations in SMT syntax, which
allows us to make use of different SMT solvers (e.g. Z3). 
----------------------------------------------------------------------
1.1 Bound Analyzer
Bound analyzer aims to infer the bounds and check the bounds consistent
with all constraints. To run the bound analyzer, use the below commands:
$ cd tests/bounds
$ ./../../bin/wyopcl -bound naive WhileLoop.whiley 
Or use the gradual widening strategy to get more precise bounds.
$ ./../../bin/wyopcl -bound gradual WhileLoop.whiley

1.2 Pattern Matching and Transformation
Pattern matcher finds the list of code block at byte-code level and 
matches it with predefined patterns. If the pattern is transformable, 
then the pattern matching automatically converts the pattern into the
predefined pattern.
$ cd tests/pattern
$ ./../../bin/wyopcl -pattern While_Valid_1.whiley

1.3 Code Generator
Code Generator aims to translate the Whiley program into C code.
$ cd tests/code
$ ./../../bin/wyopcl -code While_Valid_1.whiley
$ gcc While_Valid_1.c Util.c -o While_Valid_1.out
$ ./While_Valid_1.out

1.4 Copy Elimination Analysis
Copy Elimination analysis aims to eliminate the un-necessary array
copies at Wyil level. 
$ cd tests/copy
$ ./../../bin/wyopcl -copy swap.whiley


@Deprecated
This interpreter could not function well due to the change in WyIL
structures and upgrades of Whiley compiler.
~~ 2. WyIL (Whiley Intermediate Language) Interpreter ~~  
~~ ---------------------------------------------------------------------- ~~
~~ To play with WyIL interpreter, use the commands: ~~
~~ $ cd examples/ ~~
~~ $ ./../bin/wyopcl sieve.whiley 100 ~~
~~ Or add the verbose option to print out the interpretation. ~~
~~ $ ./../bin/wyopcl -verbose sieve.whiley 100 ~~


======================================================================
Unit Testing
======================================================================
1. Whiley-to-OpenCL translator
1.1 Bound Analyzer
The bound analyzer is being tested with several Whiley programs, including
{IfElse_Valid_2} and {WhileLoop}. To run the tests, use the below commands:
$ ant test-bound
The unit test results are summarized at 'report/bound/index.html'. 

1.2 Pattern Matching and Transformation
The pattern module is being tested with several Whiley programs, including
{Loop} and {While_Valid_1}. To run the tests, use the below commands:
$ ant test-pattern
The unit test results are summarized at 'report/pattern/index.html'.

1.3 Code Generator
The code generator is tested with several Whiley programs, including
{IfElse_Valid_2}, {WhileLoop} and {While_Valid_1}. To run the tests,
use the below commands:
$ ant test-code
The unit test results are summarized at 'report/code/index.html'. 


~~ 2. WyIL Interpreter ~~
~~ The interpreter can be verified with 915 test cases by using the commands: ~~
~~ $ ant interpreter ~~
~~ The unit test results are summarized at 'report/interpreter/index.html'. ~~ 
~~ The current success rate is 95.85% (Failures: 22, Errors: 16, Skipped: 94). ~~


