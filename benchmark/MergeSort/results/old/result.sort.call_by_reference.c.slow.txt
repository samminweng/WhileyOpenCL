Code Generation completed.
File: sort_call_by_reference.c, sort_call_by_reference.h Time: 80 ms Memory Usage: 126627088
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:4221388	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:2958647	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3006217	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3100506	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:2618944	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3127510	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:2583639	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:2852836	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3152532	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:2695184	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:2724731	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:2946983	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:2750979	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:2667446	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5946130	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:6996938	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5818413	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5767624	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5870081	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5920285	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:7010052	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6977607	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6969077	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6759391	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6581262	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:3576514	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:3553686	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2641920	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2662888	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2693398	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:6700952	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:7035048	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:7261939	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:7108277	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:6605227	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:7398936	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:10657990	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:10853013	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:9391562	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:9459653	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:44758188	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:46390927	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:45958934	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:41913867	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:46592341	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:45307740	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:46021912	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:43342776	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:46132489	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:46130066	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:408043855	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:407626946	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:408130034	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:406030709	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:405460005	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:406371707	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:406242842	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:406387969	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:407633143	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:406153235	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4308579985	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4305632754	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4318714698	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4326553522	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4294021782	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4319290769	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4303082416	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4327203669	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4297564045	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:4306132563	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8767447332	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8778872368	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8800326277	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8780149702	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8808258932	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8765995639	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8802152483	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8767627109	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8774921727	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:8785651183	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13317307697	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13263003853	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13259153251	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13298595179	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13253483922	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13274332538	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13258311104	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13262192226	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13260234599	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:13249251047	nanoseconds.
Beginning the benchmarks of slow sort_call_by_reference C program method on array size = 40000000
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 2
initial apicid	: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 2
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 4
initial apicid	: 4
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 6
initial apicid	: 6
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 4
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 3401.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 1
initial apicid	: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 5
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 3
initial apicid	: 3
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 6
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 5
initial apicid	: 5
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

