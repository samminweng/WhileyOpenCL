sortV2.0 [	const %9 = 1 : int]
sortV2.1 [	add %10 = %1, %9 : int]
sortV2.2 [	ifge %10, %2 goto blklab0 : int]
sortV2.3 [	add %12 = %1, %2 : int]
sortV2.4 [	const %13 = 2 : int]
sortV2.5 [	div %14 = %12, %13 : int]
sortV2.6 [	assign %11 = %14  : int]
sortV2.7 [	assign %3 = %11  : int]
sortV2.8 [	deref %17 = %0 : &int[]]
sortV2.9 [	invoke %16 = (%17, %1, %3) whiley/lang/Array:slice : function(int[],int,int) -> int[]]
sortV2.10 [	newobject %18 = %16 : &int[]]
sortV2.11 [	assign %15 = %18  : &int[]]
sortV2.12 [	assign %4 = %15  : &int[]]
sortV2.13 [	const %19 = 0 : int]
sortV2.14 [	invoke %(%4, %19, %3) sort_call_by_reference:sortV2 : method(&int[],int,int) -> void]
sortV2.15 [	deref %22 = %0 : &int[]]
sortV2.16 [	invoke %21 = (%22, %3, %2) whiley/lang/Array:slice : function(int[],int,int) -> int[]]
sortV2.17 [	newobject %23 = %21 : &int[]]
sortV2.18 [	assign %20 = %23  : &int[]]
sortV2.19 [	assign %5 = %20  : &int[]]
sortV2.20 [	const %24 = 0 : int]
sortV2.21 [	sub %25 = %2, %3 : int]
sortV2.22 [	invoke %(%5, %24, %25) sort_call_by_reference:sortV2 : method(&int[],int,int) -> void]
sortV2.23 [	const %27 = 0 : int]
sortV2.24 [	assign %26 = %27  : int]
sortV2.25 [	assign %6 = %26  : int]
sortV2.26 [	const %29 = 0 : int]
sortV2.27 [	assign %28 = %29  : int]
sortV2.28 [	assign %7 = %28  : int]
sortV2.29 [	const %31 = 0 : int]
sortV2.30 [	assign %30 = %31  : int]
sortV2.31 [	assign %8 = %30  : int]
sortV2.32 [	loop (%0, %6, %7, %8, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52)]
sortV2.33 [	sub %32 = %2, %1 : int]
sortV2.34 [	ifge %6, %32 goto blklab1 : int]
sortV2.35 [	sub %33 = %3, %1 : int]
sortV2.36 [	ifge %7, %33 goto blklab1 : int]
sortV2.37 [	sub %34 = %2, %3 : int]
sortV2.38 [	ifge %8, %34 goto blklab1 : int]
sortV2.39 [	deref %35 = %4 : &int[]]
sortV2.40 [	indexof %36 = %35, %7 : int[]]
sortV2.41 [	deref %37 = %5 : &int[]]
sortV2.42 [	indexof %38 = %37, %8 : int[]]
sortV2.43 [	ifgt %36, %38 goto blklab2 : int]
sortV2.44 [	deref %39 = %4 : &int[]]
sortV2.45 [	indexof %40 = %39, %7 : int[]]
sortV2.46 [	deref %41 = %4 : &int[]]
sortV2.47 [	indexof %42 = %41, %7 : int[]]
sortV2.48 [	update (*%0)[%6] = %42 : &int[] -> &int[]]
sortV2.49 [	const %43 = 1 : int]
sortV2.50 [	add %44 = %7, %43 : int]
sortV2.51 [	assign %7 = %44  : int]
sortV2.52 [	goto blklab3]
sortV2.53 [.blklab2]
sortV2.54 [	deref %45 = %5 : &int[]]
sortV2.55 [	indexof %46 = %45, %8 : int[]]
sortV2.56 [	deref %47 = %5 : &int[]]
sortV2.57 [	indexof %48 = %47, %8 : int[]]
sortV2.58 [	update (*%0)[%6] = %48 : &int[] -> &int[]]
sortV2.59 [	const %49 = 1 : int]
sortV2.60 [	add %50 = %8, %49 : int]
sortV2.61 [	assign %8 = %50  : int]
sortV2.62 [.blklab3]
sortV2.63 [	const %51 = 1 : int]
sortV2.64 [	add %52 = %6, %51 : int]
sortV2.65 [	assign %6 = %52  : int]
sortV2.66 [.blklab1]
sortV2.67 [	loop (%0, %6, %7, %53, %54, %55, %56, %57, %58, %59, %60, %61)]
sortV2.68 [	sub %53 = %3, %1 : int]
sortV2.69 [	ifge %7, %53 goto blklab4 : int]
sortV2.70 [	deref %54 = %4 : &int[]]
sortV2.71 [	indexof %55 = %54, %7 : int[]]
sortV2.72 [	deref %56 = %4 : &int[]]
sortV2.73 [	indexof %57 = %56, %7 : int[]]
sortV2.74 [	update (*%0)[%6] = %57 : &int[] -> &int[]]
sortV2.75 [	const %58 = 1 : int]
sortV2.76 [	add %59 = %6, %58 : int]
sortV2.77 [	assign %6 = %59  : int]
sortV2.78 [	const %60 = 1 : int]
sortV2.79 [	add %61 = %7, %60 : int]
sortV2.80 [	assign %7 = %61  : int]
sortV2.81 [.blklab4]
sortV2.82 [	loop (%0, %6, %8, %62, %63, %64, %65, %66, %67, %68, %69, %70)]
sortV2.83 [	sub %62 = %2, %3 : int]
sortV2.84 [	ifge %8, %62 goto blklab5 : int]
sortV2.85 [	deref %63 = %5 : &int[]]
sortV2.86 [	indexof %64 = %63, %8 : int[]]
sortV2.87 [	deref %65 = %5 : &int[]]
sortV2.88 [	indexof %66 = %65, %8 : int[]]
sortV2.89 [	update (*%0)[%6] = %66 : &int[] -> &int[]]
sortV2.90 [	const %67 = 1 : int]
sortV2.91 [	add %68 = %6, %67 : int]
sortV2.92 [	assign %6 = %68  : int]
sortV2.93 [	const %69 = 1 : int]
sortV2.94 [	add %70 = %8, %69 : int]
sortV2.95 [	assign %8 = %70  : int]
sortV2.96 [.blklab5]
sortV2.97 [.blklab0]
sortV2.98 [	return]
###### Live analysis for sortV2 function. ######
In:{%16, start, end, %21}
entry [ENTRY] 
Out:{%16, start, end, %21}

In:{%16, start, end, %21}
code [BLOCK] 
-------------------------------
l.0:const %9 = 1 : int
l.1:add %10 = %1, %9 : int
-------------------------------
Out:{%16, start, end, %21, %10}

In:{%16, start, end, %10, %21}
blklab0 [IF] 
-------------------------------
l.0:iflt %10, %2 goto blklab0 : int
l.1:add %12 = %1, %2 : int
l.2:const %13 = 2 : int
l.3:div %14 = %12, %13 : int
l.4:assign %11 = %14  : int
l.5:assign %3 = %11  : int
l.6:deref %17 = %0 : &int[]
-------------------------------
Out:{%16, start, end, pivot, %21, %10}

In:{end, %10}
blklab0 [ELSE] 
-------------------------------
l.0:ifge %10, %2 goto blklab0 : int
-------------------------------
Out:{}

In:{%16, start, end, pivot, %21, %10}
slice10 [INVOKE] 
-------------------------------
l.0:invoke %16 = (%17, %1, %3) whiley/lang/Array:slice : function(int[],int,int) -> int[]
-------------------------------
Out:{%16, start, end, pivot, %21, %10}

In:{%16, start, end, pivot, %21, %10}
slice10 [BLOCK] 
-------------------------------
l.0:newobject %18 = %16 : &int[]
l.1:assign %15 = %18  : &int[]
l.2:assign %4 = %15  : &int[]
l.3:const %19 = 0 : int
-------------------------------
Out:{start, end, pivot, lhs, %21, %10}

In:{start, end, pivot, lhs, %21, %10}
sortV215 [INVOKE] 
-------------------------------
l.0:invoke %(%4, %19, %3) sort_call_by_reference:sortV2 : method(&int[],int,int) -> void
-------------------------------
Out:{start, end, pivot, lhs, %21, %10}

In:{start, end, pivot, lhs, %21, %10}
sortV215 [BLOCK] 
-------------------------------
l.0:deref %22 = %0 : &int[]
-------------------------------
Out:{start, end, pivot, lhs, %21, %10}

In:{start, end, pivot, lhs, %21, %10}
slice17 [INVOKE] 
-------------------------------
l.0:invoke %21 = (%22, %3, %2) whiley/lang/Array:slice : function(int[],int,int) -> int[]
-------------------------------
Out:{start, end, pivot, lhs, %21, %10}

In:{start, end, pivot, lhs, %21, %10}
slice17 [BLOCK] 
-------------------------------
l.0:newobject %23 = %21 : &int[]
l.1:assign %20 = %23  : &int[]
l.2:assign %5 = %20  : &int[]
l.3:const %24 = 0 : int
l.4:sub %25 = %2, %3 : int
-------------------------------
Out:{start, end, pivot, lhs, rhs, %10}

In:{start, end, pivot, lhs, rhs, %10}
sortV223 [INVOKE] 
-------------------------------
l.0:invoke %(%5, %24, %25) sort_call_by_reference:sortV2 : method(&int[],int,int) -> void
-------------------------------
Out:{start, end, pivot, lhs, rhs, %10}

In:{start, end, pivot, lhs, rhs, %10}
sortV223 [BLOCK] 
-------------------------------
l.0:const %27 = 0 : int
l.1:assign %26 = %27  : int
l.2:assign %6 = %26  : int
l.3:const %29 = 0 : int
l.4:assign %28 = %29  : int
l.5:assign %7 = %28  : int
l.6:const %31 = 0 : int
l.7:assign %30 = %31  : int
l.8:assign %8 = %30  : int
-------------------------------
Out:{start, end, pivot, lhs, rhs, i, l, r, %10}

In:{start, end, pivot, lhs, rhs, i, l, r, %10}
blklab1 [LOOP_HEADER] 
-------------------------------
l.0:sub %32 = %2, %1 : int
-------------------------------
Out:{%32, start, end, pivot, lhs, rhs, i, l, r, %10}

In:{%32, start, end, pivot, lhs, rhs, i, l, r, %10}
blklab2 [LOOP_BODY] 
-------------------------------
l.0:ifge %6, %32 goto blklab1 : int
l.1:sub %33 = %3, %1 : int
l.2:ifge %7, %33 goto blklab1 : int
l.3:sub %34 = %2, %3 : int
l.4:ifge %8, %34 goto blklab1 : int
l.5:deref %35 = %4 : &int[]
l.6:indexof %36 = %35, %7 : int[]
l.7:deref %37 = %5 : &int[]
l.8:indexof %38 = %37, %8 : int[]
l.9:ifgt %36, %38 goto blklab2 : int
l.10:deref %39 = %4 : &int[]
l.11:indexof %40 = %39, %7 : int[]
l.12:deref %41 = %4 : &int[]
l.13:indexof %42 = %41, %7 : int[]
l.14:update (*%0)[%6] = %42 : &int[] -> &int[]
l.15:const %43 = 1 : int
l.16:add %44 = %7, %43 : int
l.17:assign %7 = %44  : int
-------------------------------
Out:{%32, start, end, pivot, lhs, rhs, i, l, r, %10}

In:{start, end, pivot, lhs, rhs, i, l, r, %10}
blklab1 [LOOP_EXIT] 
Out:{start, end, pivot, lhs, rhs, i, l, r, %10}

In:{r, rhs, i}
blklab2 [LOOP_EXIT] 
-------------------------------
l.0:deref %45 = %5 : &int[]
l.1:indexof %46 = %45, %8 : int[]
l.2:deref %47 = %5 : &int[]
l.3:indexof %48 = %47, %8 : int[]
l.4:update (*%0)[%6] = %48 : &int[] -> &int[]
l.5:const %49 = 1 : int
l.6:add %50 = %8, %49 : int
l.7:assign %8 = %50  : int
-------------------------------
Out:{}

In:{}
blklab3 [BLOCK] 
-------------------------------
l.0:const %51 = 1 : int
l.1:add %52 = %6, %51 : int
l.2:assign %6 = %52  : int
-------------------------------
Out:{}

In:{start, end, pivot, lhs, rhs, i, l, r, %10}
blklab4 [LOOP_HEADER] 
-------------------------------
l.0:sub %53 = %3, %1 : int
-------------------------------
Out:{start, end, pivot, lhs, %53, rhs, i, l, r, %10}

In:{start, end, pivot, lhs, rhs, %53, i, l, r, %10}
blklab4 [LOOP_BODY] 
-------------------------------
l.0:ifge %7, %53 goto blklab4 : int
l.1:deref %54 = %4 : &int[]
l.2:indexof %55 = %54, %7 : int[]
l.3:deref %56 = %4 : &int[]
l.4:indexof %57 = %56, %7 : int[]
l.5:update (*%0)[%6] = %57 : &int[] -> &int[]
l.6:const %58 = 1 : int
l.7:add %59 = %6, %58 : int
l.8:assign %6 = %59  : int
l.9:const %60 = 1 : int
l.10:add %61 = %7, %60 : int
l.11:assign %7 = %61  : int
-------------------------------
Out:{start, end, pivot, lhs, rhs, i, l, r, %10}

In:{end, pivot, rhs, i, r, %10}
blklab4 [LOOP_EXIT] 
Out:{end, pivot, rhs, i, r, %10}

In:{end, pivot, rhs, i, r, %10}
blklab5 [LOOP_HEADER] 
-------------------------------
l.0:sub %62 = %2, %3 : int
-------------------------------
Out:{end, pivot, rhs, i, r, %10, %62}

In:{end, pivot, rhs, i, r, %10, %62}
blklab5 [LOOP_BODY] 
-------------------------------
l.0:ifge %8, %62 goto blklab5 : int
l.1:deref %63 = %5 : &int[]
l.2:indexof %64 = %63, %8 : int[]
l.3:deref %65 = %5 : &int[]
l.4:indexof %66 = %65, %8 : int[]
l.5:update (*%0)[%6] = %66 : &int[] -> &int[]
l.6:const %67 = 1 : int
l.7:add %68 = %6, %67 : int
l.8:assign %6 = %68  : int
l.9:const %69 = 1 : int
l.10:add %70 = %8, %69 : int
l.11:assign %8 = %70  : int
-------------------------------
Out:{end, pivot, rhs, i, r, %10}

In:{end, %10}
blklab5 [LOOP_EXIT] 
Out:{end, %10}

In:{}
exit [EXIT] 
Out:{}

main.0 [	fieldload %7 = %0 args : {int[][] args,{method(any) -> void print,method(int[]) -> void print_s,method(any) -> void println,method(int[]) -> void println_s} out}]
main.1 [	const %8 = 0 : int]
main.2 [	indexof %9 = %7, %8 : int[][]]
main.3 [	invoke %6 = (%9) whiley/lang/Int:parse : function(whiley/lang/ASCII:string) -> null|int]
main.4 [	assign %5 = %6  : null|int]
main.5 [	assign %1 = %5  : null|int]
main.6 [	ifis %1, null goto blklab6 : null|int]
main.7 [	const %11 = 0 : int]
main.8 [	assign %10 = %11  : int]
main.9 [	assign %2 = %10  : int]
main.10 [	const %13 = 0 : int]
main.11 [	const %14 = 1 : int]
main.12 [	add %15 = %1, %14 : int]
main.13 [	listgen %16 = [13; 15] : int[]]
main.14 [	assign %12 = %16  : int[]]
main.15 [	assign %3 = %12  : int[]]
main.16 [	loop (%2, %3, %17, %18, %19, %20)]
main.17 [	ifgt %2, %1 goto blklab7 : int]
main.18 [	sub %17 = %1, %2 : int]
main.19 [	sub %18 = %1, %2 : int]
main.20 [	update %3[%2] = %18 : int[] -> int[]]
main.21 [	const %19 = 1 : int]
main.22 [	add %20 = %2, %19 : int]
main.23 [	assign %2 = %20  : int]
main.24 [.blklab7]
main.25 [	newobject %22 = %3 : &int[]]
main.26 [	assign %21 = %22  : &int[]]
main.27 [	assign %4 = %21  : &int[]]
main.28 [	const %23 = 0 : int]
main.29 [	const %24 = 1 : int]
main.30 [	add %25 = %1, %24 : int]
main.31 [	invoke %(%4, %23, %25) sort_call_by_reference:sortV2 : method(&int[],int,int) -> void]
main.32 [	assert]
main.33 [	assert]
main.34 [	fieldload %32 = %0 out : {int[][] args,{method(any) -> void print,method(int[]) -> void print_s,method(any) -> void println,method(int[]) -> void println_s} out}]
main.35 [	fieldload %33 = %32 println : {method(any) -> void print,method(int[]) -> void print_s,method(any) -> void println,method(int[]) -> void println_s}]
main.36 [	deref %34 = %4 : &int[]]
main.37 [	indexof %35 = %34, %1 : int[]]
main.38 [	indirectinvoke %33 (%35) : method(any) -> void]
main.39 [.blklab6]
main.40 [	return]
###### Live analysis for main function. ######
In:{sys, %6}
entry [ENTRY] 
Out:{sys, %6}

In:{sys, %6}
code [BLOCK] 
-------------------------------
l.0:fieldload %7 = %0 args : {int[][] args,{method(any) -> void print,method(int[]) -> void print_s,method(any) -> void println,method(int[]) -> void println_s} out}
l.1:const %8 = 0 : int
l.2:indexof %9 = %7, %8 : int[][]
-------------------------------
Out:{sys, %6}

In:{sys, %6}
parse4 [INVOKE] 
-------------------------------
l.0:invoke %6 = (%9) whiley/lang/Int:parse : function(whiley/lang/ASCII:string) -> null|int
-------------------------------
Out:{sys, %6}

In:{sys, %6}
parse4 [BLOCK] 
-------------------------------
l.0:assign %5 = %6  : null|int
l.1:assign %1 = %5  : null|int
l.2:ifis %1, null goto blklab6 : null|int
l.3:const %11 = 0 : int
l.4:assign %10 = %11  : int
l.5:assign %2 = %10  : int
l.6:const %13 = 0 : int
l.7:const %14 = 1 : int
l.8:add %15 = %1, %14 : int
l.9:listgen %16 = [13; 15] : int[]
l.10:assign %12 = %16  : int[]
l.11:assign %3 = %12  : int[]
-------------------------------
Out:{sys, max, index, arr}

In:{sys, max, index, arr}
blklab7 [LOOP_HEADER] 
Out:{sys, max, index, arr}

In:{sys, max, index, arr}
blklab7 [LOOP_BODY] 
-------------------------------
l.0:ifgt %2, %1 goto blklab7 : int
l.1:sub %17 = %1, %2 : int
l.2:sub %18 = %1, %2 : int
l.3:update %3[%2] = %18 : int[] -> int[]
l.4:const %19 = 1 : int
l.5:add %20 = %2, %19 : int
l.6:assign %2 = %20  : int
-------------------------------
Out:{sys, max, index, arr}

In:{sys, max, arr}
blklab7 [LOOP_EXIT] 
-------------------------------
l.0:newobject %22 = %3 : &int[]
l.1:assign %21 = %22  : &int[]
l.2:assign %4 = %21  : &int[]
l.3:const %23 = 0 : int
l.4:const %24 = 1 : int
l.5:add %25 = %1, %24 : int
-------------------------------
Out:{sys, max, ys}

In:{sys, max, ys}
sortV232 [INVOKE] 
-------------------------------
l.0:invoke %(%4, %23, %25) sort_call_by_reference:sortV2 : method(&int[],int,int) -> void
-------------------------------
Out:{sys, max, ys}

In:{sys, max, ys}
sortV232 [BLOCK] 
-------------------------------
l.0:assert
l.1:assert
l.2:fieldload %32 = %0 out : {int[][] args,{method(any) -> void print,method(int[]) -> void print_s,method(any) -> void println,method(int[]) -> void println_s} out}
l.3:fieldload %33 = %32 println : {method(any) -> void print,method(int[]) -> void print_s,method(any) -> void println,method(int[]) -> void println_s}
l.4:deref %34 = %4 : &int[]
l.5:indexof %35 = %34, %1 : int[]
l.6:indirectinvoke %33 (%35) : method(any) -> void
-------------------------------
Out:{}

In:{}
blklab6 [BLOCK] 
Out:{}

In:{}
exit [EXIT] 
Out:{}

Code Generation completed.
File: sort_call_by_reference.c, sort_call_by_reference.h Time: 264 ms Memory Usage: 126512368
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:5068928	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3589360	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3307094	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:3608003	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:6698174	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:6648954	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:6632655	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:7392312	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:6610921	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10
10
Parameter:10	ExecutionTime:5637292	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:7014911	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5658195	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5644488	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5742955	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:6369713	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:5701376	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:6086004	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:4442070	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:3235528	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100
100
Parameter:100	ExecutionTime:2515879	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2731546	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2706957	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2696900	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:2909174	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:3595237	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:5678105	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6308885	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6379812	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6783699	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6332662	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:15451540	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:9995281	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:8661140	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11240360	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:8603722	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:8234252	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:9793394	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11601393	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:8842873	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:8723534	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:36099901	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:37465029	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:37666377	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:37438905	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:38019599	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:36998742	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:36498766	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:37788859	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:36901223	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:37916214	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:319151735	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:321461508	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:321265735	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:321841693	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:319796404	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:318351158	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:322406137	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:321987596	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:319899306	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:320351014	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3395145511	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3398937242	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3394357893	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3387604031	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3389698039	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3390265700	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3388892809	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3391609153	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3393195445	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:3399994076	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6947657362	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6950399826	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6928373247	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6927370339	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6934087413	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6938589082	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6937581933	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6930381649	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6935866839	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 20000000
20000000
Parameter:20000000	ExecutionTime:6933736456	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10542789096	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10540931146	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10527799028	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10538119724	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10557371302	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10524354951	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10565024891	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10538160709	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10549835064	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 30000000
30000000
Parameter:30000000	ExecutionTime:10532216107	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14225016948	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14181779920	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14200951517	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14206316546	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14193364383	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14213027487	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14205506283	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14213749699	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14208848055	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 40000000
40000000
Parameter:40000000	ExecutionTime:14200508563	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17795155266	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17764941001	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17792606393	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17835666908	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17795407689	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17777057882	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17810358902	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17776245671	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17806558842	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 50000000
50000000
Parameter:50000000	ExecutionTime:17806590404	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21574662317	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21557169425	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21608030754	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21587007318	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21591628300	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21595337049	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21557580780	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21610178296	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21666762613	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 60000000
60000000
Parameter:60000000	ExecutionTime:21571590411	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:86032834207	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:77728162627	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:80632627934	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:76732278852	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:85917878534	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:81929517103	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:81913731616	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:79713346955	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:82187862271	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 70000000
70000000
Parameter:70000000	ExecutionTime:81689021007	nanoseconds.
Beginning the benchmarks of fast sort_call_by_reference C program method on array size = 80000000
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 2
initial apicid	: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 2
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 4
initial apicid	: 4
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 6
initial apicid	: 6
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 4
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 1
initial apicid	: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 5
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 3
initial apicid	: 3
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 6
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 3401.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 5
initial apicid	: 5
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

