Code Generation completed.
File: sort_call_by_value.c, sort_call_by_value.h Time: 100 ms Memory Usage: 126769368
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:4466560	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:3203250	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:3037084	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:5130117	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:5283531	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:4721053	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:4553504	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:4757059	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:5294931	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10
10
Parameter:10	ExecutionTime:5309678	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5263137	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5296498	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5162326	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5095751	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5140421	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5105494	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5099847	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5233963	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5274256	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100
100
Parameter:100	ExecutionTime:5268987	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6473438	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6664896	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6560971	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6730339	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6643523	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6652516	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6549859	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6503861	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6381366	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000
1000
Parameter:1000	ExecutionTime:6242768	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:20413862	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:13480314	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11703944	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11240177	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:8510506	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:14366452	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:13251375	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11813673	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11700701	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000
10000
Parameter:10000	ExecutionTime:11629799	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:60853533	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:63050407	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:62985771	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:65120079	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:63233516	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:63648031	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:63319458	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:62015029	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:62861646	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 100000
100000
Parameter:100000	ExecutionTime:61266956	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:591397435	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:592116762	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:591647039	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:591442566	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:590678551	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:588357911	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:587831417	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:590683673	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:595945324	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 1000000
1000000
Parameter:1000000	ExecutionTime:592250799	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6180067472	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6171346428	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6184835169	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6175016449	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6202483191	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6177183513	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6187276364	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6172424455	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6172499839	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 10000000
10000000
Parameter:10000000	ExecutionTime:6176009484	nanoseconds.
Beginning the benchmarks of slow sort_call_by_value C program method on array size = 20000000
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 2
initial apicid	: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 2
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 2500.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 4
initial apicid	: 4
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 6
initial apicid	: 6
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 4
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 1200.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 1
initial apicid	: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 5
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 3
initial apicid	: 3
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 6
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 3401.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 5
initial apicid	: 5
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 60
model name	: Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz
stepping	: 3
microcode	: 0x16
cpu MHz		: 800.000
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm
bogomips	: 6784.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

