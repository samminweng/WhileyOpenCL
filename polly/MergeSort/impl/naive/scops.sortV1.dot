digraph "Scop Graph for 'sortV1' function" {
	label="Scop Graph for 'sortV1' function";

	Node0x8ff23f0 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x8ff23f0 -> Node0x90767c0;
	Node0x90767c0 [shape=record,label="{entry.split:                                      \l  %add = add nsw i64 %start, 1\l  %cmp = icmp slt i64 %add, %end\l  br i1 %cmp, label %if.end, label %blklab0\l}"];
	Node0x90767c0 -> Node0x8f73c40;
	Node0x90767c0 -> Node0x8fed0b0;
	Node0x8f73c40 [shape=record,label="{if.end:                                           \l  %add1 = add nsw i64 %end, %start\l  %div = sdiv i64 %add1, 2\l  %call = tail call i64* @slice(i64* %items, i64 %items_size, i64 %start, i64\l... %div)\l  %sub = sub nsw i64 %div, %start\l  %call2 = tail call i64* @copy(i64* %call, i64 %sub)\l  %call3 = tail call i64* @copy(i64* %call2, i64 %sub)\l  %call4 = tail call i64* @sortV1(i64* %call3, i64 %sub, i64 0, i64 %div)\l  %call5 = tail call i64* @copy(i64* %call4, i64 %sub)\l  %call6 = tail call i64* @slice(i64* %items, i64 %items_size, i64 %div, i64\l... %end)\l  %sub7 = sub nsw i64 %end, %div\l  %call8 = tail call i64* @copy(i64* %call6, i64 %sub7)\l  %call10 = tail call i64* @copy(i64* %call8, i64 %sub7)\l  %call11 = tail call i64* @sortV1(i64* %call10, i64 %sub7, i64 0, i64 %sub7)\l  %call12 = tail call i64* @copy(i64* %call11, i64 %sub7)\l  %sub13 = sub nsw i64 %end, %start\l  %cmp14179 = icmp sgt i64 %sub13, 0\l  %cmp18180 = icmp sgt i64 %sub, 0\l  %or.cond181 = and i1 %cmp18180, %cmp14179\l  %cmp22182 = icmp sgt i64 %sub7, 0\l  %or.cond172183 = and i1 %cmp22182, %or.cond181\l  br i1 %or.cond172183, label %if.end24.lr.ph, label %while.body37.preheader\l}"];
	Node0x8f73c40 -> Node0x8f9e810;
	Node0x8f73c40 -> Node0x8f71ea0;
	Node0x8f9e810 [shape=record,label="{if.end24.lr.ph:                                   \l  br label %if.end24\l}"];
	Node0x8f9e810 -> Node0x8f97fa0;
	Node0x8f97fa0 [shape=record,label="{if.end24:                                         \l  %i.0186 = phi i64 [ 0, %if.end24.lr.ph ], [ %add35, %blklab4 ]\l  %r.0185 = phi i64 [ 0, %if.end24.lr.ph ], [ %r.1, %blklab4 ]\l  %l.0184 = phi i64 [ 0, %if.end24.lr.ph ], [ %l.1, %blklab4 ]\l  %arrayidx = getelementptr inbounds i64, i64* %call5, i64 %l.0184\l  %3 = load i64, i64* %arrayidx, align 8, !tbaa !1\l  %arrayidx25 = getelementptr inbounds i64, i64* %call12, i64 %r.0185\l  %4 = load i64, i64* %arrayidx25, align 8, !tbaa !1\l  %cmp26 = icmp sgt i64 %3, %4\l  %arrayidx33 = getelementptr inbounds i64, i64* %items, i64 %i.0186\l  br i1 %cmp26, label %blklab3, label %if.end28\l}"];
	Node0x8f97fa0 -> Node0x8f97d70;
	Node0x8f97fa0 -> Node0x8f64a30;
	Node0x8f97d70 [shape=record,label="{blklab3:                                          \l  store i64 %4, i64* %arrayidx33, align 8, !tbaa !1\l  %add34 = add nsw i64 %r.0185, 1\l  br label %blklab4\l}"];
	Node0x8f97d70 -> Node0x8fd9f40;
	Node0x8fd9f40 [shape=record,label="{blklab4:                                          \l  %l.1 = phi i64 [ %l.0184, %blklab3 ], [ %add31, %if.end28 ]\l  %r.1 = phi i64 [ %add34, %blklab3 ], [ %r.0185, %if.end28 ]\l  %add35 = add nuw nsw i64 %i.0186, 1\l  %cmp14 = icmp slt i64 %add35, %sub13\l  %cmp18 = icmp slt i64 %l.1, %sub\l  %or.cond = and i1 %cmp18, %cmp14\l  %cmp22 = icmp slt i64 %r.1, %sub7\l  %or.cond172 = and i1 %cmp22, %or.cond\l  br i1 %or.cond172, label %if.end24, label\l... %while.body.while.body37.preheader_crit_edge\l}"];
	Node0x8fd9f40 -> Node0x8f97fa0[constraint=false];
	Node0x8fd9f40 -> Node0x8f88920;
	Node0x8f88920 [shape=record,label="{while.body.while.body37.preheader_crit_edge:      \l  %add35.lcssa = phi i64 [ %add35, %blklab4 ]\l  %r.1.lcssa = phi i64 [ %r.1, %blklab4 ]\l  %l.1.lcssa = phi i64 [ %l.1, %blklab4 ]\l  br label %while.body37.preheader\l}"];
	Node0x8f88920 -> Node0x8f71ea0;
	Node0x8f71ea0 [shape=record,label="{while.body37.preheader:                           \l  %i.0.lcssa = phi i64 [ %add35.lcssa,\l... %while.body.while.body37.preheader_crit_edge ], [ 0, %if.end ]\l  %r.0.lcssa = phi i64 [ %r.1.lcssa,\l... %while.body.while.body37.preheader_crit_edge ], [ 0, %if.end ]\l  %l.0.lcssa = phi i64 [ %l.1.lcssa,\l... %while.body.while.body37.preheader_crit_edge ], [ 0, %if.end ]\l  %cmp39176 = icmp slt i64 %l.0.lcssa, %sub\l  br i1 %cmp39176, label %if.end41.lr.ph, label %while.body47.preheader\l}"];
	Node0x8f71ea0 -> Node0x8facc90;
	Node0x8f71ea0 -> Node0x8f97c30;
	Node0x8facc90 [shape=record,label="{if.end41.lr.ph:                                   \l  %0 = add i64 %i.0.lcssa, %div\l  %1 = sub i64 %0, %l.0.lcssa\l  %2 = sub i64 %1, %start\l  br label %if.end41\l}"];
	Node0x8facc90 -> Node0x8f7d250;
	Node0x8f7d250 [shape=record,label="{if.end41:                                         \l  %i.1178 = phi i64 [ %i.0.lcssa, %if.end41.lr.ph ], [ %add44, %if.end41 ]\l  %l.2177 = phi i64 [ %l.0.lcssa, %if.end41.lr.ph ], [ %add45, %if.end41 ]\l  %arrayidx42 = getelementptr inbounds i64, i64* %call5, i64 %l.2177\l  %6 = load i64, i64* %arrayidx42, align 8, !tbaa !1\l  %arrayidx43 = getelementptr inbounds i64, i64* %items, i64 %i.1178\l  store i64 %6, i64* %arrayidx43, align 8, !tbaa !1\l  %add44 = add nsw i64 %i.1178, 1\l  %add45 = add nsw i64 %l.2177, 1\l  %exitcond190 = icmp ne i64 %add44, %2\l  br i1 %exitcond190, label %if.end41, label\l... %while.body37.while.body47.preheader_crit_edge\l}"];
	Node0x8f7d250 -> Node0x8f7d250[constraint=false];
	Node0x8f7d250 -> Node0x8f9bcf0;
	Node0x8f9bcf0 [shape=record,label="{while.body37.while.body47.preheader_crit_edge:    \l  br label %while.body47.preheader\l}"];
	Node0x8f9bcf0 -> Node0x8f97c30;
	Node0x8f97c30 [shape=record,label="{while.body47.preheader:                           \l  %i.1.lcssa = phi i64 [ %2, %while.body37.while.body47.preheader_crit_edge ],\l... [ %i.0.lcssa, %while.body37.preheader ]\l  %cmp49173 = icmp slt i64 %r.0.lcssa, %sub7\l  br i1 %cmp49173, label %if.end51.lr.ph, label %blklab0.loopexit\l}"];
	Node0x8f97c30 -> Node0x8f9bd10;
	Node0x8f97c30 -> Node0x8f9bd30;
	Node0x8f9bd10 [shape=record,label="{if.end51.lr.ph:                                   \l  %5 = sub i64 %end, %div\l  br label %if.end51\l}"];
	Node0x8f9bd10 -> Node0x8f69490;
	Node0x8f69490 [shape=record,label="{if.end51:                                         \l  %i.2175 = phi i64 [ %i.1.lcssa, %if.end51.lr.ph ], [ %add54, %if.end51 ]\l  %r.2174 = phi i64 [ %r.0.lcssa, %if.end51.lr.ph ], [ %add55, %if.end51 ]\l  %arrayidx52 = getelementptr inbounds i64, i64* %call12, i64 %r.2174\l  %7 = load i64, i64* %arrayidx52, align 8, !tbaa !1\l  %arrayidx53 = getelementptr inbounds i64, i64* %items, i64 %i.2175\l  store i64 %7, i64* %arrayidx53, align 8, !tbaa !1\l  %add54 = add nsw i64 %i.2175, 1\l  %add55 = add nsw i64 %r.2174, 1\l  %exitcond = icmp ne i64 %add55, %5\l  br i1 %exitcond, label %if.end51, label\l... %while.body47.blklab0.loopexit_crit_edge\l}"];
	Node0x8f69490 -> Node0x8f69490[constraint=false];
	Node0x8f69490 -> Node0x8f694f0;
	Node0x8f694f0 [shape=record,label="{while.body47.blklab0.loopexit_crit_edge:          \l  br label %blklab0.loopexit\l}"];
	Node0x8f694f0 -> Node0x8f9bd30;
	Node0x8f9bd30 [shape=record,label="{blklab0.loopexit:                                 \l  br label %blklab0\l}"];
	Node0x8f9bd30 -> Node0x8fed0b0;
	Node0x8fed0b0 [shape=record,label="{blklab0:                                          \l  ret i64* %items\l}"];
	Node0x8f64a30 [shape=record,label="{if.end28:                                         \l  store i64 %3, i64* %arrayidx33, align 8, !tbaa !1\l  %add31 = add nsw i64 %l.0184, 1\l  br label %blklab4\l}"];
	Node0x8f64a30 -> Node0x8fd9f40;
	colorscheme = "paired12"
        subgraph cluster_0x8e998a0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x8f9e9f0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: if.end24";
            style = solid;
            color = 6
            subgraph cluster_0x8f79da0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: if.end24";
              style = solid;
              color = 5
              subgraph cluster_0x8f79d20 {
                label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: if.end24";
                style = solid;
                color = 7
                subgraph cluster_0x8f79ca0 {
                  label = "Region can not profitably be optimized!";
                  style = solid;
                  color = 9
                  Node0x8f97fa0;
                  Node0x8f97d70;
                  Node0x8f64a30;
                }
                Node0x8fd9f40;
              }
              Node0x8f73c40;
              Node0x8f9e810;
              Node0x8f88920;
            }
            subgraph cluster_0x8f84930 {
              label = "Non affine loop bound '(-1 + (-1 * %start) + (-1 * %l.0.lcssa) + %div)' in loop: if.end41";
              style = solid;
              color = 5
              subgraph cluster_0x8f848b0 {
                label = "Region can not profitably be optimized!";
                style = solid;
                color = 7
                Node0x8f7d250;
              }
              Node0x8f71ea0;
              Node0x8facc90;
              Node0x8f9bcf0;
            }
            subgraph cluster_0x8ff2410 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              subgraph cluster_0x8f888a0 {
                label = "Region can not profitably be optimized!";
                style = solid;
                color = 7
                Node0x8f69490;
              }
              Node0x8f97c30;
              Node0x8f9bd10;
              Node0x8f694f0;
            }
            Node0x90767c0;
            Node0x8f9bd30;
          }
          Node0x8ff23f0;
          Node0x8fed0b0;
        }
}
