digraph "Scop Graph for 'printf1DArray' function" {
	label="Scop Graph for 'printf1DArray' function";

	Node0x8fa9fd0 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x8fa9fd0 -> Node0x8f8a4a0;
	Node0x8f8a4a0 [shape=record,label="{entry.split:                                      \l  %putchar = tail call i32 @putchar(i32 91) #5\l  %cmp24 = icmp sgt i64 %input_size, 0\l  br i1 %cmp24, label %for.body.lr.ph, label %for.end\l}"];
	Node0x8f8a4a0 -> Node0x8ff3aa0;
	Node0x8f8a4a0 -> Node0x8ff1ec0;
	Node0x8ff3aa0 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x8ff3aa0 -> Node0x8f65380;
	Node0x8f65380 [shape=record,label="{for.body:                                         \l  %i.026 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]\l  %isFirst.025 = phi i32 [ 1, %for.body.lr.ph ], [ %isFirst.1, %for.inc ]\l  %tobool = icmp eq i32 %isFirst.025, 0\l  %arrayidx = getelementptr inbounds i64, i64* %input, i64 %i.026\l  %0 = load i64, i64* %arrayidx, align 8, !tbaa !1\l  br i1 %tobool, label %if.else, label %if.then\l}"];
	Node0x8f65380 -> Node0x8fec640;
	Node0x8f65380 -> Node0x8f983e0;
	Node0x8fec640 [shape=record,label="{if.else:                                          \l  %call5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x\l... i8], [6 x i8]* @.str.13, i64 0, i64 0), i64 %0)\l  br label %for.inc\l}"];
	Node0x8fec640 -> Node0x8fec5e0;
	Node0x8fec5e0 [shape=record,label="{for.inc:                                          \l  %isFirst.1 = phi i32 [ 0, %if.then ], [ %isFirst.025, %if.else ]\l  %inc = add nuw nsw i64 %i.026, 1\l  %cmp = icmp slt i64 %inc, %input_size\l  %cmp1 = icmp slt i64 %inc, 10\l  %or.cond = and i1 %cmp, %cmp1\l  br i1 %or.cond, label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x8fec5e0 -> Node0x8f65380[constraint=false];
	Node0x8fec5e0 -> Node0x8ff1a50;
	Node0x8ff1a50 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  %cmp.lcssa27 = phi i1 [ %cmp, %for.inc ]\l  br label %for.end\l}"];
	Node0x8ff1a50 -> Node0x8ff1ec0;
	Node0x8ff1ec0 [shape=record,label="{for.end:                                          \l  %cmp.lcssa = phi i1 [ %cmp.lcssa27, %for.cond.for.end_crit_edge ], [ %cmp24,\l... %entry.split ]\l  br i1 %cmp.lcssa, label %if.then8, label %if.end11\l}"];
	Node0x8ff1ec0 -> Node0x8fe7c30;
	Node0x8ff1ec0 -> Node0x8f6b990;
	Node0x8fe7c30 [shape=record,label="{if.then8:                                         \l  %sub = add nsw i64 %input_size, -1\l  %arrayidx9 = getelementptr inbounds i64, i64* %input, i64 %sub\l  %1 = load i64, i64* %arrayidx9, align 8, !tbaa !1\l  %call10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x\l... i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 %1)\l  br label %if.end11\l}"];
	Node0x8fe7c30 -> Node0x8f6b990;
	Node0x8f6b990 [shape=record,label="{if.end11:                                         \l  %putchar23 = tail call i32 @putchar(i32 93) #5\l  ret void\l}"];
	Node0x8f983e0 [shape=record,label="{if.then:                                          \l  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x\l... i8], [5 x i8]* @.str.12, i64 0, i64 0), i64 %0)\l  br label %for.inc\l}"];
	Node0x8f983e0 -> Node0x8fec5e0;
	colorscheme = "paired12"
        subgraph cluster_0x8f915c0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x8f68020 {
            label = "Call instruction:   %putchar = tail call i32 @putchar(i32 91) #5";
            style = solid;
            color = 6
            subgraph cluster_0x8f67fa0 {
              label = "Call instruction:   %call5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i64 %0)";
              style = solid;
              color = 5
              subgraph cluster_0x8fe7b70 {
                label = "Region can not profitably be optimized!";
                style = solid;
                color = 7
                Node0x8f65380;
                Node0x8fec640;
                Node0x8f983e0;
              }
              Node0x8fec5e0;
            }
            Node0x8f8a4a0;
            Node0x8ff3aa0;
            Node0x8ff1a50;
          }
          subgraph cluster_0x8f69940 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            Node0x8ff1ec0;
            Node0x8fe7c30;
          }
          Node0x8fa9fd0;
          Node0x8f6b990;
        }
}
