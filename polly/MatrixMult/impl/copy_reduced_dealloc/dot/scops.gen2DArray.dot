digraph "Scop Graph for 'gen2DArray' function" {
	label="Scop Graph for 'gen2DArray' function";

	Node0x60c3b00 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x60c3b00 -> Node0x609da60;
	Node0x609da60 [shape=record,label="{entry.split:                                      \l  %mul = shl i64 %y, 3\l  %mul1 = shl i64 %x, 3\l  %call = tail call noalias i8* @malloc(i64 %mul1) #6\l  %0 = bitcast i8* %call to i64**\l  %cmp = icmp eq i8* %call, null\l  br i1 %cmp, label %if.then, label %for.cond.preheader\l}"];
	Node0x609da60 -> Node0x60c81b0;
	Node0x609da60 -> Node0x60c1410;
	Node0x60c81b0 [shape=record,label="{if.then:                                          \l  %puts1 = tail call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x\l... i8]* @str.3, i64 0, i64 0))\l  tail call void @exit(i32 -2) #7\l  unreachable\l}"];
	Node0x60c1410 [shape=record,label="{for.cond.preheader:                               \l  %cmp32 = icmp sgt i64 %x, 0\l  br i1 %cmp32, label %for.body.lr.ph, label %for.end\l}"];
	Node0x60c1410 -> Node0x608e1e0;
	Node0x60c1410 -> Node0x609e540;
	Node0x608e1e0 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x608e1e0 -> Node0x60a3f90;
	Node0x60a3f90 [shape=record,label="{for.body:                                         \l  %i.03 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %if.end9 ]\l  %call4 = tail call noalias i8* @malloc(i64 %mul) #6\l  %arrayidx = getelementptr inbounds i64*, i64** %0, i64 %i.03\l  %1 = bitcast i64** %arrayidx to i8**\l  store i8* %call4, i8** %1, align 8\l  %cmp6 = icmp eq i8* %call4, null\l  br i1 %cmp6, label %if.then7, label %if.end9\l}"];
	Node0x60a3f90 -> Node0x60c2d80;
	Node0x60a3f90 -> Node0x60ba9a0;
	Node0x60c2d80 [shape=record,label="{if.then7:                                         \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x\l... i8]* @str.2, i64 0, i64 0))\l  tail call void @exit(i32 -2) #7\l  unreachable\l}"];
	Node0x60ba9a0 [shape=record,label="{if.end9:                                          \l  %arrayidx10 = getelementptr inbounds i64*, i64** %0, i64 %i.03\l  %2 = bitcast i64** %arrayidx10 to i8**\l  %3 = load i8*, i8** %2, align 8\l  %4 = bitcast i64* %arr to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 %mul, i32 8,\l... i1 false)\l  %inc = add nuw nsw i64 %i.03, 1\l  %cmp3 = icmp slt i64 %inc, %x\l  br i1 %cmp3, label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x60ba9a0 -> Node0x60a3f90;
	Node0x60ba9a0 -> Node0x60c3e80;
	Node0x60c3e80 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  br label %for.end\l}"];
	Node0x60c3e80 -> Node0x609e540;
	Node0x609e540 [shape=record,label="{for.end:                                          \l  ret i64** %0\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x60d2450 {
          label = "";
          style = solid;
          color = 1
          Node0x60c3b00;
          Node0x609da60;
          Node0x60c81b0;
          Node0x60c1410;
          Node0x608e1e0;
          Node0x60a3f90;
          Node0x60c2d80;
          Node0x60ba9a0;
          Node0x60c3e80;
          Node0x609e540;
        }
}
