digraph "Scop Graph for 'optimized_append' function" {
	label="Scop Graph for 'optimized_append' function";

	Node0x60a81d0 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x60a81d0 -> Node0x609b220;
	Node0x609b220 [shape=record,label="{entry.split:                                      \l  %0 = load i64, i64* %op_1_size, align 8\l  %call = tail call i32 @isPowerof2(i64 %0)\l  %tobool = icmp eq i32 %call, 0\l  br i1 %tobool, label %if.end6, label %while.cond.preheader\l}"];
	Node0x609b220 -> Node0x60ee330;
	Node0x609b220 -> Node0x60c45a0;
	Node0x60ee330 [shape=record,label="{if.end6:                                          \l  %ret.0 = phi i64* [ %4, %if.end ], [ %op_1, %entry.split ]\l  %5 = load i64, i64* %op_2_size, align 8\l  %cmp71 = icmp sgt i64 %5, 0\l  br i1 %cmp71, label %for.body.lr.ph, label %for.end\l}"];
	Node0x60ee330 -> Node0x60c3b00;
	Node0x60ee330 -> Node0x60c3060;
	Node0x60c3b00 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x60c3b00 -> Node0x60c34b0;
	Node0x60c34b0 [shape=record,label="{for.body:                                         \l  %i.02 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds i64, i64* %op_2, i64 %i.02\l  %6 = load i64, i64* %arrayidx, align 8\l  %7 = load i64, i64* %op_1_size, align 8\l  %add8 = add nsw i64 %7, %i.02\l  %arrayidx9 = getelementptr inbounds i64, i64* %ret.0, i64 %add8\l  store i64 %6, i64* %arrayidx9, align 8\l  %inc = add nuw nsw i64 %i.02, 1\l  %8 = load i64, i64* %op_2_size, align 8\l  %cmp7 = icmp slt i64 %inc, %8\l  br i1 %cmp7, label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x60c34b0 -> Node0x60c34b0[constraint=false];
	Node0x60c34b0 -> Node0x60a9070;
	Node0x60a9070 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  br label %for.end\l}"];
	Node0x60a9070 -> Node0x60c3060;
	Node0x60c3060 [shape=record,label="{for.end:                                          \l  %9 = load i64, i64* %op_1_size, align 8\l  %10 = load i64, i64* %op_2_size, align 8\l  %add10 = add nsw i64 %10, %9\l  store i64 %add10, i64* %ret_size, align 8\l  ret i64* %ret.0\l}"];
	Node0x60c45a0 [shape=record,label="{while.cond.preheader:                             \l  br label %while.cond\l}"];
	Node0x60c45a0 -> Node0x60a8a40;
	Node0x60a8a40 [shape=record,label="{while.cond:                                       \l  %allocated_size.0 = phi i64 [ %mul, %while.cond ], [ 2,\l... %while.cond.preheader ]\l  %1 = load i64, i64* %op_1_size, align 8\l  %2 = load i64, i64* %op_2_size, align 8\l  %add = add nsw i64 %2, %1\l  %cmp = icmp slt i64 %allocated_size.0, %add\l  %mul = shl nsw i64 %allocated_size.0, 1\l  br i1 %cmp, label %while.cond, label %while.end\l}"];
	Node0x60a8a40 -> Node0x60a8a40[constraint=false];
	Node0x60a8a40 -> Node0x60a3ae0;
	Node0x60a3ae0 [shape=record,label="{while.end:                                        \l  %allocated_size.0.lcssa = phi i64 [ %allocated_size.0, %while.cond ]\l  %3 = bitcast i64* %op_1 to i8*\l  %mul1 = shl i64 %allocated_size.0.lcssa, 3\l  %call2 = tail call i8* @realloc(i8* %3, i64 %mul1) #6\l  %cmp3 = icmp eq i8* %call2, null\l  br i1 %cmp3, label %if.then4, label %if.end\l}"];
	Node0x60a3ae0 -> Node0x60c0980;
	Node0x60a3ae0 -> Node0x60ab250;
	Node0x60c0980 [shape=record,label="{if.then4:                                         \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([54 x i8], [54 x\l... i8]* @str.12, i64 0, i64 0))\l  tail call void @exit(i32 -2) #7\l  unreachable\l}"];
	Node0x60ab250 [shape=record,label="{if.end:                                           \l  %4 = bitcast i8* %call2 to i64*\l  br label %if.end6\l}"];
	Node0x60ab250 -> Node0x60ee330;
	colorscheme = "paired12"
        subgraph cluster_0x60d2450 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x60ee2b0 {
            label = "Base address not invariant in current region:  %ret.0 = phi i64* [ %4, %if.end ], [ %op_1, %entry.split ]";
            style = solid;
            color = 6
            subgraph cluster_0x6110b90 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x60c34b0;
            }
            Node0x60ee330;
            Node0x60c3b00;
            Node0x60a9070;
          }
          subgraph cluster_0x60ee150 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.cond";
            style = solid;
            color = 6
            Node0x60a8a40;
          }
          Node0x60a81d0;
          Node0x609b220;
          Node0x60c3060;
          Node0x60c45a0;
          Node0x60a3ae0;
          Node0x60c0980;
          Node0x60ab250;
        }
}
