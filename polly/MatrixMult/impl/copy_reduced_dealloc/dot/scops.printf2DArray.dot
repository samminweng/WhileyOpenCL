digraph "Scop Graph for 'printf2DArray' function" {
	label="Scop Graph for 'printf2DArray' function";

	Node0x60c3e80 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x60c3e80 -> Node0x60ba9a0;
	Node0x60ba9a0 [shape=record,label="{entry.split:                                      \l  %putchar = tail call i32 @putchar(i32 91) #6\l  %cmp2 = icmp sgt i64 %input_size, 0\l  br i1 %cmp2, label %for.body.lr.ph, label %for.end\l}"];
	Node0x60ba9a0 -> Node0x609eb40;
	Node0x60ba9a0 -> Node0x60a8a40;
	Node0x609eb40 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x609eb40 -> Node0x60aa000;
	Node0x60aa000 [shape=record,label="{for.body:                                         \l  %i.04 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds i64*, i64** %input, i64 %i.04\l  %0 = load i64*, i64** %arrayidx, align 8\l  tail call void @printf1DArray(i64* %0, i64 %input_size_size)\l  %inc = add nuw nsw i64 %i.04, 1\l  %cmp = icmp slt i64 %inc, %input_size\l  %cmp1 = icmp slt i64 %inc, 10\l  %cmp1. = and i1 %cmp, %cmp1\l  br i1 %cmp1., label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x60aa000 -> Node0x60aa000[constraint=false];
	Node0x60aa000 -> Node0x60bab20;
	Node0x60bab20 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  %inc.lcssa = phi i64 [ %inc, %for.body ]\l  br label %for.end\l}"];
	Node0x60bab20 -> Node0x60a8a40;
	Node0x60a8a40 [shape=record,label="{for.end:                                          \l  %i.0.lcssa = phi i64 [ %inc.lcssa, %for.cond.for.end_crit_edge ], [ 0,\l... %entry.split ]\l  %cmp3 = icmp slt i64 %i.0.lcssa, %input_size\l  br i1 %cmp3, label %if.then, label %if.end\l}"];
	Node0x60a8a40 -> Node0x60c3b00;
	Node0x60a8a40 -> Node0x60c3c60;
	Node0x60c3b00 [shape=record,label="{if.then:                                          \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([5 x i8], [5 x i8]*\l... @str.11, i64 0, i64 0))\l  %sub = add nsw i64 %input_size, -1\l  %arrayidx6 = getelementptr inbounds i64*, i64** %input, i64 %sub\l  %1 = load i64*, i64** %arrayidx6, align 8\l  tail call void @printf1DArray(i64* %1, i64 %input_size_size)\l  br label %if.end\l}"];
	Node0x60c3b00 -> Node0x60c3c60;
	Node0x60c3c60 [shape=record,label="{if.end:                                           \l  %putchar1 = tail call i32 @putchar(i32 93) #6\l  ret void\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x60d2450 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x60ee180 {
            label = "Call instruction:   %putchar = tail call i32 @putchar(i32 91) #6";
            style = solid;
            color = 6
            subgraph cluster_0x60eb970 {
              label = "Call instruction:   tail call void @printf1DArray(i64* %0, i64 %input_size_size)";
              style = solid;
              color = 5
              Node0x60aa000;
            }
            Node0x60ba9a0;
            Node0x609eb40;
            Node0x60bab20;
          }
          subgraph cluster_0x60eb9f0 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            Node0x60a8a40;
            Node0x60c3b00;
          }
          Node0x60c3e80;
          Node0x60c3c60;
        }
}
