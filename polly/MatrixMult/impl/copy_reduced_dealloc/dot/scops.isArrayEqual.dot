digraph "Scop Graph for 'isArrayEqual' function" {
	label="Scop Graph for 'isArrayEqual' function";

	Node0x60a8210 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x60a8210 -> Node0x609a2c0;
	Node0x609a2c0 [shape=record,label="{entry.split:                                      \l  %cmp = icmp eq i64 %arr1_size, %arr2_size\l  br i1 %cmp, label %for.cond.preheader, label %return\l}"];
	Node0x609a2c0 -> Node0x60a6e50;
	Node0x609a2c0 -> Node0x60ad7e0;
	Node0x60a6e50 [shape=record,label="{for.cond.preheader:                               \l  %cmp11 = icmp sgt i64 %arr1_size, 0\l  br i1 %cmp11, label %for.body.lr.ph, label %return.loopexit\l}"];
	Node0x60a6e50 -> Node0x609b220;
	Node0x60a6e50 -> Node0x60ce290;
	Node0x609b220 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x609b220 -> Node0x60b9ac0;
	Node0x60b9ac0 [shape=record,label="{for.body:                                         \l  %i.02 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.cond ]\l  %arrayidx = getelementptr inbounds i64, i64* %arr1, i64 %i.02\l  %0 = load i64, i64* %arrayidx, align 8\l  %arrayidx2 = getelementptr inbounds i64, i64* %arr2, i64 %i.02\l  %1 = load i64, i64* %arrayidx2, align 8\l  %cmp3 = icmp eq i64 %0, %1\l  %inc = add nuw nsw i64 %i.02, 1\l  br i1 %cmp3, label %for.cond, label %for.body.return.loopexit_crit_edge\l}"];
	Node0x60b9ac0 -> Node0x608faa0;
	Node0x60b9ac0 -> Node0x60bceb0;
	Node0x608faa0 [shape=record,label="{for.cond:                                         \l  %cmp1 = icmp slt i64 %inc, %arr1_size\l  br i1 %cmp1, label %for.body, label %for.cond.return.loopexit_crit_edge\l}"];
	Node0x608faa0 -> Node0x60b9ac0[constraint=false];
	Node0x608faa0 -> Node0x60a9a40;
	Node0x60a9a40 [shape=record,label="{for.cond.return.loopexit_crit_edge:               \l  br label %return.loopexit\l}"];
	Node0x60a9a40 -> Node0x60ce290;
	Node0x60ce290 [shape=record,label="{return.loopexit:                                  \l  %retval.0.ph = phi i32 [ 1, %for.cond.return.loopexit_crit_edge ], [ 0,\l... %for.body.return.loopexit_crit_edge ], [ 1, %for.cond.preheader ]\l  br label %return\l}"];
	Node0x60ce290 -> Node0x60ad7e0;
	Node0x60ad7e0 [shape=record,label="{return:                                           \l  %retval.0 = phi i32 [ 0, %entry.split ], [ %retval.0.ph, %return.loopexit ]\l  ret i32 %retval.0\l}"];
	Node0x60bceb0 [shape=record,label="{for.body.return.loopexit_crit_edge:               \l  br label %return.loopexit\l}"];
	Node0x60bceb0 -> Node0x60ce290;
	colorscheme = "paired12"
        subgraph cluster_0x60d2450 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x60ee1b0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0x60ee130 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              subgraph cluster_0x60e50a0 {
                label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
                style = solid;
                color = 7
                Node0x60b9ac0;
                Node0x608faa0;
                Node0x60a9a40;
                Node0x60bceb0;
              }
              Node0x60a6e50;
              Node0x609b220;
            }
            Node0x609a2c0;
            Node0x60ce290;
          }
          Node0x60a8210;
          Node0x60ad7e0;
        }
}
