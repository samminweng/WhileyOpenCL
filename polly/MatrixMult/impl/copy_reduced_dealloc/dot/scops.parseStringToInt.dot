digraph "Scop Graph for 'parseStringToInt' function" {
	label="Scop Graph for 'parseStringToInt' function";

	Node0x60bab20 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x60bab20 -> Node0x60b6fd0;
	Node0x60b6fd0 [shape=record,label="{entry.split:                                      \l  %0 = load i64, i64* %arr, align 8\l  %cmp1 = icmp sgt i64 %0, -1\l  br i1 %cmp1, label %land.rhs.lr.ph, label %while.end\l}"];
	Node0x60b6fd0 -> Node0x60ce930;
	Node0x60b6fd0 -> Node0x60ce290;
	Node0x60ce930 [shape=record,label="{land.rhs.lr.ph:                                   \l  br label %land.rhs\l}"];
	Node0x60ce930 -> Node0x60b9540;
	Node0x60b9540 [shape=record,label="{land.rhs:                                         \l  %i.03 = phi i64 [ 0, %land.rhs.lr.ph ], [ %inc, %while.body ]\l  %value.02 = phi i64 [ 0, %land.rhs.lr.ph ], [ %add, %while.body ]\l  %arrayidx1 = getelementptr inbounds i64, i64* %arr, i64 %i.03\l  %1 = load i64, i64* %arrayidx1, align 8\l  %cmp2 = icmp slt i64 %1, 10\l  br i1 %cmp2, label %while.body, label %land.rhs.while.end_crit_edge\l}"];
	Node0x60b9540 -> Node0x60c3620;
	Node0x60b9540 -> Node0x6099940;
	Node0x60c3620 [shape=record,label="{while.body:                                       \l  %mul = mul nsw i64 %value.02, 10\l  %arrayidx3 = getelementptr inbounds i64, i64* %arr, i64 %i.03\l  %2 = load i64, i64* %arrayidx3, align 8\l  %add = add nsw i64 %2, %mul\l  %inc = add nuw nsw i64 %i.03, 1\l  %arrayidx = getelementptr inbounds i64, i64* %arr, i64 %inc\l  %3 = load i64, i64* %arrayidx, align 8\l  %cmp = icmp sgt i64 %3, -1\l  br i1 %cmp, label %land.rhs, label %while.cond.while.end_crit_edge\l}"];
	Node0x60c3620 -> Node0x60b9540[constraint=false];
	Node0x60c3620 -> Node0x60a6e50;
	Node0x60a6e50 [shape=record,label="{while.cond.while.end_crit_edge:                   \l  %add.lcssa = phi i64 [ %add, %while.body ]\l  br label %while.end\l}"];
	Node0x60a6e50 -> Node0x60ce290;
	Node0x60ce290 [shape=record,label="{while.end:                                        \l  %value.0.lcssa = phi i64 [ %add.lcssa, %while.cond.while.end_crit_edge ], [\l... %value.02.lcssa, %land.rhs.while.end_crit_edge ], [ 0, %entry.split ]\l  ret i64 %value.0.lcssa\l}"];
	Node0x6099940 [shape=record,label="{land.rhs.while.end_crit_edge:                     \l  %value.02.lcssa = phi i64 [ %value.02, %land.rhs ]\l  br label %while.end\l}"];
	Node0x6099940 -> Node0x60ce290;
	colorscheme = "paired12"
        subgraph cluster_0x60d2450 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x60eb9f0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: land.rhs";
            style = solid;
            color = 6
            subgraph cluster_0x60eb970 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: land.rhs";
              style = solid;
              color = 5
              Node0x60b9540;
              Node0x60c3620;
              Node0x60a6e50;
              Node0x6099940;
            }
            Node0x60b6fd0;
            Node0x60ce930;
          }
          Node0x60bab20;
          Node0x60ce290;
        }
}
