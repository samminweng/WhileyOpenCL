digraph "Scop Graph for 'printf1DArray' function" {
	label="Scop Graph for 'printf1DArray' function";

	Node0x60ab250 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x60ab250 -> Node0x60c0980;
	Node0x60c0980 [shape=record,label="{entry.split:                                      \l  %putchar = tail call i32 @putchar(i32 91) #6\l  %cmp2 = icmp sgt i64 %input_size, 0\l  br i1 %cmp2, label %for.body.lr.ph, label %for.end\l}"];
	Node0x60c0980 -> Node0x60c3b00;
	Node0x60c0980 -> Node0x60bb200;
	Node0x60c3b00 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x60c3b00 -> Node0x60ba8a0;
	Node0x60ba8a0 [shape=record,label="{for.body:                                         \l  %isFirst.05 = phi i32 [ 1, %for.body.lr.ph ], [ %isFirst.1, %for.inc ]\l  %i.04 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]\l  %tobool = icmp eq i32 %isFirst.05, 0\l  %arrayidx4 = getelementptr inbounds i64, i64* %input, i64 %i.04\l  %0 = load i64, i64* %arrayidx4, align 8\l  br i1 %tobool, label %if.else, label %if.then\l}"];
	Node0x60ba8a0 -> Node0x6110ca0;
	Node0x60ba8a0 -> Node0x609e540;
	Node0x6110ca0 [shape=record,label="{if.else:                                          \l  %call5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x\l... i8], [6 x i8]* @.str.13, i64 0, i64 0), i64 %0) #6\l  br label %for.inc\l}"];
	Node0x6110ca0 -> Node0x60c0cf0;
	Node0x60c0cf0 [shape=record,label="{for.inc:                                          \l  %isFirst.1 = phi i32 [ 0, %if.then ], [ %isFirst.05, %if.else ]\l  %inc = add nuw nsw i64 %i.04, 1\l  %cmp = icmp slt i64 %inc, %input_size\l  %cmp1 = icmp slt i64 %inc, 10\l  %cmp1. = and i1 %cmp, %cmp1\l  br i1 %cmp1., label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x60c0cf0 -> Node0x60ba8a0[constraint=false];
	Node0x60c0cf0 -> Node0x60c4c10;
	Node0x60c4c10 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  %inc.lcssa = phi i64 [ %inc, %for.inc ]\l  br label %for.end\l}"];
	Node0x60c4c10 -> Node0x60bb200;
	Node0x60bb200 [shape=record,label="{for.end:                                          \l  %i.0.lcssa = phi i64 [ %inc.lcssa, %for.cond.for.end_crit_edge ], [ 0,\l... %entry.split ]\l  %cmp6 = icmp slt i64 %i.0.lcssa, %input_size\l  br i1 %cmp6, label %if.then8, label %if.end11\l}"];
	Node0x60bb200 -> Node0x60c3140;
	Node0x60bb200 -> Node0x60c7020;
	Node0x60c3140 [shape=record,label="{if.then8:                                         \l  %sub = add nsw i64 %input_size, -1\l  %arrayidx9 = getelementptr inbounds i64, i64* %input, i64 %sub\l  %1 = load i64, i64* %arrayidx9, align 8\l  %call10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x\l... i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 %1) #6\l  br label %if.end11\l}"];
	Node0x60c3140 -> Node0x60c7020;
	Node0x60c7020 [shape=record,label="{if.end11:                                         \l  %putchar1 = tail call i32 @putchar(i32 93) #6\l  ret void\l}"];
	Node0x609e540 [shape=record,label="{if.then:                                          \l  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x\l... i8], [5 x i8]* @.str.12, i64 0, i64 0), i64 %0) #6\l  br label %for.inc\l}"];
	Node0x609e540 -> Node0x60c0cf0;
	colorscheme = "paired12"
        subgraph cluster_0x60d2450 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x60ee070 {
            label = "Call instruction:   %putchar = tail call i32 @putchar(i32 91) #6";
            style = solid;
            color = 6
            subgraph cluster_0x60edf70 {
              label = "Call instruction:   %call5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i64 %0) #6";
              style = solid;
              color = 5
              subgraph cluster_0x60eb8c0 {
                label = "Region can not profitably be optimized!";
                style = solid;
                color = 7
                Node0x60ba8a0;
                Node0x6110ca0;
                Node0x609e540;
              }
              Node0x60c0cf0;
            }
            Node0x60c0980;
            Node0x60c3b00;
            Node0x60c4c10;
          }
          subgraph cluster_0x60edff0 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            Node0x60bb200;
            Node0x60c3140;
          }
          Node0x60ab250;
          Node0x60c7020;
        }
}
