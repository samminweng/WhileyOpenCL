digraph "Scop Graph for 'copy2DArray' function" {
	label="Scop Graph for 'copy2DArray' function";

	Node0x9d492a0 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x9d492a0 -> Node0x9dcb1c0;
	Node0x9dcb1c0 [shape=record,label="{entry.split:                                      \l  %mul = shl i64 %x, 3\l  %call = tail call noalias i8* @malloc(i64 %mul) #5\l  %0 = bitcast i8* %call to i64**\l  %cmp = icmp eq i8* %call, null\l  br i1 %cmp, label %if.then, label %if.end\l}"];
	Node0x9dcb1c0 -> Node0x9dbb4e0;
	Node0x9dcb1c0 -> Node0x9c2c4d0;
	Node0x9dbb4e0 [shape=record,label="{if.then:                                          \l  %puts26 = tail call i32 @puts(i8* getelementptr inbounds ([60 x i8], [60 x\l... i8]* @str.36, i64 0, i64 0))\l  tail call void @exit(i32 -2) #6\l  unreachable\l}"];
	Node0x9c2c4d0 [shape=record,label="{if.end:                                           \l  %mul2 = shl i64 %y, 3\l  %cmp327 = icmp sgt i64 %x, 0\l  br i1 %cmp327, label %for.body.lr.ph, label %for.end\l}"];
	Node0x9c2c4d0 -> Node0x9e26b30;
	Node0x9c2c4d0 -> Node0x9d74ac0;
	Node0x9e26b30 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x9e26b30 -> Node0x9d63350;
	Node0x9d63350 [shape=record,label="{for.body:                                         \l  %i.028 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %if.end9 ]\l  %call4 = tail call noalias i8* @malloc(i64 %mul2) #5\l  %arrayidx = getelementptr inbounds i64*, i64** %0, i64 %i.028\l  %1 = bitcast i64** %arrayidx to i8**\l  store i8* %call4, i8** %1, align 8, !tbaa !1\l  %cmp6 = icmp eq i8* %call4, null\l  br i1 %cmp6, label %if.then7, label %if.end9\l}"];
	Node0x9d63350 -> Node0x9d54d80;
	Node0x9d63350 -> Node0x9d51aa0;
	Node0x9d54d80 [shape=record,label="{if.then7:                                         \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([63 x i8], [63 x\l... i8]* @str.35, i64 0, i64 0))\l  tail call void @exit(i32 -2) #6\l  unreachable\l}"];
	Node0x9d51aa0 [shape=record,label="{if.end9:                                          \l  %arrayidx11 = getelementptr inbounds i64*, i64** %arr, i64 %i.028\l  %2 = bitcast i64** %arrayidx11 to i8**\l  %3 = load i8*, i8** %2, align 8, !tbaa !1\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %call4, i8* %3, i64\l... %mul2, i32 8, i1 false)\l  %inc = add nuw nsw i64 %i.028, 1\l  %cmp3 = icmp slt i64 %inc, %x\l  br i1 %cmp3, label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x9d51aa0 -> Node0x9d63350;
	Node0x9d51aa0 -> Node0x9dca8b0;
	Node0x9dca8b0 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  br label %for.end\l}"];
	Node0x9dca8b0 -> Node0x9d74ac0;
	Node0x9d74ac0 [shape=record,label="{for.end:                                          \l  ret i64** %0\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x9d6c770 {
          label = "";
          style = solid;
          color = 1
          Node0x9d492a0;
          Node0x9dcb1c0;
          Node0x9dbb4e0;
          Node0x9c2c4d0;
          Node0x9e26b30;
          Node0x9d63350;
          Node0x9d54d80;
          Node0x9d51aa0;
          Node0x9dca8b0;
          Node0x9d74ac0;
        }
}
