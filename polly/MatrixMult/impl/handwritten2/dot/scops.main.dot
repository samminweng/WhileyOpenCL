digraph "Scop Graph for 'main' function" {
	label="Scop Graph for 'main' function";

	Node0x4d66820 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x4d66820 -> Node0x4d64630;
	Node0x4d64630 [shape=record,label="{entry.split:                                      \l  %call = tail call i64* @init_array(i64 1)\l  %call1 = tail call i64* @init_array(i64 1)\l  %call2 = tail call i64* @init_array(i64 0)\l  br label %for.cond3.preheader\l}"];
	Node0x4d64630 -> Node0x4d6c900;
	Node0x4d6c900 [shape=record,label="{for.cond3.preheader:                              \l  %indvars.iv12 = phi i64 [ 0, %entry.split ], [ %indvars.iv.next13,\l... %for.inc22 ]\l  br label %for.cond6.preheader\l}"];
	Node0x4d6c900 -> Node0x4d6c930;
	Node0x4d6c930 [shape=record,label="{for.cond6.preheader:                              \l  %indvars.iv8 = phi i64 [ 0, %for.cond3.preheader ], [ %indvars.iv.next9,\l... %for.end ]\l  %0 = shl nsw i64 %indvars.iv12, 10\l  br label %for.inc\l}"];
	Node0x4d6c930 -> Node0x4d6c950;
	Node0x4d6c950 [shape=record,label="{for.inc:                                          \l  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next,\l... %for.inc ]\l  %tmp.02 = phi i64 [ 0, %for.cond6.preheader ], [ %add14, %for.inc ]\l  %1 = add nuw nsw i64 %indvars.iv, %0\l  %arrayidx = getelementptr inbounds i64, i64* %call, i64 %1\l  %2 = load i64, i64* %arrayidx, align 8\l  %3 = shl i64 %indvars.iv, 10\l  %4 = add nuw nsw i64 %3, %indvars.iv8\l  %arrayidx12 = getelementptr inbounds i64, i64* %call1, i64 %4\l  %5 = load i64, i64* %arrayidx12, align 8\l  %mul13 = mul nsw i64 %5, %2\l  %add14 = add nsw i64 %mul13, %tmp.02\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %exitcond = icmp ne i64 %indvars.iv.next, 1024\l  br i1 %exitcond, label %for.inc, label %for.end\l}"];
	Node0x4d6c950 -> Node0x4d6c950[constraint=false];
	Node0x4d6c950 -> Node0x4d67b90;
	Node0x4d67b90 [shape=record,label="{for.end:                                          \l  %add14.lcssa = phi i64 [ %add14, %for.inc ]\l  %6 = add nuw nsw i64 %indvars.iv8, %0\l  %arrayidx18 = getelementptr inbounds i64, i64* %call2, i64 %6\l  store i64 %add14.lcssa, i64* %arrayidx18, align 8\l  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1\l  %exitcond11 = icmp ne i64 %indvars.iv.next9, 1024\l  br i1 %exitcond11, label %for.cond6.preheader, label %for.inc22\l}"];
	Node0x4d67b90 -> Node0x4d6c930[constraint=false];
	Node0x4d67b90 -> Node0x4d6c180;
	Node0x4d6c180 [shape=record,label="{for.inc22:                                        \l  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1\l  %exitcond15 = icmp ne i64 %indvars.iv.next13, 1024\l  br i1 %exitcond15, label %for.cond3.preheader, label %for.end24\l}"];
	Node0x4d6c180 -> Node0x4d6c900[constraint=false];
	Node0x4d6c180 -> Node0x4d64a30;
	Node0x4d64a30 [shape=record,label="{for.end24:                                        \l  %arrayidx25 = getelementptr inbounds i64, i64* %call2, i64 1048575\l  %7 = load i64, i64* %arrayidx25, align 8\l  %call26 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x\l... i8], [49 x i8]* @.str, i64 0, i64 0), i32 1024, i32 1024, i64 %7) #3\l  ret i32 0\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x4d43820 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x4d67a20 {
            label = "";
            style = filled;
            color = 3            subgraph cluster_0x4d679a0 {
              label = "";
              style = solid;
              color = 5
              subgraph cluster_0x4d67920 {
                label = "";
                style = solid;
                color = 7
                Node0x4d6c950;
              }
              Node0x4d6c930;
              Node0x4d67b90;
            }
            Node0x4d6c900;
            Node0x4d6c180;
          }
          Node0x4d66820;
          Node0x4d64630;
          Node0x4d64a30;
        }
}
