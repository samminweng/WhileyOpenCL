digraph "Scop Graph for 'init_array' function" {
	label="Scop Graph for 'init_array' function";

	Node0x4d68680 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x4d68680 -> Node0x4d686a0;
	Node0x4d686a0 [shape=record,label="{entry.split:                                      \l  %call = tail call noalias i8* @malloc(i64 8388608) #3\l  %0 = bitcast i8* %call to i64*\l  br label %for.cond1.preheader\l}"];
	Node0x4d686a0 -> Node0x4d68350;
	Node0x4d68350 [shape=record,label="{for.cond1.preheader:                              \l  %indvars.iv10 = phi i64 [ 0, %entry.split ], [ %indvars.iv.next11,\l... %for.inc20 ]\l  br label %for.body3\l}"];
	Node0x4d68350 -> Node0x4d68370;
	Node0x4d68370 [shape=record,label="{for.body3:                                        \l  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next,\l... %for.body3 ]\l  %1 = shl i64 %indvars.iv10, 10\l  %2 = add nuw nsw i64 %indvars.iv, %1\l  %arrayidx = getelementptr inbounds i64, i64* %0, i64 %2\l  store i64 %value, i64* %arrayidx, align 8\l  %3 = shl i64 %indvars.iv10, 10\l  %4 = add nuw nsw i64 %indvars.iv, %3\l  %5 = or i64 %4, 1\l  %arrayidx8 = getelementptr inbounds i64, i64* %0, i64 %5\l  store i64 %value, i64* %arrayidx8, align 8\l  %6 = shl i64 %indvars.iv10, 10\l  %7 = add nuw nsw i64 %indvars.iv, %6\l  %8 = or i64 %7, 2\l  %arrayidx13 = getelementptr inbounds i64, i64* %0, i64 %8\l  store i64 %value, i64* %arrayidx13, align 8\l  %9 = shl i64 %indvars.iv10, 10\l  %10 = add nuw nsw i64 %indvars.iv, %9\l  %11 = or i64 %10, 3\l  %arrayidx18 = getelementptr inbounds i64, i64* %0, i64 %11\l  store i64 %value, i64* %arrayidx18, align 8\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4\l  %cmp2 = icmp slt i64 %indvars.iv.next, 1024\l  br i1 %cmp2, label %for.body3, label %for.inc20\l}"];
	Node0x4d68370 -> Node0x4d68370[constraint=false];
	Node0x4d68370 -> Node0x4d68e50;
	Node0x4d68e50 [shape=record,label="{for.inc20:                                        \l  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1\l  %exitcond = icmp ne i64 %indvars.iv.next11, 1024\l  br i1 %exitcond, label %for.cond1.preheader, label %for.end21\l}"];
	Node0x4d68e50 -> Node0x4d68350[constraint=false];
	Node0x4d68e50 -> Node0x4d68e70;
	Node0x4d68e70 [shape=record,label="{for.end21:                                        \l  ret i64* %0\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x4d5b530 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x4d5b6b0 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            subgraph cluster_0x4d5b830 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x4d68370;
            }
            Node0x4d68350;
            Node0x4d68e50;
          }
          Node0x4d68680;
          Node0x4d686a0;
          Node0x4d68e70;
        }
}
