digraph "Scop Graph for 'main' function" {
	label="Scop Graph for 'main' function";

	Node0x4dc5480 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x4dc5480 -> Node0x4de9140;
	Node0x4de9140 [shape=record,label="{entry.split:                                      \l  tail call void @init()\l  br label %for.body\l}"];
	Node0x4de9140 -> Node0x4dea890;
	Node0x4dea890 [shape=record,label="{for.body:                                         \l  %indvars.iv8 = phi i64 [ 0, %entry.split ], [ %indvars.iv.next9, %for.end17 ]\l  %0 = trunc i64 %indvars.iv8 to i32\l  %call = tail call i32* @transpose(i32** bitcast ([2048 x [2048 x i32]]* @Y\l... to i32**), i32 %0)\l  br label %for.body3\l}"];
	Node0x4dea890 -> Node0x4deece0;
	Node0x4deece0 [shape=record,label="{for.body3:                                        \l  %indvars.iv5 = phi i64 [ 0, %for.body ], [ %indvars.iv.next6, %for.end ]\l  br label %for.inc\l}"];
	Node0x4deece0 -> Node0x4def6b0;
	Node0x4def6b0 [shape=record,label="{for.inc:                                          \l  %indvars.iv = phi i64 [ 0, %for.body3 ], [ %indvars.iv.next, %for.inc ]\l  %sum.02 = phi i32 [ 0, %for.body3 ], [ %add, %for.inc ]\l  %arrayidx8 = getelementptr inbounds [2048 x [2048 x i32]], [2048 x [2048 x\l... i32]]* @X, i64 0, i64 %indvars.iv5, i64 %indvars.iv\l  %1 = load i32, i32* %arrayidx8, align 4\l  %arrayidx10 = getelementptr inbounds i32, i32* %call, i64 %indvars.iv\l  %2 = load i32, i32* %arrayidx10, align 4\l  %mul = mul nsw i32 %2, %1\l  %add = add nsw i32 %mul, %sum.02\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %exitcond = icmp ne i64 %indvars.iv.next, 2048\l  br i1 %exitcond, label %for.inc, label %for.end\l}"];
	Node0x4def6b0 -> Node0x4def6b0[constraint=false];
	Node0x4def6b0 -> Node0x4def320;
	Node0x4def320 [shape=record,label="{for.end:                                          \l  %add.lcssa = phi i32 [ %add, %for.inc ]\l  %arrayidx14 = getelementptr inbounds [2048 x [2048 x i32]], [2048 x [2048 x\l... i32]]* @Z, i64 0, i64 %indvars.iv5, i64 %indvars.iv8\l  store i32 %add.lcssa, i32* %arrayidx14, align 4\l  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1\l  %exitcond7 = icmp ne i64 %indvars.iv.next6, 2048\l  br i1 %exitcond7, label %for.body3, label %for.end17\l}"];
	Node0x4def320 -> Node0x4deece0[constraint=false];
	Node0x4def320 -> Node0x4def160;
	Node0x4def160 [shape=record,label="{for.end17:                                        \l  %3 = bitcast i32* %call to i8*\l  tail call void @free(i8* %3) #3\l  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1\l  %exitcond10 = icmp ne i64 %indvars.iv.next9, 2048\l  br i1 %exitcond10, label %for.body, label %for.end20\l}"];
	Node0x4def160 -> Node0x4dea890[constraint=false];
	Node0x4def160 -> Node0x4deebe0;
	Node0x4deebe0 [shape=record,label="{for.end20:                                        \l  %4 = load i32, i32* getelementptr inbounds ([2048 x [2048 x i32]], [2048 x\l... [2048 x i32]]* @Z, i64 0, i64 2047, i64 2047), align 4\l  %call21 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x\l... i8], [46 x i8]* @.str.2, i64 0, i64 0), i32 2048, i32 2048, i32 2047, i32\l... 2047, i32 %4) #3\l  ret i32 0\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x4deba80 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x4deb160 {
            label = "Call instruction:   %call = tail call i32* @transpose(i32** bitcast ([2048 x [2048 x i32]]* @Y to i32**), i32 %0)";
            style = solid;
            color = 6
            subgraph cluster_0x4def340 {
              label = "";
              style = filled;
              color = 3              subgraph cluster_0x4deb0e0 {
                label = "";
                style = solid;
                color = 7
                Node0x4def6b0;
              }
              Node0x4deece0;
              Node0x4def320;
            }
            Node0x4dea890;
            Node0x4def160;
          }
          Node0x4dc5480;
          Node0x4de9140;
          Node0x4deebe0;
        }
}
