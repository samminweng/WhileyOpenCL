digraph "Scop Graph for 'optimized_append' function" {
	label="Scop Graph for 'optimized_append' function";

	Node0x9cfa500 [shape=record,label="{entry:\l  br label %entry.split, !dbg !40\l}"];
	Node0x9cfa500 -> Node0x9dc4820;
	Node0x9dc4820 [shape=record,label="{entry.split:                                      \l  tail call void @llvm.dbg.value(metadata i64* %op_1, i64 0, metadata !32,\l... metadata !41), !dbg !40\l  tail call void @llvm.dbg.value(metadata i64* %op_1_size, i64 0, metadata\l... !33, metadata !41), !dbg !42\l  tail call void @llvm.dbg.value(metadata i64* %op_2, i64 0, metadata !34,\l... metadata !41), !dbg !43\l  tail call void @llvm.dbg.value(metadata i64* %op_2_size, i64 0, metadata\l... !35, metadata !41), !dbg !44\l  tail call void @llvm.dbg.value(metadata i64* %ret_size, i64 0, metadata !36,\l... metadata !41), !dbg !45\l  tail call void @llvm.dbg.value(metadata i64* %op_1, i64 0, metadata !38,\l... metadata !41), !dbg !46\l  %0 = load i64, i64* %op_1_size, align 8, !dbg !47, !tbaa !49\l  %call = tail call i32 @isPowerof2(i64 %0), !dbg !53\l  %tobool = icmp eq i32 %call, 0, !dbg !53\l  br i1 %tobool, label %if.end6, label %while.cond.preheader, !dbg !54\l}"];
	Node0x9dc4820 -> Node0x9d0ba40;
	Node0x9dc4820 -> Node0x9caab50;
	Node0x9d0ba40 [shape=record,label="{if.end6:                                          \l  %ret.0 = phi i64* [ %4, %while.end ], [ %op_1, %entry.split ]\l  tail call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !37, metadata\l... !41), !dbg !75\l  %5 = load i64, i64* %op_2_size, align 8, !dbg !76, !tbaa !49\l  %cmp727 = icmp sgt i64 %5, 0, !dbg !80\l  br i1 %cmp727, label %for.body.lr.ph, label %for.end, !dbg !81\l}"];
	Node0x9d0ba40 -> Node0x9ccdd80;
	Node0x9d0ba40 -> Node0x9daa660;
	Node0x9ccdd80 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body, !dbg !81\l}"];
	Node0x9ccdd80 -> Node0x9d0de40;
	Node0x9d0de40 [shape=record,label="{for.body:                                         \l  %i.028 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds i64, i64* %op_2, i64 %i.028, !dbg !82\l  %6 = load i64, i64* %arrayidx, align 8, !dbg !82, !tbaa !49\l  %7 = load i64, i64* %op_1_size, align 8, !dbg !84, !tbaa !49\l  %add8 = add nsw i64 %7, %i.028, !dbg !85\l  %arrayidx9 = getelementptr inbounds i64, i64* %ret.0, i64 %add8, !dbg !86\l  store i64 %6, i64* %arrayidx9, align 8, !dbg !87, !tbaa !49\l  %inc = add nuw nsw i64 %i.028, 1, !dbg !88\l  tail call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !37,\l... metadata !41), !dbg !75\l  %8 = load i64, i64* %op_2_size, align 8, !dbg !76, !tbaa !49\l  %cmp7 = icmp slt i64 %inc, %8, !dbg !80\l  br i1 %cmp7, label %for.body, label %for.cond.for.end_crit_edge, !dbg !81\l}"];
	Node0x9d0de40 -> Node0x9d0de40[constraint=false];
	Node0x9d0de40 -> Node0x9cfbd80;
	Node0x9cfbd80 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  %.lcssa29 = phi i64 [ %8, %for.body ]\l  br label %for.end, !dbg !81\l}"];
	Node0x9cfbd80 -> Node0x9daa660;
	Node0x9daa660 [shape=record,label="{for.end:                                          \l  %.lcssa = phi i64 [ %.lcssa29, %for.cond.for.end_crit_edge ], [ %5, %if.end6\l... ]\l  %9 = load i64, i64* %op_1_size, align 8, !dbg !90, !tbaa !49\l  %add10 = add nsw i64 %9, %.lcssa, !dbg !91\l  store i64 %add10, i64* %ret_size, align 8, !dbg !92, !tbaa !49\l  ret i64* %ret.0, !dbg !93\l}"];
	Node0x9caab50 [shape=record,label="{while.cond.preheader:                             \l  br label %while.cond, !dbg !55\l}"];
	Node0x9caab50 -> Node0x9cdb6e0;
	Node0x9cdb6e0 [shape=record,label="{while.cond:                                       \l  %allocated_size.0 = phi i64 [ %mul, %while.cond ], [ 2,\l... %while.cond.preheader ]\l  %1 = load i64, i64* %op_1_size, align 8, !dbg !55, !tbaa !49\l  %2 = load i64, i64* %op_2_size, align 8, !dbg !58, !tbaa !49\l  %add = add nsw i64 %2, %1, !dbg !59\l  %cmp = icmp slt i64 %allocated_size.0, %add, !dbg !60\l  %mul = shl nsw i64 %allocated_size.0, 1, !dbg !61\l  tail call void @llvm.dbg.value(metadata i64 %mul, i64 0, metadata !39,\l... metadata !41), !dbg !63\l  br i1 %cmp, label %while.cond, label %while.end, !dbg !64\l}"];
	Node0x9cdb6e0 -> Node0x9cdb6e0[constraint=false];
	Node0x9cdb6e0 -> Node0x9d0e830;
	Node0x9d0e830 [shape=record,label="{while.end:                                        \l  %allocated_size.0.lcssa = phi i64 [ %allocated_size.0, %while.cond ]\l  %3 = bitcast i64* %op_1 to i8*, !dbg !65\l  %mul1 = shl i64 %allocated_size.0.lcssa, 3, !dbg !66\l  %call2 = tail call i8* @realloc(i8* %3, i64 %mul1) #6, !dbg !67\l  %4 = bitcast i8* %call2 to i64*, !dbg !68\l  tail call void @llvm.dbg.value(metadata i64* %4, i64 0, metadata !38,\l... metadata !41), !dbg !46\l  %cmp3 = icmp eq i8* %call2, null, !dbg !69\l  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !71\l}"];
	Node0x9d0e830 -> Node0x9cdbb70;
	Node0x9d0e830 -> Node0x9d0ba40;
	Node0x9cdbb70 [shape=record,label="{if.then4:                                         \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([54 x i8], [54 x\l... i8]* @str.31, i64 0, i64 0)), !dbg !72\l  tail call void @exit(i32 -2) #7, !dbg !74\l  unreachable, !dbg !74\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x9cf7480 {
          label = "Util.c:316-340
";
          style = solid;
          color = 1
          subgraph cluster_0x9cf3210 {
            label = "Util.c:317-337
Base address not invariant in current region:  %ret.0 = phi i64* [ %4, %while.end ], [ %op_1, %entry.split ]";
            style = solid;
            color = 6
            subgraph cluster_0x9cf7500 {
              label = "Util.c:317-337
Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x9d0de40;
            }
            Node0x9d0ba40;
            Node0x9ccdd80;
            Node0x9cfbd80;
          }
          subgraph cluster_0x9cfca00 {
            label = "Util.c:319-327
Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.cond";
            style = solid;
            color = 6
            Node0x9cdb6e0;
          }
          Node0x9cfa500;
          Node0x9dc4820;
          Node0x9daa660;
          Node0x9caab50;
          Node0x9d0e830;
          Node0x9cdbb70;
        }
}
