digraph "Scop Graph for 'optimized_append' function" {
	label="Scop Graph for 'optimized_append' function";

	Node0xab9c040 [shape=record,label="{entry:\l  br label %entry.split, !dbg !40\l}"];
	Node0xab9c040 -> Node0xab91730;
	Node0xab91730 [shape=record,label="{entry.split:                                      \l  tail call void @llvm.dbg.value(metadata i64* %op_1, i64 0, metadata !32,\l... metadata !41), !dbg !40\l  tail call void @llvm.dbg.value(metadata i64* %op_1_size, i64 0, metadata\l... !33, metadata !41), !dbg !42\l  tail call void @llvm.dbg.value(metadata i64* %op_2, i64 0, metadata !34,\l... metadata !41), !dbg !43\l  tail call void @llvm.dbg.value(metadata i64* %op_2_size, i64 0, metadata\l... !35, metadata !41), !dbg !44\l  tail call void @llvm.dbg.value(metadata i64* %ret_size, i64 0, metadata !36,\l... metadata !41), !dbg !45\l  tail call void @llvm.dbg.value(metadata i64* %op_1, i64 0, metadata !38,\l... metadata !41), !dbg !46\l  %0 = load i64, i64* %op_1_size, align 8, !dbg !47, !tbaa !49\l  %call = tail call i32 @isPowerof2(i64 %0), !dbg !53\l  %tobool = icmp eq i32 %call, 0, !dbg !53\l  br i1 %tobool, label %if.end6, label %while.cond.preheader, !dbg !54\l}"];
	Node0xab91730 -> Node0xab69680;
	Node0xab91730 -> Node0xab5da60;
	Node0xab69680 [shape=record,label="{if.end6:                                          \l  %ret.0 = phi i64* [ %4, %while.end ], [ %op_1, %entry.split ]\l  tail call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !37, metadata\l... !41), !dbg !77\l  %5 = load i64, i64* %op_2_size, align 8, !dbg !78, !tbaa !49\l  %cmp727 = icmp sgt i64 %5, 0, !dbg !82\l  br i1 %cmp727, label %for.body.lr.ph, label %for.end, !dbg !83\l}"];
	Node0xab69680 -> Node0xab72420;
	Node0xab69680 -> Node0xab69200;
	Node0xab72420 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body, !dbg !83\l}"];
	Node0xab72420 -> Node0xab5a040;
	Node0xab5a040 [shape=record,label="{for.body:                                         \l  %i.028 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds i64, i64* %op_2, i64 %i.028, !dbg !84\l  %6 = load i64, i64* %arrayidx, align 8, !dbg !84, !tbaa !49\l  %7 = load i64, i64* %op_1_size, align 8, !dbg !86, !tbaa !49\l  %add8 = add nsw i64 %7, %i.028, !dbg !87\l  %arrayidx9 = getelementptr inbounds i64, i64* %ret.0, i64 %add8, !dbg !88\l  store i64 %6, i64* %arrayidx9, align 8, !dbg !89, !tbaa !49\l  %inc = add nuw nsw i64 %i.028, 1, !dbg !90\l  tail call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !37,\l... metadata !41), !dbg !77\l  %8 = load i64, i64* %op_2_size, align 8, !dbg !78, !tbaa !49\l  %cmp7 = icmp slt i64 %inc, %8, !dbg !82\l  br i1 %cmp7, label %for.body, label %for.cond.for.end_crit_edge, !dbg !83,\l... !llvm.loop !92\l}"];
	Node0xab5a040 -> Node0xab5a040[constraint=false];
	Node0xab5a040 -> Node0xab50ab0;
	Node0xab50ab0 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  %.lcssa29 = phi i64 [ %8, %for.body ]\l  br label %for.end, !dbg !83\l}"];
	Node0xab50ab0 -> Node0xab69200;
	Node0xab69200 [shape=record,label="{for.end:                                          \l  %.lcssa = phi i64 [ %.lcssa29, %for.cond.for.end_crit_edge ], [ %5, %if.end6\l... ]\l  %9 = load i64, i64* %op_1_size, align 8, !dbg !94, !tbaa !49\l  %add10 = add nsw i64 %9, %.lcssa, !dbg !95\l  store i64 %add10, i64* %ret_size, align 8, !dbg !96, !tbaa !49\l  ret i64* %ret.0, !dbg !97\l}"];
	Node0xab5da60 [shape=record,label="{while.cond.preheader:                             \l  br label %while.cond, !dbg !55\l}"];
	Node0xab5da60 -> Node0xab487d0;
	Node0xab487d0 [shape=record,label="{while.cond:                                       \l  %allocated_size.0 = phi i64 [ %mul, %while.cond ], [ 2,\l... %while.cond.preheader ]\l  %1 = load i64, i64* %op_1_size, align 8, !dbg !55, !tbaa !49\l  %2 = load i64, i64* %op_2_size, align 8, !dbg !58, !tbaa !49\l  %add = add nsw i64 %2, %1, !dbg !59\l  %cmp = icmp slt i64 %allocated_size.0, %add, !dbg !60\l  %mul = shl nsw i64 %allocated_size.0, 1, !dbg !61\l  tail call void @llvm.dbg.value(metadata i64 %mul, i64 0, metadata !39,\l... metadata !41), !dbg !63\l  br i1 %cmp, label %while.cond, label %while.end, !dbg !64, !llvm.loop !65\l}"];
	Node0xab487d0 -> Node0xab487d0[constraint=false];
	Node0xab487d0 -> Node0xab99610;
	Node0xab99610 [shape=record,label="{while.end:                                        \l  %allocated_size.0.lcssa = phi i64 [ %allocated_size.0, %while.cond ]\l  %3 = bitcast i64* %op_1 to i8*, !dbg !67\l  %mul1 = shl i64 %allocated_size.0.lcssa, 3, !dbg !68\l  %call2 = tail call i8* @realloc(i8* %3, i64 %mul1) #6, !dbg !69\l  %4 = bitcast i8* %call2 to i64*, !dbg !70\l  tail call void @llvm.dbg.value(metadata i64* %4, i64 0, metadata !38,\l... metadata !41), !dbg !46\l  %cmp3 = icmp eq i8* %call2, null, !dbg !71\l  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !73\l}"];
	Node0xab99610 -> Node0xac1a590;
	Node0xab99610 -> Node0xab69680;
	Node0xac1a590 [shape=record,label="{if.then4:                                         \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([54 x i8], [54 x\l... i8]* @str.31, i64 0, i64 0)), !dbg !74\l  tail call void @exit(i32 -2) #7, !dbg !76\l  unreachable, !dbg !76\l}"];
	colorscheme = "paired12"
        subgraph cluster_0xab71090 {
          label = "Util.c:313-337
";
          style = solid;
          color = 1
          subgraph cluster_0xab67140 {
            label = "Util.c:314-334
Base address not invariant in current region:  %ret.0 = phi i64* [ %4, %while.end ], [ %op_1, %entry.split ]";
            style = solid;
            color = 6
            subgraph cluster_0xac2f1b0 {
              label = "Util.c:314-334
Region can not profitably be optimized!";
              style = solid;
              color = 5
              subgraph cluster_0xab71110 {
                label = "Util.c:314-334
";
                style = solid;
                color = 7
                Node0xab5a040;
              }
              Node0xab50ab0;
            }
            Node0xab69680;
            Node0xab72420;
          }
          subgraph cluster_0xab6cac0 {
            label = "Util.c:316-324
Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.cond";
            style = solid;
            color = 6
            Node0xab487d0;
          }
          Node0xab9c040;
          Node0xab91730;
          Node0xab69200;
          Node0xab5da60;
          Node0xab99610;
          Node0xac1a590;
        }
}
