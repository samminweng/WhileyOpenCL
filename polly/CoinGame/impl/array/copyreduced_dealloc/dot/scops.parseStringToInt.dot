digraph "Scop Graph for 'parseStringToInt' function" {
	label="Scop Graph for 'parseStringToInt' function";

	Node0xab45220 [shape=record,label="{entry:\l  br label %entry.split, !dbg !36\l}"];
	Node0xab45220 -> Node0xab69680;
	Node0xab69680 [shape=record,label="{entry.split:                                      \l  tail call void @llvm.dbg.value(metadata i64* %arr, i64 0, metadata !32,\l... metadata !37), !dbg !36\l  tail call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !33, metadata\l... !37), !dbg !38\l  tail call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !34, metadata\l... !37), !dbg !39\l  %0 = load i64, i64* %arr, align 8, !dbg !40, !tbaa !42\l  %1 = icmp ult i64 %0, 10, !dbg !46\l  br i1 %1, label %while.body.lr.ph, label %while.end, !dbg !46\l}"];
	Node0xab69680 -> Node0xab69200;
	Node0xab69680 -> Node0xab43f40;
	Node0xab69200 [shape=record,label="{while.body.lr.ph:                                 \l  br label %while.body, !dbg !46\l}"];
	Node0xab69200 -> Node0xab92e30;
	Node0xab92e30 [shape=record,label="{while.body:                                       \l  %2 = phi i64 [ %0, %while.body.lr.ph ], [ %3, %while.body ]\l  %i.018 = phi i64 [ 0, %while.body.lr.ph ], [ %inc, %while.body ]\l  %value.017 = phi i64 [ 0, %while.body.lr.ph ], [ %add, %while.body ]\l  %mul = mul nsw i64 %value.017, 10, !dbg !47\l  %add = add nsw i64 %2, %mul, !dbg !49\l  tail call void @llvm.dbg.value(metadata i64 %add, i64 0, metadata !34,\l... metadata !37), !dbg !39\l  %inc = add nuw nsw i64 %i.018, 1, !dbg !50\l  tail call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !33,\l... metadata !37), !dbg !38\l  %arrayidx = getelementptr inbounds i64, i64* %arr, i64 %inc, !dbg !40\l  %3 = load i64, i64* %arrayidx, align 8, !dbg !40, !tbaa !42\l  %4 = icmp ult i64 %3, 10, !dbg !46\l  br i1 %4, label %while.body, label %while.cond.while.end_crit_edge, !dbg\l... !46, !llvm.loop !51\l}"];
	Node0xab92e30 -> Node0xab92e30[constraint=false];
	Node0xab92e30 -> Node0xab846a0;
	Node0xab846a0 [shape=record,label="{while.cond.while.end_crit_edge:                   \l  %add.lcssa = phi i64 [ %add, %while.body ]\l  br label %while.end, !dbg !46\l}"];
	Node0xab846a0 -> Node0xab43f40;
	Node0xab43f40 [shape=record,label="{while.end:                                        \l  %value.0.lcssa = phi i64 [ %add.lcssa, %while.cond.while.end_crit_edge ], [\l... 0, %entry.split ]\l  %call = tail call noalias i8* @malloc(i64 8) #6, !dbg !53\l  %5 = bitcast i8* %call to i64*, !dbg !54\l  tail call void @llvm.dbg.value(metadata i64* %5, i64 0, metadata !35,\l... metadata !37), !dbg !55\l  store i64 %value.0.lcssa, i64* %5, align 8, !dbg !56, !tbaa !42\l  ret i64* %5, !dbg !57\l}"];
	colorscheme = "paired12"
        subgraph cluster_0xab387b0 {
          label = "Util.c:78-87
";
          style = solid;
          color = 1
          subgraph cluster_0xab3f260 {
            label = "Util.c:78-83
Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
            style = solid;
            color = 6
            subgraph cluster_0xab53260 {
              label = "Util.c:79-83
Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
              style = solid;
              color = 5
              Node0xab92e30;
            }
            Node0xab69680;
            Node0xab69200;
            Node0xab846a0;
          }
          Node0xab45220;
          Node0xab43f40;
        }
}
