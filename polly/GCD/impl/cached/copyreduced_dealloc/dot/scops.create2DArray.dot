digraph "Scop Graph for 'create2DArray' function" {
	label="Scop Graph for 'create2DArray' function";

	Node0xa1663d0 [shape=record,label="{entry:\l  br label %entry.split, !dbg !39\l}"];
	Node0xa1663d0 -> Node0xa1c2ff0;
	Node0xa1c2ff0 [shape=record,label="{entry.split:                                      \l  tail call void @llvm.dbg.value(metadata i64* %arr, i64 0, metadata !32,\l... metadata !40), !dbg !39\l  tail call void @llvm.dbg.value(metadata i64 %n, i64 0, metadata !33,\l... metadata !40), !dbg !41\l  tail call void @llvm.dbg.value(metadata i64 %m, i64 0, metadata !34,\l... metadata !40), !dbg !42\l  tail call void @llvm.dbg.value(metadata i64** null, i64 0, metadata !35,\l... metadata !40), !dbg !43\l  %mul = shl i64 %n, 3, !dbg !44\l  %call = tail call noalias i8* @malloc(i64 %mul) #6, !dbg !45\l  %0 = bitcast i8* %call to i64**, !dbg !46\l  tail call void @llvm.dbg.value(metadata i64** %0, i64 0, metadata !35,\l... metadata !40), !dbg !43\l  %cmp = icmp eq i8* %call, null, !dbg !47\l  br i1 %cmp, label %if.then, label %if.end, !dbg !49\l}"];
	Node0xa1c2ff0 -> Node0xa17c400;
	Node0xa1c2ff0 -> Node0xa178a70;
	Node0xa17c400 [shape=record,label="{if.then:                                          \l  %puts24 = tail call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x\l... i8]* @str.22, i64 0, i64 0)), !dbg !50\l  tail call void @exit(i32 -2) #7, !dbg !52\l  unreachable, !dbg !52\l}"];
	Node0xa178a70 [shape=record,label="{if.end:                                           \l  %mul2 = shl i64 %m, 3, !dbg !53\l  tail call void @llvm.dbg.value(metadata i64 %mul2, i64 0, metadata !36,\l... metadata !40), !dbg !54\l  tail call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !37, metadata\l... !40), !dbg !55\l  %cmp325 = icmp sgt i64 %n, 0, !dbg !56\l  br i1 %cmp325, label %for.body.lr.ph, label %for.cond.cleanup, !dbg !59\l}"];
	Node0xa178a70 -> Node0xa07fa00;
	Node0xa178a70 -> Node0xa1aed10;
	Node0xa07fa00 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body, !dbg !59\l}"];
	Node0xa07fa00 -> Node0xa1c5890;
	Node0xa1c5890 [shape=record,label="{for.body:                                         \l  %i.026 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %if.end9 ]\l  %call4 = tail call noalias i8* @malloc(i64 %mul2) #6, !dbg !61\l  %arrayidx = getelementptr inbounds i64*, i64** %0, i64 %i.026, !dbg !63\l  %1 = bitcast i64** %arrayidx to i8**, !dbg !64\l  store i8* %call4, i8** %1, align 8, !dbg !64, !tbaa !65\l  %cmp6 = icmp eq i8* %call4, null, !dbg !69\l  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !71\l}"];
	Node0xa1c5890 -> Node0xa1b9430;
	Node0xa1c5890 -> Node0xa180770;
	Node0xa1b9430 [shape=record,label="{if.then7:                                         \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x\l... i8]* @str.21, i64 0, i64 0)), !dbg !72\l  tail call void @exit(i32 -2) #7, !dbg !74\l  unreachable, !dbg !74\l}"];
	Node0xa180770 [shape=record,label="{if.end9:                                          \l  %2 = bitcast i64* %arr to i8*, !dbg !75\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %call4, i8* %2, i64\l... %mul2, i32 8, i1 false), !dbg !75\l  %inc = add nuw nsw i64 %i.026, 1, !dbg !76\l  tail call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !37,\l... metadata !40), !dbg !55\l  %cmp3 = icmp slt i64 %inc, %n, !dbg !56\l  br i1 %cmp3, label %for.body, label %for.cond.for.cond.cleanup_crit_edge,\l... !dbg !59, !llvm.loop !78\l}"];
	Node0xa180770 -> Node0xa1c5890;
	Node0xa180770 -> Node0xa18d5c0;
	Node0xa18d5c0 [shape=record,label="{for.cond.for.cond.cleanup_crit_edge:              \l  br label %for.cond.cleanup, !dbg !59\l}"];
	Node0xa18d5c0 -> Node0xa1aed10;
	Node0xa1aed10 [shape=record,label="{for.cond.cleanup:                                 \l  ret i64** %0, !dbg !60\l}"];
	colorscheme = "paired12"
        subgraph cluster_0xa176df0 {
          label = "Util.c:50-68
";
          style = solid;
          color = 1
          Node0xa1663d0;
          Node0xa1c2ff0;
          Node0xa17c400;
          Node0xa178a70;
          Node0xa07fa00;
          Node0xa1c5890;
          Node0xa1b9430;
          Node0xa180770;
          Node0xa18d5c0;
          Node0xa1aed10;
        }
}
