digraph "Scop Graph for 'reverse' function" {
	label="Scop Graph for 'reverse' function";

	Node0x4726930 [shape=record,label="{entry:\l  %_r_size = alloca i64, align 8\l  %_12_size = alloca i64, align 8\l  %_13_size = alloca i64, align 8\l  br label %entry.split\l}"];
	Node0x4726930 -> Node0x4775680;
	Node0x4775680 [shape=record,label="{entry.split:                                      \l  store i64 0, i64* %_r_size, align 8\l  store i64 0, i64* %_12_size, align 8\l  store i64 0, i64* %_13_size, align 8\l  store i64 0, i64* %_r_size, align 8\l  %cmp.2 = icmp sgt i64 %_ls_size, 0\l  br i1 %cmp.2, label %while.body.lr.ph, label %blklab0\l}"];
	Node0x4775680 -> Node0x47314f0;
	Node0x4775680 -> Node0x47298f0;
	Node0x47314f0 [shape=record,label="{while.body.lr.ph:                                 \l  br label %while.body\l}"];
	Node0x47314f0 -> Node0x47233e0;
	Node0x47233e0 [shape=record,label="{while.body:                                       \l  %_i.04 = phi i64 [ %_ls_size, %while.body.lr.ph ], [ %sub, %blklab1 ]\l  %_r.03 = phi i64* [ null, %while.body.lr.ph ], [ %call4, %blklab1 ]\l  %cmp1 = icmp sgt i64 %_i.04, %_ls_size\l  br i1 %cmp1, label %if.end, label %blklab1\l}"];
	Node0x47233e0 -> Node0x4734630;
	Node0x47233e0 -> Node0x47234d0;
	Node0x4734630 [shape=record,label="{if.end:                                           \l  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8\l  %1 = call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]*\l... @.str.13, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %0) #5\l  call void @exit(i32 0) #6\l  unreachable\l}"];
	Node0x47234d0 [shape=record,label="{blklab1:                                          \l  %sub = add nsw i64 %_i.04, -1\l  %arrayidx = getelementptr inbounds i64, i64* %_ls, i64 %sub\l  %2 = load i64, i64* %arrayidx, align 8\l  store i64 1, i64* %_12_size, align 8\l  %call2 = call noalias i8* @malloc(i64 8) #4\l  %3 = bitcast i8* %call2 to i64*\l  store i64 %2, i64* %3, align 8\l  %4 = load i64, i64* %_r_size, align 8\l  %5 = load i64, i64* %_12_size, align 8\l  %add = add nsw i64 %5, %4\l  store i64 %add, i64* %_13_size, align 8\l  %call4 = call i64* @append(i64* %_r.03, i64* %_r_size, i64* %3, i64*\l... %_12_size, i64* %_13_size)\l  call void @free(i8* %call2) #4\l  %6 = load i64, i64* %_13_size, align 8\l  store i64 %6, i64* %_r_size, align 8\l  %cmp = icmp sgt i64 %_i.04, 1\l  br i1 %cmp, label %while.body, label %while.cond.blklab0_crit_edge\l}"];
	Node0x47234d0 -> Node0x47233e0;
	Node0x47234d0 -> Node0x4725a20;
	Node0x4725a20 [shape=record,label="{while.cond.blklab0_crit_edge:                     \l  br label %blklab0\l}"];
	Node0x4725a20 -> Node0x47298f0;
	Node0x47298f0 [shape=record,label="{blklab0:                                          \l  %_r.0.lcssa = phi i64* [ %call4, %while.cond.blklab0_crit_edge ], [ null,\l... %entry.split ]\l  ret i64* %_r.0.lcssa\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x4775770 {
          label = "";
          style = solid;
          color = 1
          Node0x4726930;
          Node0x4775680;
          Node0x47314f0;
          Node0x47233e0;
          Node0x4734630;
          Node0x47234d0;
          Node0x4725a20;
          Node0x47298f0;
        }
}
