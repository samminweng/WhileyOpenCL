digraph "Scop Graph for 'indirect_printf_array' function" {
	label="Scop Graph for 'indirect_printf_array' function";

	Node0x4734630 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x4734630 -> Node0x47352e0;
	Node0x47352e0 [shape=record,label="{entry.split:                                      \l  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x\l... i8], [3 x i8]* @.str.6, i64 0, i64 0)) #4\l  %cmp.1 = icmp sgt i64 %input_size, 0\l  br i1 %cmp.1, label %for.body.lr.ph, label %for.end\l}"];
	Node0x47352e0 -> Node0x471d890;
	Node0x47352e0 -> Node0x4774fd0;
	Node0x471d890 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x471d890 -> Node0x4775610;
	Node0x4775610 [shape=record,label="{for.body:                                         \l  %isFirst.04 = phi i32 [ 1, %for.body.lr.ph ], [ %isFirst.1, %for.inc ]\l  %i.03 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]\l  %tobool = icmp eq i32 %isFirst.04, 0\l  %arrayidx4 = getelementptr inbounds i64, i64* %input, i64 %i.03\l  %0 = load i64, i64* %arrayidx4, align 8\l  br i1 %tobool, label %if.else, label %if.then\l}"];
	Node0x4775610 -> Node0x4775370;
	Node0x4775610 -> Node0x47754a0;
	Node0x4775370 [shape=record,label="{if.else:                                          \l  %call5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x\l... i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 %0) #4\l  br label %for.inc\l}"];
	Node0x4775370 -> Node0x47752e0;
	Node0x47752e0 [shape=record,label="{for.inc:                                          \l  %isFirst.1 = phi i32 [ 0, %if.then ], [ %isFirst.04, %if.else ]\l  %inc = add nsw i64 %i.03, 1\l  %cmp = icmp slt i64 %inc, %input_size\l  %cmp1 = icmp slt i64 %inc, 10\l  %cmp1. = and i1 %cmp, %cmp1\l  br i1 %cmp1., label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x47752e0 -> Node0x4775610[constraint=false];
	Node0x47752e0 -> Node0x47756b0;
	Node0x47756b0 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  br label %for.end\l}"];
	Node0x47756b0 -> Node0x4774fd0;
	Node0x4774fd0 [shape=record,label="{for.end:                                          \l  %i.0.lcssa = phi i64 [ %inc, %for.cond.for.end_crit_edge ], [ 0,\l... %entry.split ]\l  %cmp6 = icmp slt i64 %i.0.lcssa, %input_size\l  br i1 %cmp6, label %if.then.8, label %if.end.11\l}"];
	Node0x4774fd0 -> Node0x4775340;
	Node0x4774fd0 -> Node0x4775710;
	Node0x4775340 [shape=record,label="{if.then.8:                                        \l  %sub = add nsw i64 %input_size, -1\l  %arrayidx9 = getelementptr inbounds i64, i64* %input, i64 %sub\l  %1 = load i64, i64* %arrayidx9, align 8\l  %call10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x\l... i8], [10 x i8]* @.str.8, i64 0, i64 0), i64 %1) #4\l  br label %if.end.11\l}"];
	Node0x4775340 -> Node0x4775710;
	Node0x4775710 [shape=record,label="{if.end.11:                                        \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]*\l... @str, i64 0, i64 0))\l  ret void\l}"];
	Node0x47754a0 [shape=record,label="{if.then:                                          \l  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x\l... i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #4\l  br label %for.inc\l}"];
	Node0x47754a0 -> Node0x47752e0;
	colorscheme = "paired12"
        subgraph cluster_0x47381c0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x4775420 {
            label = "PHI node in exit BB";
            style = solid;
            color = 6
            subgraph cluster_0x4774f10 {
              label = "Condition in BB 'for.inc' neither constant nor an icmp instruction";
              style = solid;
              color = 5
              subgraph cluster_0x4774e90 {
                label = "Region can not profitably be optimized!";
                style = solid;
                color = 7
                Node0x4775610;
                Node0x4775370;
                Node0x47754a0;
              }
              Node0x47752e0;
            }
            Node0x47352e0;
            Node0x471d890;
            Node0x47756b0;
          }
          subgraph cluster_0x47753a0 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            Node0x4774fd0;
            Node0x4775340;
          }
          Node0x4734630;
          Node0x4775710;
        }
}
