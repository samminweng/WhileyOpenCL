digraph "Scop Graph for 'toString' function" {
	label="Scop Graph for 'toString' function";

	Node0x58ccc10 [shape=record,label="{entry:\l  %buffer = alloca [1024 x i8], align 16\l  br label %entry.split\l}"];
	Node0x58ccc10 -> Node0x58ca470;
	Node0x58ca470 [shape=record,label="{entry.split:                                      \l  %cmp = icmp eq i8** %res, null\l  br i1 %cmp, label %if.then, label %for.cond.preheader\l}"];
	Node0x58ca470 -> Node0x58d0850;
	Node0x58ca470 -> Node0x58c8c40;
	Node0x58d0850 [shape=record,label="{if.then:                                          \l  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8\l  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([77 x i8], [77 x i8]*\l... @.str, i64 0, i64 0), i64 76, i64 1, %struct._IO_FILE* %0) #5\l  tail call void @exit(i32 0) #6\l  unreachable\l}"];
	Node0x58c8c40 [shape=record,label="{for.cond.preheader:                               \l  %cmp1.2 = icmp sgt i64 %size, 0\l  br i1 %cmp1.2, label %for.body.lr.ph, label %for.end\l}"];
	Node0x58c8c40 -> Node0x58ca380;
	Node0x58c8c40 -> Node0x58c3890;
	Node0x58ca380 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0x58ca380 -> Node0x58b8130;
	Node0x58b8130 [shape=record,label="{for.body:                                         \l  %i.03 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %if.end.10 ]\l  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer, i64\l... 0, i64 0\l  %arrayidx = getelementptr inbounds i64, i64* %arr, i64 %i.03\l  %2 = load i64, i64* %arrayidx, align 8\l  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8*\l... getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %2) #4\l  %conv = sext i32 %call2 to i64\l  %add = add nsw i64 %conv, 1\l  %call3 = call noalias i8* @malloc(i64 %add) #4\l  %arrayidx4 = getelementptr inbounds i8*, i8** %res, i64 %i.03\l  store i8* %call3, i8** %arrayidx4, align 8\l  %cmp6 = icmp eq i8* %call3, null\l  br i1 %cmp6, label %if.then.8, label %if.end.10\l}"];
	Node0x58b8130 -> Node0x58c9c20;
	Node0x58b8130 -> Node0x58cf2e0;
	Node0x58c9c20 [shape=record,label="{if.then.8:                                        \l  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8\l  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE*\l... %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0),\l... i64 %i.03) #7\l  call void @exit(i32 0) #6\l  unreachable\l}"];
	Node0x58cf2e0 [shape=record,label="{if.end.10:                                        \l  %arrayidx11 = getelementptr inbounds i8*, i8** %res, i64 %i.03\l  %4 = load i8*, i8** %arrayidx11, align 8\l  %arraydecay12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buffer,\l... i64 0, i64 0\l  %call13 = call i8* @strcpy(i8* %4, i8* %arraydecay12) #4\l  %inc = add nsw i64 %i.03, 1\l  %cmp1 = icmp slt i64 %inc, %size\l  br i1 %cmp1, label %for.body, label %for.cond.for.end_crit_edge\l}"];
	Node0x58cf2e0 -> Node0x58b8130;
	Node0x58cf2e0 -> Node0x58bfe50;
	Node0x58bfe50 [shape=record,label="{for.cond.for.end_crit_edge:                       \l  br label %for.end\l}"];
	Node0x58bfe50 -> Node0x58c3890;
	Node0x58c3890 [shape=record,label="{for.end:                                          \l  ret void\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x58cd730 {
          label = "";
          style = solid;
          color = 1
          Node0x58ccc10;
          Node0x58ca470;
          Node0x58d0850;
          Node0x58c8c40;
          Node0x58ca380;
          Node0x58b8130;
          Node0x58c9c20;
          Node0x58cf2e0;
          Node0x58bfe50;
          Node0x58c3890;
        }
}
