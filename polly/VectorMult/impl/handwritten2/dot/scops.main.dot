digraph "Scop Graph for 'main' function" {
	label="Scop Graph for 'main' function";

	Node0x6aeeea0 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x6aeeea0 -> Node0x6affe80;
	Node0x6affe80 [shape=record,label="{entry.split:                                      \l  br label %for.cond1.preheader\l}"];
	Node0x6affe80 -> Node0x6aeefc0;
	Node0x6aeefc0 [shape=record,label="{for.cond1.preheader:                              \l  %r.05 = phi i64 [ 0, %entry.split ], [ %inc16, %for.end ]\l  br label %for.body3\l}"];
	Node0x6aeefc0 -> Node0x6b023c0;
	Node0x6b023c0 [shape=record,label="{for.body3:                                        \l  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next,\l... %for.body3 ]\l  %tmp.04 = phi i32 [ 0, %for.cond1.preheader ], [ %add, %for.body3 ]\l  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* @u, i64 0,\l... i64 %indvars.iv\l  store i32 1, i32* %arrayidx, align 4\l  %arrayidx5 = getelementptr inbounds [1024 x i32], [1024 x i32]* @v, i64 0,\l... i64 %indvars.iv\l  store i32 1, i32* %arrayidx5, align 4\l  %arrayidx7 = getelementptr inbounds [1024 x i32], [1024 x i32]* @u, i64 0,\l... i64 %indvars.iv\l  %0 = load i32, i32* %arrayidx7, align 4\l  %arrayidx9 = getelementptr inbounds [1024 x i32], [1024 x i32]* @v, i64 0,\l... i64 %indvars.iv\l  %1 = load i32, i32* %arrayidx9, align 4\l  %mul = mul nsw i32 %1, %0\l  %arrayidx11 = getelementptr inbounds [1024 x i32], [1024 x i32]* @p, i64 0,\l... i64 %indvars.iv\l  store i32 %mul, i32* %arrayidx11, align 4\l  %arrayidx13 = getelementptr inbounds [1024 x i32], [1024 x i32]* @p, i64 0,\l... i64 %indvars.iv\l  %2 = load i32, i32* %arrayidx13, align 4\l  %add = add nsw i32 %2, %tmp.04\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %exitcond6 = icmp ne i64 %indvars.iv.next, 1024\l  br i1 %exitcond6, label %for.body3, label %for.end\l}"];
	Node0x6b023c0 -> Node0x6b023c0[constraint=false];
	Node0x6b023c0 -> Node0x6affdc0;
	Node0x6affdc0 [shape=record,label="{for.end:                                          \l  %add.lcssa = phi i32 [ %add, %for.body3 ]\l  %arrayidx14 = getelementptr inbounds [67108864 x i32], [67108864 x i32]*\l... @sum, i64 0, i64 %r.05\l  store i32 %add.lcssa, i32* %arrayidx14, align 4\l  %inc16 = add nuw nsw i64 %r.05, 1\l  %exitcond7 = icmp ne i64 %inc16, 67108864\l  br i1 %exitcond7, label %for.cond1.preheader, label %for.cond19.preheader\l}"];
	Node0x6affdc0 -> Node0x6aeefc0[constraint=false];
	Node0x6affdc0 -> Node0x6aff580;
	Node0x6aff580 [shape=record,label="{for.cond19.preheader:                             \l  br label %for.inc24\l}"];
	Node0x6aff580 -> Node0x6affd50;
	Node0x6affd50 [shape=record,label="{for.inc24:                                        \l  %total.02 = phi i64 [ 0, %for.cond19.preheader ], [ %add23, %for.inc24 ]\l  %r.11 = phi i64 [ 0, %for.cond19.preheader ], [ %inc25, %for.inc24 ]\l  %arrayidx22 = getelementptr inbounds [67108864 x i32], [67108864 x i32]*\l... @sum, i64 0, i64 %r.11\l  %3 = load i32, i32* %arrayidx22, align 4\l  %conv = sext i32 %3 to i64\l  %add23 = add nsw i64 %conv, %total.02\l  %inc25 = add nuw nsw i64 %r.11, 1\l  %exitcond = icmp ne i64 %inc25, 67108864\l  br i1 %exitcond, label %for.inc24, label %for.end26\l}"];
	Node0x6affd50 -> Node0x6affd50[constraint=false];
	Node0x6affd50 -> Node0x6aff5f0;
	Node0x6aff5f0 [shape=record,label="{for.end26:                                        \l  %add23.lcssa = phi i64 [ %add23, %for.inc24 ]\l  %cmp27 = icmp eq i64 %add23.lcssa, 68719476736\l  br i1 %cmp27, label %if.end, label %if.then\l}"];
	Node0x6aff5f0 -> Node0x6affcb0;
	Node0x6aff5f0 -> Node0x6affda0;
	Node0x6affcb0 [shape=record,label="{if.end:                                           \l  %call29 = tail call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x\l... i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4\l  %call30 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([100\l... x i8], [100 x i8]* @.str.2, i64 0, i64 0), i64 68719476736, i32 1024, i64\l... %add23.lcssa) #4\l  ret i32 0\l}"];
	Node0x6affda0 [shape=record,label="{if.then:                                          \l  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x\l... i8], [34 x i8]* @.str, i64 0, i64 0)) #4\l  tail call void @exit(i32 -2) #5\l  unreachable\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x6aeee20 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x6b01110 {
            label = "";
            style = filled;
            color = 3            subgraph cluster_0x6af0200 {
              label = "";
              style = solid;
              color = 5
              subgraph cluster_0x6af0180 {
                label = "";
                style = solid;
                color = 7
                Node0x6b023c0;
              }
              Node0x6aeefc0;
              Node0x6affdc0;
            }
            subgraph cluster_0x6aeef40 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x6affd50;
            }
            Node0x6aff580;
          }
          Node0x6aeeea0;
          Node0x6affe80;
          Node0x6aff5f0;
          Node0x6affcb0;
          Node0x6affda0;
        }
}
