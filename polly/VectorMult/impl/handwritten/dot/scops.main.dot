digraph "Scop Graph for 'main' function" {
	label="Scop Graph for 'main' function";

	Node0x523b450 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0x523b450 -> Node0x524df10;
	Node0x524df10 [shape=record,label="{entry.split:                                      \l  br label %for.body\l}"];
	Node0x524df10 -> Node0x523b570;
	Node0x523b570 [shape=record,label="{for.body:                                         \l  %indvars.iv12 = phi i64 [ 0, %entry.split ], [ %indvars.iv.next13,\l... %for.inc24 ]\l  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @p, i64 0, i64\l... %indvars.iv12\l  store i32 0, i32* %arrayidx, align 4\l  br label %for.body3\l}"];
	Node0x523b570 -> Node0x5250170;
	Node0x5250170 [shape=record,label="{for.body3:                                        \l  %indvars.iv5 = phi i64 [ 0, %for.body ], [ %indvars.iv.next6, %for.body3 ]\l  %0 = trunc i64 %indvars.iv12 to i32\l  %mul = shl i32 %0, 16\l  %1 = sext i32 %mul to i64\l  %2 = add nuw nsw i64 %indvars.iv5, %1\l  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @u, i64 0, i64 %2\l  store i32 1, i32* %arrayidx5, align 4\l  %3 = trunc i64 %indvars.iv12 to i32\l  %mul6 = shl i32 %3, 16\l  %4 = sext i32 %mul6 to i64\l  %5 = add nuw nsw i64 %indvars.iv5, %4\l  %arrayidx9 = getelementptr inbounds [0 x i32], [0 x i32]* @v, i64 0, i64 %5\l  store i32 1, i32* %arrayidx9, align 4\l  %arrayidx11 = getelementptr inbounds [0 x i32], [0 x i32]* @p, i64 0, i64\l... %indvars.iv12\l  %6 = load i32, i32* %arrayidx11, align 4\l  %7 = trunc i64 %indvars.iv12 to i32\l  %mul12 = shl i32 %7, 16\l  %8 = sext i32 %mul12 to i64\l  %9 = add nuw nsw i64 %indvars.iv5, %8\l  %arrayidx15 = getelementptr inbounds [0 x i32], [0 x i32]* @u, i64 0, i64 %9\l  %10 = load i32, i32* %arrayidx15, align 4\l  %11 = trunc i64 %indvars.iv12 to i32\l  %mul16 = shl i32 %11, 16\l  %12 = sext i32 %mul16 to i64\l  %13 = add nuw nsw i64 %indvars.iv5, %12\l  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* @v, i64 0, i64 %13\l  %14 = load i32, i32* %arrayidx19, align 4\l  %mul20 = mul nsw i32 %14, %10\l  %add21 = add nsw i32 %mul20, %6\l  %arrayidx23 = getelementptr inbounds [0 x i32], [0 x i32]* @p, i64 0, i64\l... %indvars.iv12\l  store i32 %add21, i32* %arrayidx23, align 4\l  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1\l  %exitcond11 = icmp ne i64 %indvars.iv.next6, 65536\l  br i1 %exitcond11, label %for.body3, label %for.inc24\l}"];
	Node0x5250170 -> Node0x5250170[constraint=false];
	Node0x5250170 -> Node0x5249c50;
	Node0x5249c50 [shape=record,label="{for.inc24:                                        \l  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1\l  %exitcond14 = icmp ne i64 %indvars.iv.next13, 65536\l  br i1 %exitcond14, label %for.body, label %for.cond27.preheader\l}"];
	Node0x5249c50 -> Node0x523b570[constraint=false];
	Node0x5249c50 -> Node0x524dc10;
	Node0x524dc10 [shape=record,label="{for.cond27.preheader:                             \l  br label %for.inc33\l}"];
	Node0x524dc10 -> Node0x524d7b0;
	Node0x524d7b0 [shape=record,label="{for.inc33:                                        \l  %indvars.iv = phi i64 [ 0, %for.cond27.preheader ], [ %indvars.iv.next,\l... %for.inc33 ]\l  %sum.02 = phi i64 [ 0, %for.cond27.preheader ], [ %add32, %for.inc33 ]\l  %arrayidx31 = getelementptr inbounds [0 x i32], [0 x i32]* @p, i64 0, i64\l... %indvars.iv\l  %15 = load i32, i32* %arrayidx31, align 4\l  %conv = sext i32 %15 to i64\l  %add32 = add nsw i64 %conv, %sum.02\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %exitcond = icmp ne i64 %indvars.iv.next, 65536\l  br i1 %exitcond, label %for.inc33, label %for.end35\l}"];
	Node0x524d7b0 -> Node0x524d7b0[constraint=false];
	Node0x524d7b0 -> Node0x524def0;
	Node0x524def0 [shape=record,label="{for.end35:                                        \l  %add32.lcssa = phi i64 [ %add32, %for.inc33 ]\l  %cmp36 = icmp eq i64 %add32.lcssa, 4294967296\l  br i1 %cmp36, label %if.end, label %if.then\l}"];
	Node0x524def0 -> Node0x524d410;
	Node0x524def0 -> Node0x524f1f0;
	Node0x524d410 [shape=record,label="{if.end:                                           \l  %call38 = tail call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x\l... i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4\l  %call39 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x\l... i8], [76 x i8]* @.str.2, i64 0, i64 0), i32 65536, i32 65536, i64\l... %add32.lcssa) #4\l  ret i32 0\l}"];
	Node0x524f1f0 [shape=record,label="{if.then:                                          \l  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x\l... i8], [34 x i8]* @.str, i64 0, i64 0)) #4\l  tail call void @exit(i32 -2) #5\l  unreachable\l}"];
	colorscheme = "paired12"
        subgraph cluster_0x523b3d0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x524eeb0 {
            label = "";
            style = filled;
            color = 3            subgraph cluster_0x523c7b0 {
              label = "";
              style = solid;
              color = 5
              subgraph cluster_0x523c730 {
                label = "";
                style = solid;
                color = 7
                Node0x5250170;
              }
              Node0x523b570;
              Node0x5249c50;
            }
            subgraph cluster_0x523b4f0 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x524d7b0;
            }
            Node0x524dc10;
          }
          Node0x523b450;
          Node0x524df10;
          Node0x524def0;
          Node0x524d410;
          Node0x524f1f0;
        }
}
