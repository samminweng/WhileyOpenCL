// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package wycc.util;

import java.io.PrintStream;

/**
 * Provides a standard interface for logging messages generated by builders.
 * This includes syntax errors, warnings and miscellaneous debugging output.
 *
 * @author David J. Pearce
 */
public interface Logger {

	/**
	 * Log a message, along with a time. The time is used to indicate how long
	 * it took for the action being reported. This is used primarily to signal
	 * that a given stage has been completed in a certain amount of time.
	 *
	 * @param msg
	 * @param time --- total time taken for stage
     * @param time --- difference in available free memory
	 */
	public void logTimedMessage(String msg, long time, long memory);

	/**
	 * The NULL logger simply drops all logged messages. It's a simple, albeit
	 * not that helpful, default.
	 */
	public static final Logger NULL = new Logger() {
		public void logTimedMessage(String msg, long time, long memory) {
			// do nothing.
		}
	};

	/**
	 * A simple implementation of <code>Logger</code> which writes to a given
	 * <code>PrintStream</code>.
	 *
	 * @author David J. Pearce
	 *
	 */
	public static class Default implements Logger {
		private PrintStream logout;

		public Default(PrintStream out) {
			logout=out;
		}
		/**
		 * This method is just a helper to format the output
		 */
		public void logTimedMessage(String msg, long time, long memory) {
			logout.print(msg);
			logout.print(" ");
			double mem = memory;
			mem = mem / (1024*1024);
			memory = (long) mem;
			String stats = " [" + Long.toString(time) + "ms";
			if(memory > 0) {
				stats += "+" + Long.toString(memory) + "mb]";
			} else if(memory < 0) {
				stats += Long.toString(memory) + "mb]";
			} else {
				stats += "]";
			}
			for (int i = 0; i < (90 - msg.length() - stats.length()); ++i) {
				logout.print(".");
			}
			logout.println(stats);
		}

		public void logTotalTime(String msg, long time, long memory) {
			memory = memory / 1024;

			for (int i = 0; i <= 90; ++i) {
				logout.print("=");
			}

			logout.println();

			logout.print(msg);
			logout.print(" ");

			double mem = memory;
			mem = mem / (1024*1024);
			memory = (long) mem;
			String stats = " [" + Long.toString(time) + "ms";
			if(memory > 0) {
				stats += "+" + Long.toString(memory) + "mb]";
			} else if(memory < 0) {
				stats += Long.toString(memory) + "mb]";
			} else {
				stats += "]";
			}

			for (int i = 0; i < (90 - msg.length() - stats.length()); ++i) {
				logout.print(".");
			}

			logout.println(stats);
		}
	};
}
