// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include "Core.wyrl"

// ====================================================================
// Multplication
// ====================================================================

// A multiplication term consists of a constant, and zero or more
// variable multipliers.  For example, 2*x*y.
term Mul[real,{|AExpr...|}]

// Zero multiplied by anything gives zero (1); A term with no
// multipliers is just a number (2).
reduce Mul[real n, {|AExpr... rest|}]
name "Multiplication_1"
rank 0:
    => Num(n), if n == 0.0 || |rest| == 0

// Simplify terms containing constant multipliers.
reduce Mul[real x, {|Num(real y), AExpr... rest|}]
name "Multiplication_2"
rank 0:
    => Mul[x*y,rest]

// Flattern nested multiplication terms.
reduce Mul[real n1, {|Mul[real n2,{|AExpr... xs|}], AExpr... ys|}]
name "Multiplication_3"
rank 1:
    => Mul[n1*n2,(xs ++ ys)]

// Distribute multiplication through addition.
reduce Mul[real n1, {|Sum[real n2, {|AExpr... xs|}], AExpr... ys|}]
name "Multiplication_4"
rank 1:
    => let zs = {|Mul[n1,(x ++ ys)] | x in xs|},
           z = Mul[n1*n2,ys]
       in Sum[0.0,(z ++ zs)]

// ====================================================================
// Division
// ====================================================================

term Div[AExpr,AExpr]

reduce Div[Num(real x), Num(real y)]
name "Division_1"
rank 0:
    => Num(x/y)

reduce Div[AExpr x, Div[AExpr y, AExpr z]]
name "Division_2"
rank 0:
    => Div[Mul[1.0,{|x,z|}],y]

reduce Div[Div[AExpr x, AExpr y], AExpr z]
name "Division_3"
rank 0:
    => Div[x,Mul[1.0,{|y,z|}]]

reduce Div[AExpr x, Num(real n)]
name "Division_4"
rank 1:
    => x, if n == 1.0
    => Div[Mul[-1.0,{|x|}],Num(-n)], if n < 0.0

// Cancel terms [simplistic]
reduce Div[Mul[real n, {|AExpr x, AExpr... xs|}],AExpr y]
name "Division_5"
rank 1:
    => Mul[n, xs], if x == y
    => Mul[n / *y, xs], if y is Num

// Distribute division through sum
reduce Div[Sum[real n, {|AExpr... xs|}],AExpr y]
name "Division_6"
rank 1:
    => let ys = {| Div[x,y] | x in xs |}
       in Sum[0.0, (ys ++ Div[Num(n),y])]

// Distrubute division through mul
reduce Div[Mul[real n, {|AExpr... xs|}],AExpr y]
name "Division_7"
rank 1:
    => Mul[n,(xs ++ Div[Num(1.0),y])]

// ====================================================================
// Summation
// ====================================================================

// A summation consists of a constant, and zero or more
// multiplication components.  For example, 2+(1*x)+(1*y)
// and also 2+(x*y)+z.
term Sum[real,{|AExpr...|}]

// A summation with no components is just a number.
reduce Sum[real n, {||}]
name "Sum_1"
rank 0:
    => Num(n)

// A summation with a single variable expression is just that expression
reduce Sum[real n, {|Mul[real m, {|VExpr x|}]|}]
name "Sum_2"
rank 0:
    => x, if n == 0.0 && m == 1.0

// Normalise so that all variable summation components are multiplications.
reduce Sum[real n, {|AExpr x, AExpr... rest|}]
name "Sum_3"
rank 1:
    => Sum [n,Mul[1.0,{|x|}] ++ rest], if !(x is Num || x is Sum || x is Mul)

// Simplify summations with constant components.
reduce Sum[real x, {|Num(real y), AExpr... rest|}]
name "Sum_4"
rank 1:
    => Sum[x+y,rest]

// Simplify summations with related multication components.
// For example, (2*x*y)+(3*x*y)+(2*x) ==> (5*x*y) + (2*x)
reduce Sum[real n, {|Mul[real x, {|AExpr...|} xs], Mul[real y, {|AExpr...|} ys], AExpr... zs|}]
name "Sum_5"
rank 2:
    => Sum[n, Mul[x+y, xs] ++ zs], if xs == ys

// Flattern summations.
reduce Sum[real x, {|Sum[real y, {|AExpr... ys|}], AExpr... xs|}]
name "Sum_6"
rank 2:
    => Sum[x+y, xs ++ ys]

// ====================================================================
// Equations
// ====================================================================

// The "arithmetic types", which are used for equations and inequalities
define AType as IntT | RealT

// An equation should be viewed as equating a given expression with
// zero.
term Equation[AType,AExpr]

reduce Equation[AType,Num(real v)]
name "Equation_1"
rank 0:
    => False, if v != 0.0
    => True

// Normalise negative equations.  For example, 0 == -x becomes 0 == x.
reduce Equation[AType t,Sum[real n, {|Mul[real m, {|AExpr... xs|}]|}]]
name "Equation_1b":
    => Equation[t,Sum[n,{|Mul[-m,xs]|}]], if n == 0.0 && m < 0.0

// Normalise summations.  For example, 2x+2 becomes x+1, etc.
// This rule is REALLY expensive, because GCD is REALLY expensive.
reduce Equation[AType t,Sum[real n, {|Mul... xs|} ms]]
name "Equation_Gcd_1"
rank 2:
    => let gcd = gcd[n,ms],
           ys = {| Mul[(*x)[0] / gcd, (*x)[1]] | x in xs |}
       in Equation[t,Sum[n / gcd, ys]], if |xs| > 0 && gcd != 1.0

// For a given equation involving at least one linear term, substitute
// through all expressions the right-hand side of this equation with
// respect to a linear term.  For example, in 0 == x - y + 1 && x > y
// we choose to substitute through x (since this is lexiographically
// least) and rearrange the equation to give x = y - 1; then, we can
// substitute to get 0 == x - y + 1 && y - 1 > y which reduces to false.
//
// NOTE: is an inference rule to ensure all terms are reduced before
// this is called
infer And{
      Equation[AType t, Sum[real c, {|Mul[real vc, {|AExpr v|}], Mul... ms|} xs]] eq,
      BExpr... bs}
name "Equation_2"
rank 0:
     => let var = maxMultiplicand(xs),
           rhs = Sum[0.0,{|Div[Mul[-1.0,{|Sum[c,ms]|}],Num(vc)]|}],
           cs = { b[var \ rhs] | b in bs }
        in And (eq ++ cs), if v == var // if reduce, then && no { m in ms | v in (*m)[1] }

infer And{
        Equation[AType t, VExpr v] eq,
        BExpr... bs}
name "Equation_3"
rank 0:
     => let cs = { b[v \ Num(0.0)] | b in bs }
        in And (eq ++ cs)

// The following native function is necessary because it cannot
// easily be expressed within the rewrite language itself.  What it
// does is pick the "lexicographically greatest" variable expression from a
// set of multiplicands.  This is critical to ensuring that equation substitution
// rule above is stable (i.e. that it does not oscillate continually
// substituting for the other side).
function maxMultiplicand{|Mul...|} => VExpr

// 0 != e => 0 <= e-1 || 0 <= -e-1 (i.e. 1+e <= 0)
reduce Not(Equation[IntT t,AExpr e])
name "Equation_4"
rank 1:
    => let neg_em1 = Sum[-1.0,{|Mul[-1.0,{|e|}]|}],
           em1 = Sum[-1.0,{|e|}]
       in Or{Inequality[t,neg_em1],Inequality[t,em1]}

// 0 != e => 0 < e || 0 < -e (i.e. e < 0)
reduce Not(Equation[RealT t,AExpr e])
name "Equation_5"
rank 1:
    => let neg_e = Mul[-1.0,{|e|}]
       in Or{Inequality[t,neg_e],Inequality[t,e]}

reduce Equals[AType t,{|AExpr e1,AExpr e2|}]
name "Equation_6"
rank 1:
    => let neg_e1 = Mul[-1.0,{|e1|}]
       in Equation[t,Sum[0.0,{|neg_e1,e2|}]]

// ====================================================================
// Inqualities
// ====================================================================

// Integer inequalities are non-strict (i.e. of the form 0 <= e) to avoid
// an unnecessary disjunction.  That is, if we implement them as strict
// inequalities (i.e. of the form 0 < x), then 0 <= x becomes 0 < x || x == 0.
//
// Rational Inequalities are strict inequalities, unlike integer
// inequalities which are non-strict.  Again, this is to avoid an
// unnecessary (and complex in this case) disjunction.  That is, if real
// inequalities we non-strict then 0 < e would become 0 <= e && e != 0,
// which is actually hard to implement.
term Inequality[AType,AExpr]

// Handle comparison against constant values, which always reduce to
// either true or false.  Care must be taken int the case of a constant
// which equals zero, since integer inequalities are non-strict whilst
// real inequalities are strict.
reduce Inequality[AType t, Num(real v)]
name "Inequality_1"
rank 0:
    => False, if v < 0.0
    => False, if v == 0.0 && t == RealT
    => True

// Handle case of an negated integer inequality.  In such case, we can
// safely encode this as another integer inequality, although care must
// be taken as this only works for integer inequalities (which are
// non-strict).  As an example !(x <= 1) gives x >= 2.  In the general
// case, we have !(0 <= e) ==> 0 <= -e - 1 (i.e. e <= -1)
reduce Not(Inequality[IntT t, AExpr e])
name "Inequality_2"
rank 1:
    => let neg_e = Mul[-1.0,{|e|}]
       in Inequality[t, Sum[-1.0,{|neg_e|}]]

// Normalise summations.  For example, 2x+2 becomes x+1, etc.
// This rule is REALLY expensive, because GCD is REALLY expensive.
reduce Inequality[AType t,Sum[real n, {|Mul... xs|} ms]]
name "Inequality_Gcd_1"
rank 2:
    => let gcd = gcd[n,ms],
           ys = {| Mul[(*x)[0] / gcd, (*x)[1]] | x in xs |}
       in Inequality[t,Sum[n / gcd, ys]], if |xs| > 0 && gcd != 1.0

function gcd[real,{|Mul...|}] => real

// Handle case where we have x <= y <= x (for integer inequalities).
// In this case, we can infer that x == y.  Case must be taken as this
// only works for integer inequalities (which are non-strict).
reduce And{Inequality[IntT, Sum[real x1, {|Mul[real x2,{|AExpr vx1|}], Mul[real x3,{|AExpr vx2|}]|}] s1] ieq1,
           Inequality[IntT, Sum[real y1, {|Mul[real y2,{|AExpr vy1|}], Mul[real y3,{|AExpr vy2|}]|}] s2] ieq2, 
           BExpr... rest}
name "Inequality_2a"
rank 1:
    => And (Equation[IntT,s1] ++ rest), if x1 == -y1 && x2 == -y2 && x3 == -y3 && vx1 == vy1 && vx2 == vy2

// Handle closure over inequalities.  For example, if x <= y and y <=
// z then we want to infer that x <= z.  This must be an inference
// rule since it potentially increases the number of clauses (and, hence,
// would potentially cause infinite loops as a reduction).
//
// Here's how it works.  We start with
//
// 0 <= x1 + x2 * v1 + x2 * xs  (1)
// 0 <= y1 + y2 * v2 + y2 * ys  (2) [where v1 == v2]
//
// First, we rearrange (1) so all terms not involving the v1
// multiplication are on the right-hand side.  Likewise, we rearrnage (2)
// so all terms not involving v2 are on the left-hand size:
//
// -x2 * v1 <= x1 + x2 * xs
//  y2 * v2 >= -y1 - (y2 * xs)
//
// Then, we multiply the second by -x2 and the first by y2:
//
// -x2 * y2 * v1 <= y2 * (x1 + x2 * xs)
// -x2 * y2 * v2 >= -x2 * (-y1 - (y2 * xs))
//
// At this point, the left-hand side of both of the above inequalities
// identical, and we can safely apply transitivity.  Since we've multipled
// through by -x2 and y2 we need to check that x2 < 0.0 and y2 > 0.0,
// otherwise we would need to reverse the signs and the inference wouldn't succeed.
//
infer And{Inequality[AType t1, Sum[real x1, {|Mul[real x2, {|AExpr v1|}], Mul... xs|} xxs] s1] eq1,
          Inequality[AType t2, Sum[real y1, {|Mul[real y2, {|AExpr v2|}], Mul... ys|} yys] s2] eq2,
          BExpr... rest}
name "Inequality_3"
rank 1:
     // neg-pos
     => let vx = maxMultiplicand(xxs),
            vy = maxMultiplicand(yys),
            s3 = Mul[y2,{|Sum[x1,xs]|}],
            s4 = Mul[-x2,{|Sum[y1,ys]|}],
            eq3 = Inequality[t1,Sum[0.0,{|s3,s4|}]]
        in And ({eq1,eq2,eq3} ++ rest), if v1 == v2 && t1 == t2 && x2 < 0.0 && y2 > 0.0 && vx == v1 && vy == v1
     // pos-neg not required as symmetric

infer And{Inequality[AType t1, Sum[real x1, {|Mul[real x2, {|AExpr v1|}], Mul... xs|} xxs] s1] eq1,
          Inequality[AType t2, VExpr v2] eq2,
          BExpr... rest}
name "Inequality_4"
rank 1:
     // neg-pos
     => let vx = maxMultiplicand(xxs),
            eq3 = Inequality[t1,Sum[x1,xs]]
        in And ({eq1,eq2,eq3} ++ rest), if v1 == v2 && t1 == t2 && x2 < 0.0  && vx == v1
     // pos-neg not required as symmetric


// ====================================================================
// Arithmetic Expressions
// ====================================================================

define BExpr as Inequality | Equation | ...

define AExpr as Num | Sum | Mul | Div | VExpr

define Expr as AExpr | ...
