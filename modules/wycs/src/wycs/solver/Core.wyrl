// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include "Types.wyrl"

// ====================================================================
// Bool
// ====================================================================

term True
term False
define Bool as True | False

// ====================================================================
// Numbers
// ====================================================================

term Num(real)

// ====================================================================
// Variables
// ====================================================================

// A variable is an expression identified solely by a string whose
// value is currently unknown.
term Var(string)

// ====================================================================
// Tuples
// ====================================================================

// A tuple represents a sequence of zero or more expressions.  In
// otherwords, it's a compound expression built up from other
// expressions.  For example, the pair (1,2) is a tuple consisting of two
// expressions, namely 1 and 2.
term Tuple[Expr...]

// A tuple load operation selects the expression at a given (fixed)
// index within a tuple.
term Load[Expr,int]

// Select the expression at the given index within a tuple.  This
// requires that the index is within the bounds of the tuple.
reduce Load[Tuple[Expr... ls], int idx]:
    => ls[idx], if idx >= 0 && idx < |ls|

// Denotes the length of a tuple expression (and other kinds as well)
term LengthOf(Expr)

reduce LengthOf(Tuple[Expr... xs]):
    => Num((real) |xs|)

// Two tuples of different sizes are never equal (1); two tuples of
// the same size are equal iff their subexpressions at matching indices 
// are equal.
reduce Equals[TupleT[Type... ts],{|Tuple[Expr... xs],Tuple[Expr... ys]|}]:
    => False, if |xs| != |ys|
    => let eqs = { Equals[ts[i],{|xs[i],ys[i]|}] | i in 0..|xs| }
       in And(eqs)

reduce And{Equals[Type t, {|VExpr x, Tuple y|}] eq, BExpr... bs}:
    => let cs = { b[x\y] | b in bs }
       in And (eq ++ cs)

// ====================================================================
// Uninterpreted Functions
// ====================================================================

// An uninterpreted function is an expression representing an external
// function call.  The only interpretation provided is that these are
// mathematical functions which always return the same result given
// the same input.  For example, suppose an uninterpreted function f
// which takes two arguments.  Then, f(x1,y1) == f(x2,y2) if x1 == x2
// and y1 == y2.
term Fn[string,Expr...]

// ====================================================================
// Strings
// ====================================================================

term String(string)

// ====================================================================
// Logical Not
// ====================================================================

term Not(BExpr)

// Invert a boolean value.
reduce Not(Bool b):
    => False, if b == True
    => True

// Inverting an inverted expression yields the original expression.
reduce Not(Not(* x)):
    => x

// Apply De Morgan's law for inverting conjuncts.
reduce Not(And{BExpr... xs}):
    => let ys = { Not(x) | x in xs }
       in Or(ys)

// Apply De Morgan's law for inverting disjuncts.
reduce Not(Or{BExpr... xs}):
    => let ys = { Not(x) | x in xs }
       in And(ys)

// ====================================================================
// Logical And
// ====================================================================

// A conjunct is the logical "And" of a a set of zero or more boolean
// expressions.  
term And{BExpr...}

// A conjunct with one term gives that term
reduce And{BExpr x}:
    => x

// Eliminate conjuncts which are false.  Note that this is the most
// *important rule* for overall performance!
reduce And{False, BExpr... xs}:
    => False

// Reduce conjuncts containing known truths.
reduce And{True, BExpr... xs}:
    => And(xs)

// Flattern nested conjuncts
reduce And{And{BExpr... xs}, BExpr... ys}:
    => And (xs ++ ys)

// A conjunct containing an expression and its inversion is
// unsatisfiable.
reduce And{Not(BExpr x), BExpr y, BExpr... ys}:
    => False, if x == y

// Distribute conjuncts over disjuncts.  Note that this rule doesn't
// (strictly speaking) need to be an inference rule.  However, it can
// be quite expensive and making it an inference rule can help.
infer And{Or{BExpr... xs}, BExpr... ys}:
    => let ys = { And(x ++ ys) | x in xs }
       in Or(ys)

// ====================================================================
// Logical Or
// ====================================================================

// A disjunct is the logical "Or" of a a set of zero or more boolean
// expressions.  
term Or{BExpr...}

reduce Or{BExpr x}:
    => x

reduce Or{True, BExpr... xs}:
    => True

reduce Or{False, BExpr... xs}:
    => Or (xs)

reduce Or{Not(BExpr x), BExpr y, BExpr... ys}:
    => True, if x == y

reduce Or{Or{BExpr... xs}, BExpr... ys}:
    => Or (xs ++ ys)

// ====================================================================
// Equality
// ====================================================================

// An equality between two expressions of a given type.  The type is
// important in some cases (e.g. for distinguishing integer versus real
// equalities).
term Equals[Type,{|Expr,Expr|}]

// An expression is always equal to itself (1); any two distinct
// values are never equal (2).  Notice that we cannot conclude False
// when we have general expressions that aren't equal, because these may 
// eventually reduce to the same value (or not).
reduce Equals[Type t, {|Expr x, Expr y|}]:
    => True, if x == y
    => False, if x != y && x is Value && y is Value

// Substitute any variable which is known to equal a value through
// for that value in all expressions.
reduce And{Equals[Type t, {|VExpr x, Value y|}] eq, BExpr... bs}:
    => let cs = { b[x\y] | b in bs }
       in And (eq ++ cs)

// When two variables are equal, substitute one for the other in all
// expressions.  We need to carefully choose a unique representative 
// from the two variables in order to prevent a loop where we substitute 
// for one variable, and then repeat this for the other, and so on.
// 
// NOTE: this must be an inference rule in order to force the two
// variable expressions to be in a canonical form and, hence, directly
// comparable.
infer And{Equals[Type t, {|VExpr,VExpr|} vs] eq, BExpr... bs}:
    => let x = max(vs), // must be greatest
           y = min(vs), // must be least
           cs = { b[x\y] | b in bs }
       in And (eq ++ cs), if x != y

// The following native function is necessary because it cannot
// currently be expressed within the rewrite language itself.  What it
// does is pick the "lexicographically least" variable expression from a
// set of them.  This is critical to ensuring that equality reduction
// rules above are stable (i.e. that they do not oscillate continually
// substituting for the other side).
function min{|VExpr...|} => VExpr

// The following is the exact opposite of the above --- i.e. it
// selects the "lexiographically greatest" element.
function max{|VExpr...|} => VExpr

// ====================================================================
// Expressions & Values
// ====================================================================

// A value is a concrete term which cannot be further reduced.  The 
// base values are boolean true or false, and a tuple of values.  Other 
// values include integers, rationals and sets of values.
define Value as Bool | Num | String | Tuple[Value...] | ... 

// Variable Expressions are those which represent variables or
// sub-components thereof.  Such expressions can in principle 
// return a value of any kind.  
define VExpr as Var | Fn | Load | ...

// Tuple expressions are either tuple constructors or variables.
define TExpr as VExpr | Tuple

// Boolean expressions are those which can return a boolean value.  
// Variable expressions must be included in this, since they can return
// any kind of value.
define BExpr as VExpr | Bool | And | Or | Not | Equals | ...

// General expressions (i.e. *everything*).
define Expr as Value | Tuple | Fn | BExpr | ...








