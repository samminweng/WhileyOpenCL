// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// ====================================================================
// Overview
// ====================================================================
//
// Defines a language of types similar to that found in this paper:
//
// * "Sound and Complete Flow Typing with Unions, Intersections and
//    Negations", David J. Pearce, In Proceedings of VMCAI, 2013.

// ====================================================================
// Not
// ====================================================================

term NotT(Type)

reduce NotT(AnyT)
name "Not_1"
rank 0:
    => VoidT

reduce NotT(VoidT)
name "Not_2"
rank 0:
    => AnyT

reduce NotT(NotT(Type t))
name "Not_3"
rank 0:
    => t

reduce NotT(OrT{Type... es})
name "Not_4"
rank 1:
    => let ns = { NotT(e) | e in es }
       in AndT(ns)

reduce NotT(AndT{Type... es})
name "Not_5"
rank 2:
    => let ns = { NotT(e) | e in es }
       in OrT(ns)

// ====================================================================
// And
// ====================================================================

term AndT{Type...}

reduce AndT{}
name "AndType_1"
rank 0:
    => VoidT

reduce AndT{Type t}
name "AndType_2"
rank 0:
    => t

reduce AndT{AndT{Type... xs}, Type... ys}
name "AndType_3"
rank 1:
    => AndT (xs ++ ys)

reduce AndT{OrT{Type... xs}, Type... ys}
name "AndType_4"
rank 3:
    => let zs = { AndT(x ++ ys) | x in xs }
       in OrT (zs)

// ====================================================================
// Or
// ====================================================================

term OrT{Type...}

reduce OrT{}
name "OrType_1"
rank 0:
    => VoidT

reduce OrT{Type t}
name "OrType_2"
rank 0:
    => t

reduce OrT{OrT{Type... xs}, Type... ys}
name "OrType_3"
rank 1:
    => OrT (xs ++ ys)

// ====================================================================
// Tuple
// ====================================================================
term TupleT[Type...]

reduce TupleT[Type... ts]
name "TupleType_1"
rank 0:
    => VoidT, if VoidT in ts

reduce TupleT[Type... ts]
name "TupleType_1b"
rank 0:
    => VoidT, if |ts| == 0

reduce TupleT[Type t]
name "TupleType_1c"
rank 0:
    => t

reduce AndT{TupleT[Type... t1s], TupleT[Type... t2s], Type... ts}
name "TupleType_2"
rank 2:
    => VoidT, if |t1s| != |t2s|
    => let r = [ AndT{t1s[i],t2s[i]} | i in 0..|t1s| ]
       in AndT(TupleT(r) ++ ts)

reduce AndT{TupleT[Type... t1s] t1, NotT(TupleT[Type... t2s]), Type... ts}
name "TupleType_3"
rank 2:
    => AndT(t1 ++ ts), if |t1s| != |t2s|
    => VoidT, if |t1s| == 0
    => let r = [ AndT{t1s[i],NotT(t2s[i])} | i in 0..|t1s| ]
       in AndT(TupleT(r) ++ ts)

reduce AndT{TupleT[Type...] t1, NotT(ArrayT(Type)), Type... ts}
name "TupleType_4"
rank 2:
    => AndT({t1} ++ ts)

// TODO: pull disjuncts out of tuples?

// ====================================================================
// Array
// ====================================================================
term ArrayT(Type)

// Handle the case of an invalid set type.  This rule is really what
// makes set types complicated.  The rule is necessary purely to help
// with intersection.  For example {(int,int)} & {int} =>
// {(int,int)&int}{void}. This makes sense, but is deceiving.  For
// example, {int} & !{any} => {int&!any} => {void} as well.
reduce ArrayT(VoidT)
name "ArrayType_1"
rank 0:
    => VoidT

reduce AndT{ArrayT(Type t1), ArrayT(Type t2), Type... ts}
name "ArrayType_2"
rank 2:
    => AndT(ArrayT(AndT{t1,t2})++ts)

reduce AndT{ArrayT(Type t1), NotT(ArrayT(Type t2)), Type... ts}
name "ArrayType_3"
rank 2:
    => AndT(ArrayT(AndT{t1,NotT(t2)})++ts)

reduce AndT{ArrayT(Type) t1, NotT(TupleT[Type...]), Type... ts}
name "ArrayType_3b"
rank 2:
    => AndT({t1} ++ ts)

reduce AndT{ArrayT(Type) s, Proton p, Type... ts}
name "ArrayType_4"
rank 1:
    => VoidT, if !(p is AnyT)

reduce OrT{ArrayT(Type t1) s1, ArrayT(Type t2) s2, Type... ts}
name "ArrayType_5"
rank 2:
    => OrT({s1}++ts), if t1 == t2    

// ====================================================================
// Atoms
// ====================================================================

term AnyT
term VoidT
term NullT
term BoolT
term IntT
term RealT
term StringT
term VarT(string)
term NominalT(string)

define Quark as AnyT | NullT | VoidT | BoolT | IntT | RealT | StringT | VarT(string) | NominalT(string)
define Proton as Quark | TupleT[Proton...] | ArrayT(Proton)
define Atom as Proton | NotT(Proton)

reduce AndT{VoidT, Type... xs}
name "AtomType_1"
rank 0:
    => VoidT

reduce AndT{AnyT, Type... xs}
name "AtomType_2"
rank 0:
    => AndT(xs)

// a1 needs to be a quark here, as the rule for tuples is handled
// above.
reduce AndT{Quark a1, Proton a2, Type... ts}
name "AtomType_3"
rank 1:
    => VoidT, if a1 != a2 && a1 != AnyT && a2 != AnyT

// a1 needs to be a quark here, as the rule for tuples is handled
// above.
reduce AndT{Quark a1, NotT(Proton a2), Type... ts}
name "AtomType_4"
rank 1:
    => VoidT, if a1 == a2
    => AndT (a1 ++ ts), if a2 != AnyT

reduce OrT{AnyT, Type... xs}
name "AtomType_5"
rank 0:
    => AnyT

reduce OrT{VoidT, Type... xs}
name "AtomType_5"
rank 0:
    => OrT(xs)

// ====================================================================
// Function
// ====================================================================
term FunctionT[Type,Type, Type...]

// ====================================================================
// General Type
// ====================================================================

define Type as Atom | NotT | OrT | AndT | ArrayT | TupleT | FunctionT

