// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include "Core.wyrl"
include "Sets.wyrl"

// ====================================================================
// ForAll
// ====================================================================

term ForAll[{[Var,Type]...}, BExpr]

reduce ForAll[{[Var,Type]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce ForAll[{[Var,Type]...} xs, ForAll[{[Var,Type]...} ys, BExpr e]]:
       => ForAll[xs++ys,e]

reduce Not(ForAll[{[Var,Type]...} vars, BExpr be]):
       => Exists[vars, Not(be)]

infer And{
        Not(SubsetEq[SetT t1,Set{Expr w,Expr...}, Expr r1]) s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, 
       	  Or{
	    And{
              SubsetEq[SetT t2, Set{Var u, Expr...}, 
              Expr r2], BExpr... }, 
          BExpr... } f], BExpr... rs}:
       => And({s,ForAll[vars,f],f[v\w]} ++ rs), if u == v && r1 == r2

infer And{
        Not(SubsetEq[SetT t1, Set{Expr w,Expr...}, Expr r1]) s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, 
       	  Or{
	    SubsetEq[SetT t2, Set{Var u, Expr...}, Expr r2], 
          BExpr... } f], BExpr... rs}:
       => And({s,ForAll[vars,f],f[v\w]} ++ rs), if u == v && r1 == r2


infer And{
        SubsetEq[SetT t1, Set{Expr w,Expr...}, Expr r1] s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, Or{ 
	  And{ 
	    Not(SubsetEq[SetT t2, Set{Var u, Expr...}, Expr r2]), BExpr... }, BExpr... } f], 
        BExpr... rs}:
       => And({s,ForAll[vars,f],f[v\w]} ++ rs), if u == v && r1 == r2

infer And{
        SubsetEq[SetT t1, Set{Expr w,Expr...}, Expr r1] s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, Or{ 
	  Not(SubsetEq[SetT t2, Set{Var u, Expr...}, Expr r2]), BExpr... } f], 
        BExpr... rs}:
       => And({s,ForAll[vars,f],f[v\w]} ++ rs), if u == v && r1 == r2

// ====================================================================
// Exists
// ====================================================================

term Exists[{[Var,Type]...}, BExpr]

reduce Exists[{[Var,Type]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce Exists[{[Var,Type]...} xs, Exists[{[Var,Type]...} ys, BExpr e]]:
       => Exists[xs++ys,e]

reduce Not(Exists[{[Var,Type]...} vars, BExpr be]):
       => ForAll[vars, Not(be)]

reduce And{Exists[{[Var,Type]...} vs, BExpr e], BExpr... es}:
       => Exists[vs, And(e++es)]

// ====================================================================
// Expressions & Values
// ====================================================================

define BExpr as ForAll | Exists | ...




