package wycs.core

import wycs.core.Map

// Provides a rudimentary implemenetation of a "list"; that is a map
// from integer keys number consequtively from zero to values.

// Define the notion of a list
define List<V> ({int,V} pairs) as:
       forall (int i1, V v1) in pairs, (int i2, V v2) in pairs: 
          if: 
            i1 == i2
          then:
            v1 == v2
       forall (int i,V v) in pairs: 
            i >= 0 && i < |pairs|

function Append<V>({int,V} l1, {int,V} l2) => ({int,V} l3) as:
    l1 âŠ† l3
    forall (int i, V v) in l2:
          (i + |l1|,v) in l3
    forall (int i, V v) in l3:
          (i < |l1| && (i,v) in l1) || (i >= |l1| && (i-|l1|,v) in l2)
    |l1| >= 0
    |l2| >= 0
    |l3| == |l1| + |l2|

function ListUpdate<V> ({int,V} pairs, int index, V value) => ({int,V} rs) as:
    (index,value) in rs
    |rs| == |pairs|
    0 <= index
    index <= |pairs|
    forall (int i, V v) in pairs:
        i == index || (i,v) in rs

function Range(int start, int end) => ({int,int} rs) as:
    forall (int i1, int i2) in rs:
        i1 == i2
        i1 >= 0
        i1 < end
    |rs| == end - start

function Sublist<V>({int,V} pairs, int start, int end) => ({int,V} rs) as:
    forall (int i1, V v1) in pairs:
        if:
           i1 >= start
           i1 < end
        then:
           (i1-start,v1) in rs
    forall (int i1, V v1) in rs:
        (i1 + start,v1) in pairs
