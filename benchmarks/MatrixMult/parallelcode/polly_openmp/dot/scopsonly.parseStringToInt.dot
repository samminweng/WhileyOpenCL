digraph "Scop Graph for 'parseStringToInt' function" {
	label="Scop Graph for 'parseStringToInt' function";

	Node0xd086c40 [shape=record,label="{entry}"];
	Node0xd086c40 -> Node0xd0bbb10;
	Node0xd0bbb10 [shape=record,label="{entry.split}"];
	Node0xd0bbb10 -> Node0xd086380;
	Node0xd0bbb10 -> Node0xd085c80;
	Node0xd086380 [shape=record,label="{while.body.lr.ph}"];
	Node0xd086380 -> Node0xd086440;
	Node0xd086440 [shape=record,label="{while.body}"];
	Node0xd086440 -> Node0xd086440[constraint=false];
	Node0xd086440 -> Node0xd0aaa00;
	Node0xd0aaa00 [shape=record,label="{while.cond.while.end_crit_edge}"];
	Node0xd0aaa00 -> Node0xd085c80;
	Node0xd085c80 [shape=record,label="{while.end}"];
	colorscheme = "paired12"
        subgraph cluster_0xd083990 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xd08f3e0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
            style = solid;
            color = 6
            subgraph cluster_0xd0b49d0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
              style = solid;
              color = 5
              Node0xd086440;
            }
            Node0xd0bbb10;
            Node0xd086380;
            Node0xd0aaa00;
          }
          Node0xd086c40;
          Node0xd085c80;
        }
}
