digraph "Scop Graph for 'isArrayEqual_BYTE' function" {
	label="Scop Graph for 'isArrayEqual_BYTE' function";

	Node0xc6c0980 [shape=record,label="{entry}"];
	Node0xc6c0980 -> Node0xc65a7a0;
	Node0xc65a7a0 [shape=record,label="{entry.split}"];
	Node0xc65a7a0 -> Node0xc667d10;
	Node0xc65a7a0 -> Node0xc672070;
	Node0xc667d10 [shape=record,label="{for.cond.preheader}"];
	Node0xc667d10 -> Node0xc68a390;
	Node0xc667d10 -> Node0xc65b780;
	Node0xc68a390 [shape=record,label="{cleanup}"];
	Node0xc65b780 [shape=record,label="{for.body.lr.ph}"];
	Node0xc65b780 -> Node0xc666430;
	Node0xc666430 [shape=record,label="{for.body}"];
	Node0xc666430 -> Node0xc6a56d0;
	Node0xc666430 -> Node0xc6d9e40;
	Node0xc6a56d0 [shape=record,label="{for.cond}"];
	Node0xc6a56d0 -> Node0xc666430[constraint=false];
	Node0xc6a56d0 -> Node0xc680520;
	Node0xc680520 [shape=record,label="{for.cond.cleanup_crit_edge}"];
	Node0xc680520 -> Node0xc68a390;
	Node0xc6d9e40 [shape=record,label="{for.body.cleanup_crit_edge}"];
	Node0xc6d9e40 -> Node0xc68a390;
	Node0xc672070 [shape=record,label="{return}"];
	colorscheme = "paired12"
        subgraph cluster_0xc6895e0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xc688fa0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0xc689ba0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              Node0xc666430;
              Node0xc6a56d0;
              Node0xc680520;
              Node0xc6d9e40;
            }
            Node0xc667d10;
            Node0xc65b780;
          }
          Node0xc6c0980;
          Node0xc65a7a0;
          Node0xc68a390;
          Node0xc672070;
        }
}
