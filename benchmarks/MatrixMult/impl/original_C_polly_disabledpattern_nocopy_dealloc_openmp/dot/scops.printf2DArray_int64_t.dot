digraph "Scop Graph for 'printf2DArray_int64_t' function" {
	label="Scop Graph for 'printf2DArray_int64_t' function";

	Node0xbff2290 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0xbff2290 -> Node0xbfb5d50;
	Node0xbfb5d50 [shape=record,label="{entry.split:                                      \l  %putchar = tail call i32 @putchar(i32 91)\l  %cmp15 = icmp eq i64 %input_size, 0\l  br i1 %cmp15, label %while.end, label %while.body.lr.ph\l}"];
	Node0xbfb5d50 -> Node0xc014db0;
	Node0xbfb5d50 -> Node0xbfaf500;
	Node0xc014db0 [shape=record,label="{while.end:                                        \l  %cmp2 = icmp ugt i64 %input_size, 100\l  br i1 %cmp2, label %if.then, label %if.end\l}"];
	Node0xc014db0 -> Node0xc0b72d0;
	Node0xc014db0 -> Node0xbffa690;
	Node0xc0b72d0 [shape=record,label="{if.then:                                          \l  %puts14 = tail call i32 @puts(i8* getelementptr inbounds ([5 x i8], [5 x\l... i8]* @str.31, i64 0, i64 0))\l  %sub = add i64 %input_size, -1\l  %arrayidx4 = getelementptr inbounds i64*, i64** %input, i64 %sub\l  %2 = load i64*, i64** %arrayidx4, align 8, !tbaa !1\l  tail call void @printf1DArray_int64_t(i64* %2, i64 %input_size_size)\l  br label %if.end\l}"];
	Node0xc0b72d0 -> Node0xbffa690;
	Node0xbffa690 [shape=record,label="{if.end:                                           \l  %puts = tail call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]*\l... @str.30, i64 0, i64 0))\l  ret void\l}"];
	Node0xbfaf500 [shape=record,label="{while.body.lr.ph:                                 \l  br label %while.body\l}"];
	Node0xbfaf500 -> Node0xbff8840;
	Node0xbff8840 [shape=record,label="{while.body:                                       \l  %i.016 = phi i64 [ 0, %while.body.lr.ph ], [ %inc, %while.body ]\l  %arrayidx = getelementptr inbounds i64*, i64** %input, i64 %i.016\l  %0 = load i64*, i64** %arrayidx, align 8, !tbaa !1\l  tail call void @printf1DArray_int64_t(i64* %0, i64 %input_size_size)\l  %inc = add nuw nsw i64 %i.016, 1\l  %cmp = icmp ult i64 %inc, %input_size\l  %cmp1 = icmp ult i64 %inc, 100\l  %1 = and i1 %cmp, %cmp1\l  br i1 %1, label %while.body, label %while.cond.while.end_crit_edge\l}"];
	Node0xbff8840 -> Node0xbff8840[constraint=false];
	Node0xbff8840 -> Node0xbfc3da0;
	Node0xbfc3da0 [shape=record,label="{while.cond.while.end_crit_edge:                   \l  br label %while.end\l}"];
	Node0xbfc3da0 -> Node0xc014db0;
	colorscheme = "paired12"
        subgraph cluster_0xc01c820 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xbfcc8d0 {
            label = "Call instruction:   %putchar = tail call i32 @putchar(i32 91)";
            style = solid;
            color = 6
            subgraph cluster_0xbfcc850 {
              label = "Call instruction:   tail call void @printf1DArray_int64_t(i64* %0, i64 %input_size_size)";
              style = solid;
              color = 5
              Node0xbff8840;
            }
            Node0xbfb5d50;
            Node0xbfaf500;
            Node0xbfc3da0;
          }
          subgraph cluster_0xc02d0a0 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            Node0xc014db0;
            Node0xc0b72d0;
          }
          Node0xbff2290;
          Node0xbffa690;
        }
}
