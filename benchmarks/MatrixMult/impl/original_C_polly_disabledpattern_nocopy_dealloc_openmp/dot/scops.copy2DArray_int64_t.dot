digraph "Scop Graph for 'copy2DArray_int64_t' function" {
	label="Scop Graph for 'copy2DArray_int64_t' function";

	Node0xbfe7900 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0xbfe7900 -> Node0xc01cf20;
	Node0xc01cf20 [shape=record,label="{entry.split:                                      \l  %cmp = icmp eq i64** %arr, null\l  br i1 %cmp, label %return, label %if.end\l}"];
	Node0xc01cf20 -> Node0xc013b80;
	Node0xc01cf20 -> Node0xc02f400;
	Node0xc013b80 [shape=record,label="{return:                                           \l  %retval.0 = phi i64** [ null, %entry.split ], [ %call, %return.loopexit ]\l  ret i64** %retval.0\l}"];
	Node0xc02f400 [shape=record,label="{if.end:                                           \l  %call = tail call i64** @create2DArray_int64_t_empty(i64 %n, i64 %m)\l  %mul = shl i64 %m, 3\l  %cmp113 = icmp eq i64 %n, 0\l  br i1 %cmp113, label %return.loopexit, label %for.body.lr.ph\l}"];
	Node0xc02f400 -> Node0xbfab140;
	Node0xc02f400 -> Node0xc017bd0;
	Node0xbfab140 [shape=record,label="{return.loopexit:                                  \l  br label %return\l}"];
	Node0xbfab140 -> Node0xc013b80;
	Node0xc017bd0 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0xc017bd0 -> Node0xbfe56b0;
	Node0xbfe56b0 [shape=record,label="{for.body:                                         \l  %i.014 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds i64*, i64** %call, i64 %i.014\l  %0 = bitcast i64** %arrayidx to i8**\l  %1 = load i8*, i8** %0, align 8, !tbaa !1\l  %arrayidx2 = getelementptr inbounds i64*, i64** %arr, i64 %i.014\l  %2 = bitcast i64** %arrayidx2 to i8**\l  %3 = load i8*, i8** %2, align 8, !tbaa !1\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %3, i64 %mul, i32 8,\l... i1 false)\l  %inc = add nuw i64 %i.014, 1\l  %exitcond = icmp ne i64 %inc, %n\l  br i1 %exitcond, label %for.body, label %for.cond.return.loopexit_crit_edge\l}"];
	Node0xbfe56b0 -> Node0xbfe56b0[constraint=false];
	Node0xbfe56b0 -> Node0xbfcaa30;
	Node0xbfcaa30 [shape=record,label="{for.cond.return.loopexit_crit_edge:               \l  br label %return.loopexit\l}"];
	Node0xbfcaa30 -> Node0xbfab140;
	colorscheme = "paired12"
        subgraph cluster_0xc01a370 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xbfd8c10 {
            label = "";
            style = solid;
            color = 6
            subgraph cluster_0xbfe86b0 {
              label = "Call instruction:   %call = tail call i64** @create2DArray_int64_t_empty(i64 %n, i64 %m)";
              style = solid;
              color = 5
              subgraph cluster_0xbfc3ce0 {
                label = "Possible aliasing: \"call\", \"arr\", \" <unknown> \"";
                style = solid;
                color = 7
                Node0xbfe56b0;
              }
              Node0xc02f400;
              Node0xc017bd0;
              Node0xbfcaa30;
            }
            Node0xc01cf20;
            Node0xbfab140;
          }
          Node0xbfe7900;
          Node0xc013b80;
        }
}
