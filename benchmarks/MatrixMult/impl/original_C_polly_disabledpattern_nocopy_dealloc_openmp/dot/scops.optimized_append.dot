digraph "Scop Graph for 'optimized_append' function" {
	label="Scop Graph for 'optimized_append' function";

	Node0xbfc2580 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0xbfc2580 -> Node0xc02e800;
	Node0xc02e800 [shape=record,label="{entry.split:                                      \l  %0 = load i64, i64* %op_1_size, align 8, !tbaa !1\l  %call = tail call i32 @isPowerof2(i64 %0)\l  %tobool = icmp eq i32 %call, 0\l  br i1 %tobool, label %if.end6, label %while.cond.preheader\l}"];
	Node0xc02e800 -> Node0xbfda260;
	Node0xc02e800 -> Node0xbfd2130;
	Node0xbfda260 [shape=record,label="{if.end6:                                          \l  %ret.0 = phi i64* [ %4, %while.end ], [ %op_1, %entry.split ]\l  %7 = load i64, i64* %op_2_size, align 8, !tbaa !1\l  %cmp727 = icmp eq i64 %7, 0\l  br i1 %cmp727, label %for.cond.cleanup, label %for.body.lr.ph\l}"];
	Node0xbfda260 -> Node0xbfcd8d0;
	Node0xbfda260 -> Node0xbfe4380;
	Node0xbfcd8d0 [shape=record,label="{for.cond.cleanup:                                 \l  %.lcssa = phi i64 [ %.lcssa29, %for.cond.for.cond.cleanup_crit_edge ], [ %7,\l... %if.end6 ]\l  %8 = load i64, i64* %op_1_size, align 8, !tbaa !1\l  %add10 = add i64 %8, %.lcssa\l  store i64 %add10, i64* %ret_size, align 8, !tbaa !1\l  ret i64* %ret.0\l}"];
	Node0xbfe4380 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0xbfe4380 -> Node0xc02dba0;
	Node0xc02dba0 [shape=record,label="{for.body:                                         \l  %i.028 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds i64, i64* %op_2, i64 %i.028\l  %9 = load i64, i64* %arrayidx, align 8, !tbaa !1\l  %10 = load i64, i64* %op_1_size, align 8, !tbaa !1\l  %add8 = add i64 %10, %i.028\l  %arrayidx9 = getelementptr inbounds i64, i64* %ret.0, i64 %add8\l  store i64 %9, i64* %arrayidx9, align 8, !tbaa !1\l  %inc = add i64 %i.028, 1\l  %11 = load i64, i64* %op_2_size, align 8, !tbaa !1\l  %cmp7 = icmp ult i64 %inc, %11\l  br i1 %cmp7, label %for.body, label %for.cond.for.cond.cleanup_crit_edge\l}"];
	Node0xc02dba0 -> Node0xc02dba0[constraint=false];
	Node0xc02dba0 -> Node0xbfd2230;
	Node0xbfd2230 [shape=record,label="{for.cond.for.cond.cleanup_crit_edge:              \l  %.lcssa29 = phi i64 [ %11, %for.body ]\l  br label %for.cond.cleanup\l}"];
	Node0xbfd2230 -> Node0xbfcd8d0;
	Node0xbfd2130 [shape=record,label="{while.cond.preheader:                             \l  br label %while.cond\l}"];
	Node0xbfd2130 -> Node0xbfcaa30;
	Node0xbfcaa30 [shape=record,label="{while.cond:                                       \l  %allocated_size.0 = phi i64 [ %mul, %while.cond ], [ 2,\l... %while.cond.preheader ]\l  %1 = load i64, i64* %op_1_size, align 8, !tbaa !1\l  %2 = load i64, i64* %op_2_size, align 8, !tbaa !1\l  %add = add i64 %2, %1\l  %cmp = icmp ult i64 %allocated_size.0, %add\l  %mul = shl i64 %allocated_size.0, 1\l  br i1 %cmp, label %while.cond, label %while.end\l}"];
	Node0xbfcaa30 -> Node0xbfcaa30[constraint=false];
	Node0xbfcaa30 -> Node0xbff6560;
	Node0xbff6560 [shape=record,label="{while.end:                                        \l  %allocated_size.0.lcssa = phi i64 [ %allocated_size.0, %while.cond ]\l  %3 = bitcast i64* %op_1 to i8*\l  %mul1 = shl i64 %allocated_size.0.lcssa, 3\l  %call2 = tail call i8* @realloc(i8* %3, i64 %mul1) #6\l  %4 = bitcast i8* %call2 to i64*\l  %cmp3 = icmp eq i8* %call2, null\l  br i1 %cmp3, label %if.then4, label %if.end6\l}"];
	Node0xbff6560 -> Node0xbfb6280;
	Node0xbff6560 -> Node0xbfda260;
	Node0xbfb6280 [shape=record,label="{if.then4:                                         \l  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5\l  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([55 x i8], [55 x i8]*\l... @.str.20, i64 0, i64 0), i64 54, i64 1, %struct._IO_FILE* %5) #7\l  tail call void @exit(i32 -2) #8\l  unreachable\l}"];
	colorscheme = "paired12"
        subgraph cluster_0xbfd97d0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xc014090 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0xbfb7470 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              Node0xc02dba0;
            }
            Node0xbfda260;
            Node0xbfe4380;
            Node0xbfd2230;
          }
          subgraph cluster_0xbf66d50 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.cond";
            style = solid;
            color = 6
            Node0xbfcaa30;
          }
          Node0xbfc2580;
          Node0xc02e800;
          Node0xbfcd8d0;
          Node0xbfd2130;
          Node0xbff6560;
          Node0xbfb6280;
        }
}
