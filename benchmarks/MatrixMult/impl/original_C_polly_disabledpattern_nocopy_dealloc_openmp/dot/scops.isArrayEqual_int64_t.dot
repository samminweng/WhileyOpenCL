digraph "Scop Graph for 'isArrayEqual_int64_t' function" {
	label="Scop Graph for 'isArrayEqual_int64_t' function";

	Node0xbfb6280 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0xbfb6280 -> Node0xbfa9df0;
	Node0xbfa9df0 [shape=record,label="{entry.split:                                      \l  %cmp = icmp eq i64 %arr1_size, %arr2_size\l  br i1 %cmp, label %for.cond.preheader, label %return\l}"];
	Node0xbfa9df0 -> Node0xbfcd8d0;
	Node0xbfa9df0 -> Node0xbfb4cb0;
	Node0xbfcd8d0 [shape=record,label="{for.cond.preheader:                               \l  %cmp111 = icmp eq i64 %arr1_size, 0\l  br i1 %cmp111, label %cleanup, label %for.body.lr.ph\l}"];
	Node0xbfcd8d0 -> Node0xbfb46a0;
	Node0xbfcd8d0 -> Node0xbfb5910;
	Node0xbfb46a0 [shape=record,label="{cleanup:                                          \l  %cleanup.dest.slot.0 = phi i1 [ true, %for.cond.cleanup_crit_edge ], [\l... false, %for.body.cleanup_crit_edge ], [ true, %for.cond.preheader ]\l  ret i1 %cleanup.dest.slot.0\l}"];
	Node0xbfb5910 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0xbfb5910 -> Node0xbfd9480;
	Node0xbfd9480 [shape=record,label="{for.body:                                         \l  %i.012 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.cond ]\l  %arrayidx = getelementptr inbounds i64, i64* %arr1, i64 %i.012\l  %0 = load i64, i64* %arrayidx, align 8, !tbaa !1\l  %arrayidx2 = getelementptr inbounds i64, i64* %arr2, i64 %i.012\l  %1 = load i64, i64* %arrayidx2, align 8, !tbaa !1\l  %cmp3 = icmp eq i64 %0, %1\l  %inc = add nuw i64 %i.012, 1\l  br i1 %cmp3, label %for.cond, label %for.body.cleanup_crit_edge\l}"];
	Node0xbfd9480 -> Node0xc013b80;
	Node0xbfd9480 -> Node0xbfc2580;
	Node0xc013b80 [shape=record,label="{for.cond:                                         \l  %cmp1 = icmp ult i64 %inc, %arr1_size\l  br i1 %cmp1, label %for.body, label %for.cond.cleanup_crit_edge\l}"];
	Node0xc013b80 -> Node0xbfd9480[constraint=false];
	Node0xc013b80 -> Node0xbeb01d0;
	Node0xbeb01d0 [shape=record,label="{for.cond.cleanup_crit_edge:                       \l  br label %cleanup\l}"];
	Node0xbeb01d0 -> Node0xbfb46a0;
	Node0xbfc2580 [shape=record,label="{for.body.cleanup_crit_edge:                       \l  br label %cleanup\l}"];
	Node0xbfc2580 -> Node0xbfb46a0;
	Node0xbfb4cb0 [shape=record,label="{return:                                           \l  ret i1 false\l}"];
	colorscheme = "paired12"
        subgraph cluster_0xbfd1420 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xbfdd6a0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0xbfaf0d0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              Node0xbfd9480;
              Node0xc013b80;
              Node0xbeb01d0;
              Node0xbfc2580;
            }
            Node0xbfcd8d0;
            Node0xbfb5910;
          }
          Node0xbfb6280;
          Node0xbfa9df0;
          Node0xbfb46a0;
          Node0xbfb4cb0;
        }
}
