digraph "Scop Graph for 'readPBM' function" {
	label="Scop Graph for 'readPBM' function";

	Node0xbfe9620 [shape=record,label="{entry:\l  %width = alloca i32, align 4\l  %height = alloca i32, align 4\l  br label %entry.split\l}"];
	Node0xbfe9620 -> Node0xbfcd8d0;
	Node0xbfcd8d0 [shape=record,label="{entry.split:                                      \l  %call = tail call noalias i8* @malloc(i64 16384) #6\l  %0 = bitcast i32* %width to i8*\l  call void @llvm.lifetime.start(i64 4, i8* %0) #6\l  store i32 0, i32* %width, align 4, !tbaa !1\l  %1 = bitcast i32* %height to i8*\l  call void @llvm.lifetime.start(i64 4, i8* %1) #6\l  store i32 0, i32* %height, align 4, !tbaa !1\l  br label %while.cond\l}"];
	Node0xbfcd8d0 -> Node0xc01d4d0;
	Node0xc01d4d0 [shape=record,label="{while.cond:                                       \l  %call1 = tail call i8* @fgets(i8* %call, i32 16384, %struct._IO_FILE* %file)\l  %cmp = icmp eq i8* %call1, null\l  br i1 %cmp, label %while.end.loopexit, label %while.body\l}"];
	Node0xc01d4d0 -> Node0xbfcb990;
	Node0xc01d4d0 -> Node0xbfba8a0;
	Node0xbfcb990 [shape=record,label="{while.end.loopexit:                               \l  br label %while.end\l}"];
	Node0xbfcb990 -> Node0xbfda260;
	Node0xbfda260 [shape=record,label="{while.end:                                        \l  call void @free(i8* %call) #6\l  %3 = load i32, i32* %width, align 4, !tbaa !1\l  %4 = load i32, i32* %height, align 4, !tbaa !1\l  %mul = mul nsw i32 %4, %3\l  %conv7 = sext i32 %mul to i64\l  %call9 = call noalias i8* @malloc(i64 %conv7) #6\l  %cmp10 = icmp eq i8* %call9, null\l  br i1 %cmp10, label %if.then12, label %while.cond15.preheader\l}"];
	Node0xbfda260 -> Node0xbdea4f0;
	Node0xbfda260 -> Node0xbfcfbf0;
	Node0xbdea4f0 [shape=record,label="{if.then12:                                        \l  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6\l  %6 = call i64 @fwrite(i8* getelementptr inbounds ([60 x i8], [60 x i8]*\l... @.str.27, i64 0, i64 0), i64 59, i64 1, %struct._IO_FILE* %5) #7\l  call void @exit(i32 -2) #8\l  unreachable\l}"];
	Node0xbfcfbf0 [shape=record,label="{while.cond15.preheader:                           \l  br label %while.cond15.outer\l}"];
	Node0xbfcfbf0 -> Node0xbfbeee0;
	Node0xbfbeee0 [shape=record,label="{while.cond15.outer:                               \l  %arr_ind.0.ph = phi i64 [ 0, %while.cond15.preheader ], [ %inc, %if.end42 ]\l  br label %while.cond15\l}"];
	Node0xbfbeee0 -> Node0xbfe7900;
	Node0xbfe7900 [shape=record,label="{while.cond15:                                     \l  %call16 = call i32 @_IO_getc(%struct._IO_FILE* %file)\l  %conv17 = trunc i32 %call16 to i8\l  %sext = shl i32 %call16, 24\l  %conv18 = ashr exact i32 %sext, 24\l  switch i32 %conv18, label %if.then28 [\l    i32 -1, label %while.end44\l    i32 32, label %while.cond15.backedge\l    i32 10, label %while.cond15.backedge\l  ]\l}"];
	Node0xbfe7900 -> Node0xbfe8810;
	Node0xbfe7900 -> Node0xbfb0b30;
	Node0xbfe7900 -> Node0xc01cc30;
	Node0xbfe7900 -> Node0xc01cc30;
	Node0xbfe8810 [shape=record,label="{if.then28:                                        \l  %call16.lcssa = phi i32 [ %call16, %while.cond15 ]\l  %conv17.lcssa = phi i8 [ %conv17, %while.cond15 ]\l  %trunc = trunc i32 %call16.lcssa to i8\l  switch i8 %trunc, label %if.else39 [\l    i8 49, label %if.then32\l    i8 48, label %if.end42\l  ]\l}"];
	Node0xbfe8810 -> Node0xbfe1130;
	Node0xbfe8810 -> Node0xc0129e0;
	Node0xbfe8810 -> Node0xbfd2230;
	Node0xbfe1130 [shape=record,label="{if.else39:                                        \l  br label %if.end42\l}"];
	Node0xbfe1130 -> Node0xbfd2230;
	Node0xbfd2230 [shape=record,label="{if.end42:                                         \l  %.sink.sink = phi i8 [ 98, %if.then32 ], [ %conv17.lcssa, %if.else39 ], [\l... 32, %if.then28 ]\l  %arrayidx40.sink = getelementptr inbounds i8, i8* %call9, i64 %arr_ind.0.ph\l  store i8 %.sink.sink, i8* %arrayidx40.sink, align 1, !tbaa !5\l  %inc = add i64 %arr_ind.0.ph, 1\l  br label %while.cond15.outer\l}"];
	Node0xbfd2230 -> Node0xbfbeee0[constraint=false];
	Node0xc0129e0 [shape=record,label="{if.then32:                                        \l  br label %if.end42\l}"];
	Node0xc0129e0 -> Node0xbfd2230;
	Node0xbfb0b30 [shape=record,label="{while.end44:                                      \l  store i64 %conv7, i64* %_size, align 8, !tbaa !8\l  call void @llvm.lifetime.end(i64 4, i8* %1) #6\l  call void @llvm.lifetime.end(i64 4, i8* %0) #6\l  ret i8* %call9\l}"];
	Node0xc01cc30 [shape=record,label="{while.cond15.backedge:                            \l  br label %while.cond15\l}"];
	Node0xc01cc30 -> Node0xbfe7900;
	Node0xbfba8a0 [shape=record,label="{while.body:                                       \l  %2 = load i8, i8* %call, align 1, !tbaa !5\l  %cmp4 = icmp eq i8 %2, 35\l  br i1 %cmp4, label %while.cond, label %if.then\l}"];
	Node0xbfba8a0 -> Node0xc01d4d0[constraint=false];
	Node0xbfba8a0 -> Node0xc014100;
	Node0xc014100 [shape=record,label="{if.then:                                          \l  %call6 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %call, i8*\l... getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0), i32*\l... nonnull %width, i32* nonnull %height) #6\l  br label %while.end\l}"];
	Node0xc014100 -> Node0xbfda260;
	colorscheme = "paired12"
        subgraph cluster_0xc032d20 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xc020fa0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.cond";
            style = solid;
            color = 6
            Node0xc01d4d0;
            Node0xbfcb990;
            Node0xbfba8a0;
            Node0xc014100;
          }
          subgraph cluster_0xc020f20 {
            label = "Non affine branch in BB 'while.cond15' with LHS: (sext i8 (trunc i32 %call16 to i8) to i32) and RHS: (sext i8 (trunc i32 %call16 to i8) to i32)";
            style = solid;
            color = 6
            subgraph cluster_0xc021280 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0xbfe8810;
              Node0xbfe1130;
              Node0xc0129e0;
            }
            Node0xbfbeee0;
            Node0xbfe7900;
            Node0xbfd2230;
            Node0xc01cc30;
          }
          Node0xbfe9620;
          Node0xbfcd8d0;
          Node0xbfda260;
          Node0xbdea4f0;
          Node0xbfcfbf0;
          Node0xbfb0b30;
        }
}
