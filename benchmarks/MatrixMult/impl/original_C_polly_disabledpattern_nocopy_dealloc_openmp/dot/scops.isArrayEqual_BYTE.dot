digraph "Scop Graph for 'isArrayEqual_BYTE' function" {
	label="Scop Graph for 'isArrayEqual_BYTE' function";

	Node0xbfbeee0 [shape=record,label="{entry:\l  br label %entry.split\l}"];
	Node0xbfbeee0 -> Node0xbdea4f0;
	Node0xbdea4f0 [shape=record,label="{entry.split:                                      \l  %cmp = icmp eq i64 %arr1_size, %arr2_size\l  br i1 %cmp, label %for.cond.preheader, label %return\l}"];
	Node0xbdea4f0 -> Node0xc014780;
	Node0xbdea4f0 -> Node0xbfb9d00;
	Node0xc014780 [shape=record,label="{for.cond.preheader:                               \l  %cmp113 = icmp eq i64 %arr1_size, 0\l  br i1 %cmp113, label %cleanup, label %for.body.lr.ph\l}"];
	Node0xc014780 -> Node0xbfcaa30;
	Node0xc014780 -> Node0xbfb9270;
	Node0xbfcaa30 [shape=record,label="{cleanup:                                          \l  %cleanup.dest.slot.0 = phi i1 [ true, %for.cond.cleanup_crit_edge ], [\l... false, %for.body.cleanup_crit_edge ], [ true, %for.cond.preheader ]\l  ret i1 %cleanup.dest.slot.0\l}"];
	Node0xbfb9270 [shape=record,label="{for.body.lr.ph:                                   \l  br label %for.body\l}"];
	Node0xbfb9270 -> Node0xc00ecd0;
	Node0xc00ecd0 [shape=record,label="{for.body:                                         \l  %i.014 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.cond ]\l  %arrayidx = getelementptr inbounds i8, i8* %arr1, i64 %i.014\l  %0 = load i8, i8* %arrayidx, align 1, !tbaa !1\l  %arrayidx2 = getelementptr inbounds i8, i8* %arr2, i64 %i.014\l  %1 = load i8, i8* %arrayidx2, align 1, !tbaa !1\l  %cmp4 = icmp eq i8 %0, %1\l  %inc = add nuw i64 %i.014, 1\l  br i1 %cmp4, label %for.cond, label %for.body.cleanup_crit_edge\l}"];
	Node0xc00ecd0 -> Node0xbffe580;
	Node0xc00ecd0 -> Node0xc02dba0;
	Node0xbffe580 [shape=record,label="{for.cond:                                         \l  %cmp1 = icmp ult i64 %inc, %arr1_size\l  br i1 %cmp1, label %for.body, label %for.cond.cleanup_crit_edge\l}"];
	Node0xbffe580 -> Node0xc00ecd0[constraint=false];
	Node0xbffe580 -> Node0xbfd2230;
	Node0xbfd2230 [shape=record,label="{for.cond.cleanup_crit_edge:                       \l  br label %cleanup\l}"];
	Node0xbfd2230 -> Node0xbfcaa30;
	Node0xc02dba0 [shape=record,label="{for.body.cleanup_crit_edge:                       \l  br label %cleanup\l}"];
	Node0xc02dba0 -> Node0xbfcaa30;
	Node0xbfb9d00 [shape=record,label="{return:                                           \l  ret i1 false\l}"];
	colorscheme = "paired12"
        subgraph cluster_0xbfe0d20 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xc00edf0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0xc02c7d0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              Node0xc00ecd0;
              Node0xbffe580;
              Node0xbfd2230;
              Node0xc02dba0;
            }
            Node0xc014780;
            Node0xbfb9270;
          }
          Node0xbfbeee0;
          Node0xbdea4f0;
          Node0xbfcaa30;
          Node0xbfb9d00;
        }
}
