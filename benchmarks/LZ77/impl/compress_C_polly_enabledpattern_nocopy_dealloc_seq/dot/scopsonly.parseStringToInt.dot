digraph "Scop Graph for 'parseStringToInt' function" {
	label="Scop Graph for 'parseStringToInt' function";

	Node0xc0bf660 [shape=record,label="{entry}"];
	Node0xc0bf660 -> Node0xc080660;
	Node0xc080660 [shape=record,label="{entry.split}"];
	Node0xc080660 -> Node0xc0b29b0;
	Node0xc080660 -> Node0xc0ab050;
	Node0xc0b29b0 [shape=record,label="{while.body.lr.ph}"];
	Node0xc0b29b0 -> Node0xc0a1cd0;
	Node0xc0a1cd0 [shape=record,label="{while.body}"];
	Node0xc0a1cd0 -> Node0xc0a1cd0[constraint=false];
	Node0xc0a1cd0 -> Node0xc073fe0;
	Node0xc073fe0 [shape=record,label="{while.cond.while.end_crit_edge}"];
	Node0xc073fe0 -> Node0xc0ab050;
	Node0xc0ab050 [shape=record,label="{while.end}"];
	colorscheme = "paired12"
        subgraph cluster_0xc0bccd0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xc09f8a0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
            style = solid;
            color = 6
            subgraph cluster_0xc0a9a60 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
              style = solid;
              color = 5
              Node0xc0a1cd0;
            }
            Node0xc080660;
            Node0xc0b29b0;
            Node0xc073fe0;
          }
          Node0xc0bf660;
          Node0xc0ab050;
        }
}
