digraph "Scop Graph for 'parseStringToInt' function" {
	label="Scop Graph for 'parseStringToInt' function";

	Node0xd2a7a50 [shape=record,label="{entry}"];
	Node0xd2a7a50 -> Node0xd29c310;
	Node0xd29c310 [shape=record,label="{entry.split}"];
	Node0xd29c310 -> Node0xd2a39c0;
	Node0xd29c310 -> Node0xd2daca0;
	Node0xd2a39c0 [shape=record,label="{while.body.lr.ph}"];
	Node0xd2a39c0 -> Node0xd2bd4a0;
	Node0xd2bd4a0 [shape=record,label="{while.body}"];
	Node0xd2bd4a0 -> Node0xd2bd4a0[constraint=false];
	Node0xd2bd4a0 -> Node0xd2ad780;
	Node0xd2ad780 [shape=record,label="{while.cond.while.end_crit_edge}"];
	Node0xd2ad780 -> Node0xd2daca0;
	Node0xd2daca0 [shape=record,label="{while.end}"];
	colorscheme = "paired12"
        subgraph cluster_0xd2ce9a0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xd2cc5b0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
            style = solid;
            color = 6
            subgraph cluster_0xd2cdc20 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
              style = solid;
              color = 5
              Node0xd2bd4a0;
            }
            Node0xd29c310;
            Node0xd2a39c0;
            Node0xd2ad780;
          }
          Node0xd2a7a50;
          Node0xd2daca0;
        }
}
