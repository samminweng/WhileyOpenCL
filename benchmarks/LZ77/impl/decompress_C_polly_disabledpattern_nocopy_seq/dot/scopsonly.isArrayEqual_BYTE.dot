digraph "Scop Graph for 'isArrayEqual_BYTE' function" {
	label="Scop Graph for 'isArrayEqual_BYTE' function";

	Node0xbf3a3a0 [shape=record,label="{entry}"];
	Node0xbf3a3a0 -> Node0xbf40c70;
	Node0xbf40c70 [shape=record,label="{entry.split}"];
	Node0xbf40c70 -> Node0xbf0fe80;
	Node0xbf40c70 -> Node0xbf0a6a0;
	Node0xbf0fe80 [shape=record,label="{for.cond.preheader}"];
	Node0xbf0fe80 -> Node0xbf58b60;
	Node0xbf0fe80 -> Node0xbf2be80;
	Node0xbf58b60 [shape=record,label="{cleanup}"];
	Node0xbf2be80 [shape=record,label="{for.body.lr.ph}"];
	Node0xbf2be80 -> Node0xbf0beb0;
	Node0xbf0beb0 [shape=record,label="{for.body}"];
	Node0xbf0beb0 -> Node0xbf192f0;
	Node0xbf0beb0 -> Node0xbf2f610;
	Node0xbf192f0 [shape=record,label="{for.cond}"];
	Node0xbf192f0 -> Node0xbf0beb0[constraint=false];
	Node0xbf192f0 -> Node0xbf0af90;
	Node0xbf0af90 [shape=record,label="{for.cond.cleanup_crit_edge}"];
	Node0xbf0af90 -> Node0xbf58b60;
	Node0xbf2f610 [shape=record,label="{for.body.cleanup_crit_edge}"];
	Node0xbf2f610 -> Node0xbf58b60;
	Node0xbf0a6a0 [shape=record,label="{return}"];
	colorscheme = "paired12"
        subgraph cluster_0xbf1e4c0 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xbf41520 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0xbf583c0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              Node0xbf0beb0;
              Node0xbf192f0;
              Node0xbf0af90;
              Node0xbf2f610;
            }
            Node0xbf0fe80;
            Node0xbf2be80;
          }
          Node0xbf3a3a0;
          Node0xbf40c70;
          Node0xbf58b60;
          Node0xbf0a6a0;
        }
}
