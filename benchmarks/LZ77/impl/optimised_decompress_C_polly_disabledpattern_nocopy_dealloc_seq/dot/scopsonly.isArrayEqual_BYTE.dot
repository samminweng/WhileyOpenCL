digraph "Scop Graph for 'isArrayEqual_BYTE' function" {
	label="Scop Graph for 'isArrayEqual_BYTE' function";

	Node0xc6b3820 [shape=record,label="{entry}"];
	Node0xc6b3820 -> Node0xc6cbab0;
	Node0xc6cbab0 [shape=record,label="{entry.split}"];
	Node0xc6cbab0 -> Node0xc698880;
	Node0xc6cbab0 -> Node0xc6a9940;
	Node0xc698880 [shape=record,label="{for.cond.preheader}"];
	Node0xc698880 -> Node0xc6ab260;
	Node0xc698880 -> Node0xc6e6100;
	Node0xc6ab260 [shape=record,label="{cleanup}"];
	Node0xc6e6100 [shape=record,label="{for.body.lr.ph}"];
	Node0xc6e6100 -> Node0xc69f490;
	Node0xc69f490 [shape=record,label="{for.body}"];
	Node0xc69f490 -> Node0xc6a8790;
	Node0xc69f490 -> Node0xc6b8e30;
	Node0xc6a8790 [shape=record,label="{for.cond}"];
	Node0xc6a8790 -> Node0xc69f490[constraint=false];
	Node0xc6a8790 -> Node0xc6e3d60;
	Node0xc6e3d60 [shape=record,label="{for.cond.cleanup_crit_edge}"];
	Node0xc6e3d60 -> Node0xc6ab260;
	Node0xc6b8e30 [shape=record,label="{for.body.cleanup_crit_edge}"];
	Node0xc6b8e30 -> Node0xc6ab260;
	Node0xc6a9940 [shape=record,label="{return}"];
	colorscheme = "paired12"
        subgraph cluster_0xc69ff80 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xc6f68e0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
            style = solid;
            color = 6
            subgraph cluster_0xc6cdd40 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.body";
              style = solid;
              color = 5
              Node0xc69f490;
              Node0xc6a8790;
              Node0xc6e3d60;
              Node0xc6b8e30;
            }
            Node0xc698880;
            Node0xc6e6100;
          }
          Node0xc6b3820;
          Node0xc6cbab0;
          Node0xc6ab260;
          Node0xc6a9940;
        }
}
