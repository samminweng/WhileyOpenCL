digraph "Scop Graph for 'parseStringToInt' function" {
	label="Scop Graph for 'parseStringToInt' function";

	Node0xd4080d0 [shape=record,label="{entry}"];
	Node0xd4080d0 -> Node0xd3d26a0;
	Node0xd3d26a0 [shape=record,label="{entry.split}"];
	Node0xd3d26a0 -> Node0xd3a0c10;
	Node0xd3d26a0 -> Node0xd3b5670;
	Node0xd3a0c10 [shape=record,label="{while.body.lr.ph}"];
	Node0xd3a0c10 -> Node0xd3a6280;
	Node0xd3a6280 [shape=record,label="{while.body}"];
	Node0xd3a6280 -> Node0xd3a6280[constraint=false];
	Node0xd3a6280 -> Node0xd3ba480;
	Node0xd3ba480 [shape=record,label="{while.cond.while.end_crit_edge}"];
	Node0xd3ba480 -> Node0xd3b5670;
	Node0xd3b5670 [shape=record,label="{while.end}"];
	colorscheme = "paired12"
        subgraph cluster_0xd3d4020 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0xd3fc160 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
            style = solid;
            color = 6
            subgraph cluster_0xd3d3cd0 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: while.body";
              style = solid;
              color = 5
              Node0xd3a6280;
            }
            Node0xd3d26a0;
            Node0xd3a0c10;
            Node0xd3ba480;
          }
          Node0xd4080d0;
          Node0xd3b5670;
        }
}
