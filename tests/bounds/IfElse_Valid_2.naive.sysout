main.0 [	fieldload %2 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.1 [	fieldload %3 = %2 println : {method(any) => void print,method(any) => void println}]
main.2 [	const %6 = 1 : int]
main.3 [	invoke %5 = (%6) IfElse_Valid_2:f : function(int) => int]
Bounds of main{
	D(%6) = [1..1]
}
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
Bounds of f{
	D(%0) = [1..11]
	D(%2) = [10..10]
	D(%3) = [1..1]
	D(%5) = [10..10]
	D(%6) = [2..2]
	D(%7) = [0..0]
	D(return) = [0..2]
}
Consistency=true
main.4 [	convert %5 = %5 any : int]
main.5 [	invoke %4 = (%5) whiley/lang/Any:toString : function(any) => string]
main.6 [	convert %4 = %4 any : string]
main.7 [	indirectinvoke %3 (%4) : method(any) => void]
main.8 [	fieldload %8 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.9 [	fieldload %9 = %8 println : {method(any) => void print,method(any) => void println}]
main.10 [	const %12 = 10 : int]
main.11 [	invoke %11 = (%12) IfElse_Valid_2:f : function(int) => int]
Bounds of main{
	D(%5) = [0..2]
	D(%6) = [1..1]
	D(%12) = [10..10]
}
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
Bounds of f{
	D(%0) = [10..11]
	D(%2) = [10..10]
	D(%3) = [1..1]
	D(%5) = [10..10]
	D(%6) = [2..2]
	D(%7) = [0..0]
	D(return) = [0..2]
}
Consistency=true
main.12 [	convert %11 = %11 any : int]
main.13 [	invoke %10 = (%11) whiley/lang/Any:toString : function(any) => string]
main.14 [	convert %10 = %10 any : string]
main.15 [	indirectinvoke %9 (%10) : method(any) => void]
main.16 [	fieldload %14 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.17 [	fieldload %15 = %14 println : {method(any) => void print,method(any) => void println}]
main.18 [	const %18 = 11 : int]
main.19 [	invoke %17 = (%18) IfElse_Valid_2:f : function(int) => int]
Bounds of main{
	D(%5) = [0..2]
	D(%6) = [1..1]
	D(%11) = [0..2]
	D(%12) = [10..10]
	D(%18) = [11..11]
}
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
Bounds of f{
	D(%0) = [11..11]
	D(%2) = [10..10]
	D(%3) = [1..1]
	D(%5) = [10..10]
	D(%6) = [2..2]
	D(%7) = [0..0]
	D(return) = [0..2]
}
Consistency=true
main.20 [	convert %17 = %17 any : int]
main.21 [	invoke %16 = (%17) whiley/lang/Any:toString : function(any) => string]
main.22 [	convert %16 = %16 any : string]
main.23 [	indirectinvoke %15 (%16) : method(any) => void]
main.24 [	fieldload %20 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.25 [	fieldload %21 = %20 println : {method(any) => void print,method(any) => void println}]
main.26 [	const %24 = 1212 : int]
main.27 [	invoke %23 = (%24) IfElse_Valid_2:f : function(int) => int]
Bounds of main{
	D(%5) = [0..2]
	D(%6) = [1..1]
	D(%11) = [0..2]
	D(%12) = [10..10]
	D(%17) = [0..2]
	D(%18) = [11..11]
	D(%24) = [1212..1212]
}
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
Bounds of f{
	D(%0) = [1212..1212]
	D(%2) = [10..10]
	D(%3) = [1..1]
	D(%5) = [10..10]
	D(%6) = [2..2]
	D(%7) = [0..0]
	D(return) = [0..2]
}
Consistency=true
main.28 [	convert %23 = %23 any : int]
main.29 [	invoke %22 = (%23) whiley/lang/Any:toString : function(any) => string]
main.30 [	convert %22 = %22 any : string]
main.31 [	indirectinvoke %21 (%22) : method(any) => void]
main.32 [	fieldload %26 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.33 [	fieldload %27 = %26 println : {method(any) => void print,method(any) => void println}]
main.34 [	const %30 = 1212 : int]
main.35 [	neg %31 = %30 : int]
main.36 [	invoke %29 = (%31) IfElse_Valid_2:f : function(int) => int]
Bounds of main{
	D(%5) = [0..2]
	D(%6) = [1..1]
	D(%11) = [0..2]
	D(%12) = [10..10]
	D(%17) = [0..2]
	D(%18) = [11..11]
	D(%23) = [0..2]
	D(%24) = [1212..1212]
	D(%30) = [1212..1212]
	D(%31) = [-1212..-1212]
}
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
Bounds of f{
	D(%0) = [-1212..11]
	D(%2) = [10..10]
	D(%3) = [1..1]
	D(%5) = [10..10]
	D(%6) = [2..2]
	D(%7) = [0..0]
	D(return) = [0..2]
}
Consistency=true
main.37 [	convert %29 = %29 any : int]
main.38 [	invoke %28 = (%29) whiley/lang/Any:toString : function(any) => string]
main.39 [	convert %28 = %28 any : string]
main.40 [	indirectinvoke %27 (%28) : method(any) => void]
main.41 [	return]
Bounds of main{
	D(%5) = [0..2]
	D(%6) = [1..1]
	D(%11) = [0..2]
	D(%12) = [10..10]
	D(%17) = [0..2]
	D(%18) = [11..11]
	D(%23) = [0..2]
	D(%24) = [1212..1212]
	D(%29) = [0..2]
	D(%30) = [1212..1212]
	D(%31) = [-1212..-1212]
}
Consistency=true