void main([string] args, {method(any) => void print,method(any) => void println} out)
main.0 [	const %3 = 50000 : int]
main.1 [	assert blklab4]
[30;1mmain.2 [	const %6 = 1000000 : int][0m
[30;1mmain.3 [	ifle %3, %6 goto blklab3 : int][0m
[30;1mmain.4 [	fail ""precondition not satisfied""][0m
[30;1mmain.5 [.blklab3][0m
[30;1mmain.6 [.blklab4][0m
main.7 [	invoke %2 = (%3) While:f : function(int) => int]
Bounds at the 7th line number of function main:
	domain(%3)	= [50000..50000]
	value(%3)	= 50000
Consistency=true
int f(int %0)
f.0 [	const %4 = 0 : int]
f.1 [	assign %3 = %4  : int]
f.2 [	const %6 = 0 : int]
f.3 [	assign %5 = %6  : int]
f.4 [	loop (%3, %5)]
f.5 [	ifge %3, %0 goto blklab2 : int]
f.6 [	add %11 = %5, %3 : int]
f.7 [	assign %5 = %11  : int]
f.8 [	const %13 = 1 : int]
f.9 [	add %14 = %3, %13 : int]
f.10 [	assign %3 = %14  : int]
f.11 [	nop]
f.12 [end blklab1]
f.13 [.blklab2]
f.14 [	return %5 : int]
Bounds at the end of function f:
	domain(%0)	= [50000..50000]
	domain(%3)	= [50000..32767]
	domain(%4)	= [0..0]
	domain(%5)	= [0..0]
	domain(%6)	= [0..0]
	domain(%11)	= [0..0]
	domain(%13)	= [1..1]
	domain(%14)	= [1..1]
	domain(return)	= [0..0]
	value(%0)	= 50000
	value(%4)	= 0
	value(%6)	= 0
	value(%13)	= 1
Consistency=false
main.8 [	assign %1 = %2  : int]
main.9 [	fieldload %5 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.10 [	fieldload %6 = %5 println : {method(any) => void print,method(any) => void println}]
main.11 [	const %7 = "Sum=" : string]
main.12 [	assign %8 = %1  : int]
main.13 [	convert %8 = %8 any : int]
main.14 [	invoke %8 = (%8) whiley/lang/Any:toString : function(any) => string]
main.15 [	sappend %9 = %7, %8 : string]
main.16 [	convert %9 = %9 any : string]
main.17 [	indirectinvoke %6 (%9) : method(any) => void]
main.18 [	return]
Bounds at the end of function main:
	domain(%1)	= [0..0]
	domain(%2)	= [0..0]
	domain(%3)	= [50000..50000]
	domain(%8)	= [0..0]
	value(%3)	= 50000
Consistency=true
