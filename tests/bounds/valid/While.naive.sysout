void main([string] args, {method(any) => void print,method(any) => void println} out)
main.0 [	fieldload %2 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.1 [	fieldload %3 = %2 println : {method(any) => void print,method(any) => void println}]
main.2 [	const %4 = "Sum=" : string]
main.3 [	const %6 = 5 : int]
main.4 [	assert blklab4]
[30;1mmain.5 [	const %9 = 1000000 : int][0m
[30;1mmain.6 [	ifle %6, %9 goto blklab3 : int][0m
[30;1mmain.7 [	fail ""precondition not satisfied""][0m
[30;1mmain.8 [.blklab3][0m
[30;1mmain.9 [.blklab4][0m
main.10 [	invoke %5 = (%6) While:f : function(int) => int]
Bounds at the 10th line number of function main:
	domain(%6)	= [5..5]
	value(%6)	= 5
Consistency=true
int f(int %0)
f.0 [	const %4 = 0 : int]
f.1 [	assign %3 = %4  : int]
f.2 [	const %6 = 0 : int]
f.3 [	assign %5 = %6  : int]
f.4 [	loop (%3, %5)]
f.5 [	ifge %3, %0 goto blklab2 : int]
f.6 [	add %11 = %5, %3 : int]
f.7 [	assign %5 = %11  : int]
f.8 [	const %13 = 1 : int]
f.9 [	add %14 = %3, %13 : int]
f.10 [	assign %3 = %14  : int]
f.11 [	nop]
f.12 [end blklab1]
f.13 [.blklab2]
f.14 [	return %5 : int]
Bounds at the end of function f:
	domain(%0)	= [5..5]
	domain(%3)	= [0..5]
	domain(%4)	= [0..0]
	domain(%5)	= [0..infinity]
	domain(%6)	= [0..0]
	domain(%11)	= [0..27]
	domain(%13)	= [1..1]
	domain(%14)	= [1..5]
	domain(return)	= [0..infinity]
	value(%0)	= 5
	value(%4)	= 0
	value(%6)	= 0
	value(%13)	= 1
Consistency=true
main.11 [	convert %5 = %5 any : int]
main.12 [	invoke %5 = (%5) whiley/lang/Any:toString : function(any) => string]
main.13 [	sappend %7 = %4, %5 : string]
main.14 [	convert %7 = %7 any : string]
main.15 [	indirectinvoke %3 (%7) : method(any) => void]
main.16 [	fieldload %9 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.17 [	fieldload %10 = %9 println : {method(any) => void print,method(any) => void println}]
main.18 [	const %11 = "Sum=" : string]
main.19 [	const %13 = 50000 : int]
main.20 [	assert blklab6]
[30;1mmain.21 [	const %16 = 1000000 : int][0m
[30;1mmain.22 [	ifle %13, %16 goto blklab5 : int][0m
[30;1mmain.23 [	fail ""precondition not satisfied""][0m
[30;1mmain.24 [.blklab5][0m
[30;1mmain.25 [.blklab6][0m
main.26 [	invoke %12 = (%13) While:f : function(int) => int]
Bounds at the 26th line number of function main:
	domain(%5)	= [0..infinity]
	domain(%6)	= [5..5]
	domain(%13)	= [50000..50000]
	value(%6)	= 5
	value(%13)	= 50000
Consistency=true
int f(int %0)
f.0 [	const %4 = 0 : int]
f.1 [	assign %3 = %4  : int]
f.2 [	const %6 = 0 : int]
f.3 [	assign %5 = %6  : int]
f.4 [	loop (%3, %5)]
f.5 [	ifge %3, %0 goto blklab2 : int]
f.6 [	add %11 = %5, %3 : int]
f.7 [	assign %5 = %11  : int]
f.8 [	const %13 = 1 : int]
f.9 [	add %14 = %3, %13 : int]
f.10 [	assign %3 = %14  : int]
f.11 [	nop]
f.12 [end blklab1]
f.13 [.blklab2]
f.14 [	return %5 : int]
Bounds at the end of function f:
	domain(%0)	= [50000..50000]
	domain(%3)	= [0..50000]
	domain(%4)	= [0..0]
	domain(%5)	= [0..infinity]
	domain(%6)	= [0..0]
	domain(%11)	= [0..299997]
	domain(%13)	= [1..1]
	domain(%14)	= [1..50000]
	domain(return)	= [0..infinity]
	value(%0)	= 50000
	value(%4)	= 0
	value(%6)	= 0
	value(%13)	= 1
Consistency=true
main.27 [	convert %12 = %12 any : int]
main.28 [	invoke %12 = (%12) whiley/lang/Any:toString : function(any) => string]
main.29 [	sappend %14 = %11, %12 : string]
main.30 [	convert %14 = %14 any : string]
main.31 [	indirectinvoke %10 (%14) : method(any) => void]
main.32 [	return]
Bounds at the end of function main:
	domain(%5)	= [0..infinity]
	domain(%6)	= [5..5]
	domain(%12)	= [0..infinity]
	domain(%13)	= [50000..50000]
	value(%6)	= 5
	value(%13)	= 50000
Consistency=true
