main.0 [	fieldload %2 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.1 [	fieldload %3 = %2 println : {method(any) => void print,method(any) => void println}]
main.2 [	const %6 = 10 : int]
main.3 [	invoke %5 = (%6) IfElse_Valid_2:f : function(int) => int]
	domain(%6)	= [10..10]
	value(%6)	= 10
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
	domain(%0)	= [10..10]
	domain(%2)	= [10..10]
	domain(%5)	= [10..10]
	domain(%7)	= [0..0]
	domain(return)	= [0..0]
	value(%0)	= 10
	value(%2)	= 10
	value(%3)	= 1
	value(%5)	= 10
	value(%6)	= 2
	value(%7)	= 0
Consistency=true
main.4 [	convert %5 = %5 any : int]
main.5 [	invoke %4 = (%5) whiley/lang/Any:toString : function(any) => string]
main.6 [	convert %4 = %4 any : string]
main.7 [	indirectinvoke %3 (%4) : method(any) => void]
main.8 [	fieldload %8 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.9 [	fieldload %9 = %8 println : {method(any) => void print,method(any) => void println}]
main.10 [	const %12 = 11 : int]
main.11 [	invoke %11 = (%12) IfElse_Valid_2:f : function(int) => int]
	domain(%5)	= [0..0]
	domain(%6)	= [10..10]
	domain(%12)	= [11..11]
	value(%6)	= 10
	value(%12)	= 11
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
	domain(%0)	= [11..11]
	domain(%2)	= [10..10]
	domain(%5)	= [10..10]
	domain(%6)	= [2..2]
	domain(return)	= [2..2]
	value(%0)	= 11
	value(%2)	= 10
	value(%3)	= 1
	value(%5)	= 10
	value(%6)	= 2
	value(%7)	= 0
Consistency=true
main.12 [	convert %11 = %11 any : int]
main.13 [	invoke %10 = (%11) whiley/lang/Any:toString : function(any) => string]
main.14 [	convert %10 = %10 any : string]
main.15 [	indirectinvoke %9 (%10) : method(any) => void]
main.16 [	fieldload %14 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.17 [	fieldload %15 = %14 println : {method(any) => void print,method(any) => void println}]
main.18 [	const %18 = 1212 : int]
main.19 [	invoke %17 = (%18) IfElse_Valid_2:f : function(int) => int]
	domain(%5)	= [0..0]
	domain(%6)	= [10..10]
	domain(%11)	= [2..2]
	domain(%12)	= [11..11]
	domain(%18)	= [1212..1212]
	value(%6)	= 10
	value(%12)	= 11
	value(%18)	= 1212
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
	domain(%0)	= [1212..1212]
	domain(%2)	= [10..10]
	domain(%5)	= [10..10]
	domain(%6)	= [2..2]
	domain(return)	= [2..2]
	value(%0)	= 1212
	value(%2)	= 10
	value(%3)	= 1
	value(%5)	= 10
	value(%6)	= 2
	value(%7)	= 0
Consistency=true
main.20 [	convert %17 = %17 any : int]
main.21 [	invoke %16 = (%17) whiley/lang/Any:toString : function(any) => string]
main.22 [	convert %16 = %16 any : string]
main.23 [	indirectinvoke %15 (%16) : method(any) => void]
main.24 [	fieldload %20 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.25 [	fieldload %21 = %20 println : {method(any) => void print,method(any) => void println}]
main.26 [	const %24 = 1212 : int]
main.27 [	neg %25 = %24 : int]
main.28 [	invoke %23 = (%25) IfElse_Valid_2:f : function(int) => int]
	domain(%5)	= [0..0]
	domain(%6)	= [10..10]
	domain(%11)	= [2..2]
	domain(%12)	= [11..11]
	domain(%17)	= [2..2]
	domain(%18)	= [1212..1212]
	domain(%24)	= [1212..1212]
	value(%6)	= 10
	value(%12)	= 11
	value(%18)	= 1212
	value(%24)	= 1212
Consistency=true
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
	domain(%0)	= [-1212..-1212]
	domain(%2)	= [10..10]
	domain(%3)	= [1..1]
	domain(return)	= [1..1]
	value(%2)	= 10
	value(%3)	= 1
	value(%5)	= 10
	value(%6)	= 2
	value(%7)	= 0
Consistency=true
main.29 [	convert %23 = %23 any : int]
main.30 [	invoke %22 = (%23) whiley/lang/Any:toString : function(any) => string]
main.31 [	convert %22 = %22 any : string]
main.32 [	indirectinvoke %21 (%22) : method(any) => void]
main.33 [	return]
	domain(%5)	= [0..0]
	domain(%6)	= [10..10]
	domain(%11)	= [2..2]
	domain(%12)	= [11..11]
	domain(%17)	= [2..2]
	domain(%18)	= [1212..1212]
	domain(%23)	= [1..1]
	domain(%24)	= [1212..1212]
	domain(%25)	= [-1212..-1212]
	value(%6)	= 10
	value(%12)	= 11
	value(%18)	= 1212
	value(%24)	= 1212
Consistency=true
Bound analysis completed.