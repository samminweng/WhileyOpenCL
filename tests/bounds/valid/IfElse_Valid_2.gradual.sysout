void main([string] args, {method(any) => void print,method(any) => void println} out)
main.0 [	const %3 = 1 : int]
main.1 [	invoke %2 = (%3) IfElse_Valid_2:f : function(int) => int]
Bounds at the 1th line number of function main:
	domain(%3)	= [1..1]
	value(%3)	= 1
Consistency=true
int f(int %0)
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = 1 : int]
f.3 [	return %3 : int]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = 2 : int]
f.8 [	return %6 : int]
f.9 [.blklab2]
f.10 [.blklab1]
f.11 [	const %7 = 0 : int]
f.12 [	return %7 : int]
Bounds at the end of function f:
	domain(%0)	= [1..1]
	domain(%2)	= [10..10]
	domain(%3)	= [1..1]
	domain(%5)	= [10..10]
	domain(%6)	= [2..2]
	domain(%7)	= [0..0]
	domain(return)	= [0..2]
	value(%0)	= 1
	value(%2)	= 10
	value(%3)	= 1
	value(%5)	= 10
	value(%6)	= 2
	value(%7)	= 0
Consistency=true
main.2 [	assign %1 = %2  : int]
main.3 [	fieldload %5 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.4 [	fieldload %6 = %5 println : {method(any) => void print,method(any) => void println}]
main.5 [	assign %8 = %1  : int]
main.6 [	convert %8 = %8 any : int]
main.7 [	invoke %7 = (%8) whiley/lang/Any:toString : function(any) => string]
main.8 [	convert %7 = %7 any : string]
main.9 [	indirectinvoke %6 (%7) : method(any) => void]
main.10 [	return]
Bounds at the end of function main:
	domain(%1)	= [0..2]
	domain(%2)	= [0..2]
	domain(%3)	= [1..1]
	domain(%8)	= [0..2]
	value(%3)	= 1
Consistency=true
