main.0 [	fieldload %2 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.1 [	fieldload %3 = %2 println : {method(any) => void print,method(any) => void println}]
main.2 [	const %4 = "Sum=" : string]
main.3 [	const %6 = 5 : int]
main.4 [	assert blklab7]
[30;1mmain.5 [	const %9 = 1000000 : int][0m
[30;1mmain.6 [	ifle %6, %9 goto blklab6 : int][0m
[30;1mmain.7 [	fail ""precondition not satisfied""][0m
[30;1mmain.8 [.blklab6][0m
[30;1mmain.9 [.blklab7][0m
main.10 [	invoke %5 = (%6) Loop:f : function(int) => int]
	domain(%6)	= [5..5]
	value(%6)	= 5
Consistency=true
f.0 [	const %4 = 0 : int]
f.1 [	assign %3 = %4  : int]
f.2 [	const %6 = 0 : int]
f.3 [	assign %5 = %6  : int]
f.4 [	loop (%3, %5)]
f.5 [	ifge %3, %0 goto blklab2 : int]
f.6 [	add %11 = %5, %3 : int]
f.7 [	assign %5 = %11  : int]
f.8 [	const %13 = 1 : int]
f.9 [	add %14 = %3, %13 : int]
f.10 [	assign %3 = %14  : int]
f.11 [	nop]
f.12 [end blklab1]
f.13 [.blklab2]
f.14 [	return %5 : int]
	domain(%0)	= [5..5]
	domain(%3)	= [0..infinity]
	domain(%4)	= [0..0]
	domain(%5)	= [0..infinity]
	domain(%6)	= [0..0]
	domain(%11)	= [0..3]
	domain(%13)	= [1..1]
	domain(%14)	= [1..5]
	domain(return)	= [0..infinity]
	value(%0)	= 5
	value(%4)	= 0
	value(%6)	= 0
	value(%13)	= 1
Consistency=true
main.11 [	convert %5 = %5 any : int]
main.12 [	invoke %5 = (%5) whiley/lang/Any:toString : function(any) => string]
main.13 [	sappend %7 = %4, %5 : string]
main.14 [	convert %7 = %7 any : string]
main.15 [	indirectinvoke %3 (%7) : method(any) => void]
main.16 [	fieldload %9 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.17 [	fieldload %10 = %9 println : {method(any) => void print,method(any) => void println}]
main.18 [	const %11 = "Sum=" : string]
main.19 [	const %13 = 50000 : int]
main.20 [	assert blklab9]
[30;1mmain.21 [	const %16 = 1000000 : int][0m
[30;1mmain.22 [	ifle %13, %16 goto blklab8 : int][0m
[30;1mmain.23 [	fail ""precondition not satisfied""][0m
[30;1mmain.24 [.blklab8][0m
[30;1mmain.25 [.blklab9][0m
main.26 [	invoke %12 = (%13) Loop:f : function(int) => int]
	domain(%5)	= [0..infinity]
	domain(%6)	= [5..5]
	domain(%13)	= [50000..50000]
	value(%6)	= 5
	value(%13)	= 50000
Consistency=true
f.0 [	const %4 = 0 : int]
f.1 [	assign %3 = %4  : int]
f.2 [	const %6 = 0 : int]
f.3 [	assign %5 = %6  : int]
f.4 [	loop (%3, %5)]
f.5 [	ifge %3, %0 goto blklab2 : int]
f.6 [	add %11 = %5, %3 : int]
f.7 [	assign %5 = %11  : int]
f.8 [	const %13 = 1 : int]
f.9 [	add %14 = %3, %13 : int]
f.10 [	assign %3 = %14  : int]
f.11 [	nop]
f.12 [end blklab1]
f.13 [.blklab2]
f.14 [	return %5 : int]
	domain(%0)	= [50000..50000]
	domain(%3)	= [0..infinity]
	domain(%4)	= [0..0]
	domain(%5)	= [0..infinity]
	domain(%6)	= [0..0]
	domain(%11)	= [0..3]
	domain(%13)	= [1..1]
	domain(%14)	= [1..50000]
	domain(return)	= [0..infinity]
	value(%0)	= 50000
	value(%4)	= 0
	value(%6)	= 0
	value(%13)	= 1
Consistency=true
main.27 [	convert %12 = %12 any : int]
main.28 [	invoke %12 = (%12) whiley/lang/Any:toString : function(any) => string]
main.29 [	sappend %14 = %11, %12 : string]
main.30 [	convert %14 = %14 any : string]
main.31 [	indirectinvoke %10 (%14) : method(any) => void]
main.32 [	fieldload %16 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.33 [	fieldload %17 = %16 println : {method(any) => void print,method(any) => void println}]
main.34 [	const %18 = "Sum=" : string]
main.35 [	const %20 = 5 : int]
main.36 [	assert blklab11]
[30;1mmain.37 [	const %23 = 1000000 : int][0m
[30;1mmain.38 [	ifle %20, %23 goto blklab10 : int][0m
[30;1mmain.39 [	fail ""precondition not satisfied""][0m
[30;1mmain.40 [.blklab10][0m
[30;1mmain.41 [.blklab11][0m
main.42 [	invoke %19 = (%20) Loop:f2 : function(int) => int]
	domain(%5)	= [0..infinity]
	domain(%6)	= [5..5]
	domain(%12)	= [0..infinity]
	domain(%13)	= [50000..50000]
	domain(%20)	= [5..5]
	value(%6)	= 5
	value(%13)	= 50000
	value(%20)	= 5
Consistency=true
f2.0 [	assign %4 = %0  : int]
f2.1 [	assign %3 = %4  : int]
f2.2 [	const %6 = 0 : int]
f2.3 [	assign %5 = %6  : int]
f2.4 [	loop (%3, %5)]
f2.5 [	const %8 = 0 : int]
f2.6 [	iflt %3, %8 goto blklab5 : int]
f2.7 [	add %11 = %5, %3 : int]
f2.8 [	assign %5 = %11  : int]
f2.9 [	const %13 = 1 : int]
f2.10 [	sub %14 = %3, %13 : int]
f2.11 [	assign %3 = %14  : int]
f2.12 [	nop]
f2.13 [end blklab4]
f2.14 [.blklab5]
f2.15 [	return %5 : int]
	domain(%0)	= [5..5]
	domain(%3)	= [-infinity..5]
	domain(%4)	= [5..5]
	domain(%5)	= [0..infinity]
	domain(%6)	= [0..0]
	domain(%8)	= [0..0]
	domain(%11)	= [0..15]
	domain(%13)	= [-1..-1]
	domain(%14)	= [-1..4]
	domain(return)	= [0..infinity]
	value(%0)	= 5
	value(%6)	= 0
	value(%8)	= 0
	value(%13)	= 1
Consistency=true
main.43 [	convert %19 = %19 any : int]
main.44 [	invoke %19 = (%19) whiley/lang/Any:toString : function(any) => string]
main.45 [	sappend %21 = %18, %19 : string]
main.46 [	convert %21 = %21 any : string]
main.47 [	indirectinvoke %17 (%21) : method(any) => void]
main.48 [	fieldload %23 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.49 [	fieldload %24 = %23 println : {method(any) => void print,method(any) => void println}]
main.50 [	const %25 = "Sum=" : string]
main.51 [	const %27 = 50000 : int]
main.52 [	assert blklab13]
[30;1mmain.53 [	const %30 = 1000000 : int][0m
[30;1mmain.54 [	ifle %27, %30 goto blklab12 : int][0m
[30;1mmain.55 [	fail ""precondition not satisfied""][0m
[30;1mmain.56 [.blklab12][0m
[30;1mmain.57 [.blklab13][0m
main.58 [	invoke %26 = (%27) Loop:f2 : function(int) => int]
	domain(%5)	= [0..infinity]
	domain(%6)	= [5..5]
	domain(%12)	= [0..infinity]
	domain(%13)	= [50000..50000]
	domain(%19)	= [0..infinity]
	domain(%20)	= [5..5]
	domain(%27)	= [50000..50000]
	value(%6)	= 5
	value(%13)	= 50000
	value(%20)	= 5
	value(%27)	= 50000
Consistency=true
f2.0 [	assign %4 = %0  : int]
f2.1 [	assign %3 = %4  : int]
f2.2 [	const %6 = 0 : int]
f2.3 [	assign %5 = %6  : int]
f2.4 [	loop (%3, %5)]
f2.5 [	const %8 = 0 : int]
f2.6 [	iflt %3, %8 goto blklab5 : int]
f2.7 [	add %11 = %5, %3 : int]
f2.8 [	assign %5 = %11  : int]
f2.9 [	const %13 = 1 : int]
f2.10 [	sub %14 = %3, %13 : int]
f2.11 [	assign %3 = %14  : int]
f2.12 [	nop]
f2.13 [end blklab4]
f2.14 [.blklab5]
f2.15 [	return %5 : int]
	domain(%0)	= [50000..50000]
	domain(%3)	= [-infinity..50000]
	domain(%4)	= [50000..50000]
	domain(%5)	= [0..infinity]
	domain(%6)	= [0..0]
	domain(%8)	= [0..0]
	domain(%11)	= [0..150000]
	domain(%13)	= [-1..-1]
	domain(%14)	= [-1..49999]
	domain(return)	= [0..infinity]
	value(%0)	= 50000
	value(%6)	= 0
	value(%8)	= 0
	value(%13)	= 1
Consistency=true
main.59 [	convert %26 = %26 any : int]
main.60 [	invoke %26 = (%26) whiley/lang/Any:toString : function(any) => string]
main.61 [	sappend %28 = %25, %26 : string]
main.62 [	convert %28 = %28 any : string]
main.63 [	indirectinvoke %24 (%28) : method(any) => void]
main.64 [	return]
	domain(%5)	= [0..infinity]
	domain(%6)	= [5..5]
	domain(%12)	= [0..infinity]
	domain(%13)	= [50000..50000]
	domain(%19)	= [0..infinity]
	domain(%20)	= [5..5]
	domain(%26)	= [0..infinity]
	domain(%27)	= [50000..50000]
	value(%6)	= 5
	value(%13)	= 50000
	value(%20)	= 5
	value(%27)	= 50000
Consistency=true
Bound analysis completed.