main.0 [	const %2 = 0 : int]
main.1 [	assign %1 = %2  : int]
main.2 [	const %4 = 0 : int]
main.3 [	assign %3 = %4  : int]
main.4 [	loop (%1, %3)]
main.5 [	const %6 = 1000000 : int]
main.6 [	ifgt %1, %6 goto blklab1 : int]
main.7 [	add %9 = %3, %1 : int]
main.8 [	assign %3 = %9  : int]
main.9 [	const %11 = 1 : int]
main.10 [	add %12 = %1, %11 : int]
main.11 [	assign %1 = %12  : int]
main.12 [	nop]
main.13 [end blklab0]
main.14 [.blklab1]
main.15 [	fieldload %14 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.16 [	fieldload %15 = %14 println : {method(any) => void print,method(any) => void println}]
main.17 [	const %16 = "Sum=" : string]
main.18 [	assign %17 = %3  : int]
main.19 [	convert %17 = %17 any : int]
main.20 [	invoke %17 = (%17) whiley/lang/Any:toString : function(any) => string]
main.21 [	sappend %18 = %16, %17 : string]
main.22 [	convert %18 = %18 any : string]
main.23 [	indirectinvoke %15 (%18) : method(any) => void]
main.24 [	return]
Bounds of main
{
	D(%1) = [0..1000001]
	D(%2) = [0..0]
	D(%3) = [0..9223372036857775807]
	D(%4) = [0..0]
	D(%6) = [1000000..1000000]
	D(%9) = [-infinity..infinity]
	D(%11) = [1..1]
	D(%12) = [-infinity..infinity]
	D(%17) = [0..9223372036856775807]
}
Consistency=true