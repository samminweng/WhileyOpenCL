main.0 [	fieldload %1 = %0 out : {[[int]] args,{method(any) -> void print,method([int]) -> void print_s,method(any) -> void println,method([int]) -> void println_s} out}]
main.1 [	fieldload %2 = %1 println : {method(any) -> void print,method([int]) -> void print_s,method(any) -> void println,method([int]) -> void println_s}]
main.2 [	const %4 = 5 : int]
main.3 [	invoke %3 = (%4) WhileLoop:f : function(int) -> int]
Bound Analysis of main:
	domain(%4)	=[5..5]
Consistency=true
f.0 [	const %4 = 0 : int]
f.1 [	assign %3 = %4  : int]
f.2 [	assign %1 = %3  : int]
f.3 [	const %6 = 0 : int]
f.4 [	assign %5 = %6  : int]
f.5 [	assign %2 = %5  : int]
f.6 [	loop (%1, %2, %7, %8, %9, %10)]
f.0 [	invariant]
f.1 [	ifge %1, %0 goto blklab1 : int]
f.2 [	add %8 = %2, %1 : int]
f.3 [	assign %2 = %8  : int]
f.4 [	const %9 = 1 : int]
f.5 [	add %10 = %1, %9 : int]
f.6 [	assign %1 = %10  : int]
f.7 [.blklab1]
f.8 [	return %2 : int]
f.9 [	return]
Bound Analysis of f:
	domain(limit)	=[5..5]
	domain(i)	=[5..32767]
	domain(%10)	=[1..32767]
	domain(sum)	=[0..infinity]
	domain(%3)	=[0..0]
	domain(%4)	=[0..0]
	domain(%5)	=[0..0]
	domain(%6)	=[0..0]
	domain(%8)	=[0..infinity]
	domain(%9)	=[1..1]
	domain(return)	=[0..infinity]
Consistency=true
main.4 [	indirectinvoke %2 (%3) : method(any) -> void]
main.5 [	fieldload %5 = %0 out : {[[int]] args,{method(any) -> void print,method([int]) -> void print_s,method(any) -> void println,method([int]) -> void println_s} out}]
main.6 [	fieldload %6 = %5 println : {method(any) -> void print,method([int]) -> void print_s,method(any) -> void println,method([int]) -> void println_s}]
main.7 [	const %8 = 50000 : int]
main.8 [	invoke %7 = (%8) WhileLoop:f : function(int) -> int]
Bound Analysis of main:
	domain(%3)	=[0..infinity]
	domain(%4)	=[5..5]
	domain(%8)	=[50000..50000]
Consistency=true
Bound Analysis of f:
	domain(limit)	=[50000..50000]
	domain(i)	=[50000..2147483647]
	domain(%10)	=[1..2147483647]
	domain(sum)	=[0..infinity]
	domain(%3)	=[0..0]
	domain(%4)	=[0..0]
	domain(%5)	=[0..0]
	domain(%6)	=[0..0]
	domain(%8)	=[0..infinity]
	domain(%9)	=[1..1]
	domain(return)	=[0..infinity]
Consistency=true
main.9 [	indirectinvoke %6 (%7) : method(any) -> void]
main.10 [	return]
Bound Analysis of main:
	domain(%3)	=[0..infinity]
	domain(%4)	=[5..5]
	domain(%7)	=[0..infinity]
	domain(%8)	=[50000..50000]
Consistency=true
Bound analysis completed.