main.0 [	fieldload %2 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.1 [	fieldload %3 = %2 println : {method(any) => void print,method(any) => void println}]
main.2 [	const %5 = 1 : int]
main.3 [	invoke %4 = (%5) IfElse_Valid_1:f : function(int) => string]
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = "LESS THAN" : string]
f.3 [	return %3 : string]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = "GREATER THAN" : string]
f.8 [	return %6 : string]
f.9 [.blklab2]
f.10 [	const %7 = "EQUALS" : string]
f.11 [	return %7 : string]
Bounds of f
{
	D(%0) = [1..11]
	D(%2) = [10..10]
	D(%5) = [10..10]
}
Consistency=true
main.4 [	convert %4 = %4 any : string]
main.5 [	indirectinvoke %3 (%4) : method(any) => void]
main.6 [	fieldload %7 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.7 [	fieldload %8 = %7 println : {method(any) => void print,method(any) => void println}]
main.8 [	const %10 = 10 : int]
main.9 [	invoke %9 = (%10) IfElse_Valid_1:f : function(int) => string]
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = "LESS THAN" : string]
f.3 [	return %3 : string]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = "GREATER THAN" : string]
f.8 [	return %6 : string]
f.9 [.blklab2]
f.10 [	const %7 = "EQUALS" : string]
f.11 [	return %7 : string]
Bounds of f
{
	D(%0) = [10..11]
	D(%2) = [10..10]
	D(%5) = [10..10]
}
Consistency=true
main.10 [	convert %9 = %9 any : string]
main.11 [	indirectinvoke %8 (%9) : method(any) => void]
main.12 [	fieldload %12 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.13 [	fieldload %13 = %12 println : {method(any) => void print,method(any) => void println}]
main.14 [	const %15 = 11 : int]
main.15 [	invoke %14 = (%15) IfElse_Valid_1:f : function(int) => string]
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = "LESS THAN" : string]
f.3 [	return %3 : string]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = "GREATER THAN" : string]
f.8 [	return %6 : string]
f.9 [.blklab2]
f.10 [	const %7 = "EQUALS" : string]
f.11 [	return %7 : string]
Bounds of f
{
	D(%0) = [11..11]
	D(%2) = [10..10]
	D(%5) = [10..10]
}
Consistency=true
main.16 [	convert %14 = %14 any : string]
main.17 [	indirectinvoke %13 (%14) : method(any) => void]
main.18 [	fieldload %17 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.19 [	fieldload %18 = %17 println : {method(any) => void print,method(any) => void println}]
main.20 [	const %20 = 1212 : int]
main.21 [	invoke %19 = (%20) IfElse_Valid_1:f : function(int) => string]
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = "LESS THAN" : string]
f.3 [	return %3 : string]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = "GREATER THAN" : string]
f.8 [	return %6 : string]
f.9 [.blklab2]
f.10 [	const %7 = "EQUALS" : string]
f.11 [	return %7 : string]
Bounds of f
{
	D(%0) = [1212..1212]
	D(%2) = [10..10]
	D(%5) = [10..10]
}
Consistency=true
main.22 [	convert %19 = %19 any : string]
main.23 [	indirectinvoke %18 (%19) : method(any) => void]
main.24 [	fieldload %22 = %0 out : {[string] args,{method(any) => void print,method(any) => void println} out}]
main.25 [	fieldload %23 = %22 println : {method(any) => void print,method(any) => void println}]
main.26 [	const %25 = 1212 : int]
main.27 [	neg %26 = %25 : int]
main.28 [	invoke %24 = (%26) IfElse_Valid_1:f : function(int) => string]
f.0 [	const %2 = 10 : int]
f.1 [	ifge %0, %2 goto blklab0 : int]
f.2 [	const %3 = "LESS THAN" : string]
f.3 [	return %3 : string]
f.4 [.blklab0]
f.5 [	const %5 = 10 : int]
f.6 [	ifle %0, %5 goto blklab2 : int]
f.7 [	const %6 = "GREATER THAN" : string]
f.8 [	return %6 : string]
f.9 [.blklab2]
f.10 [	const %7 = "EQUALS" : string]
f.11 [	return %7 : string]
Bounds of f
{
	D(%0) = [-1212..11]
	D(%2) = [10..10]
	D(%5) = [10..10]
}
Consistency=true
main.29 [	convert %24 = %24 any : string]
main.30 [	indirectinvoke %23 (%24) : method(any) => void]
main.31 [	return]
Bounds of main
{
	D(%4) = [-infinity..infinity]
	D(%5) = [1..1]
	D(%9) = [-infinity..infinity]
	D(%10) = [10..10]
	D(%14) = [-infinity..infinity]
	D(%15) = [11..11]
	D(%19) = [-infinity..infinity]
	D(%20) = [1212..1212]
	D(%24) = [-infinity..infinity]
	D(%25) = [1212..1212]
	D(%26) = [-1212..-1212]
}
Consistency=true