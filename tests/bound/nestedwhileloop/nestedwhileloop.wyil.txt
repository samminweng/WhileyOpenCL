source-file: unknown.whiley

private function f(int) -> (int):
body: 
    const %5 = 0 : int                      
    assign %2 = %5  : int                   
    const %6 = 0 : int                      
    assign %3 = %6  : int                   
    loop (%2, %3, %4, %7, %8, %9, %10, %11, %12, %13)
        ifge %2, %0 goto label0 : int           
        const %7 = 0 : int                      
        assign %4 = %7  : int                   
        loop (%3, %4, %8, %9, %10, %11)         
            ifge %4, %0 goto label1 : int           
            mul %8 = %2, %4 : int                   
            add %9 = %3, %8 : int                   
            assign %3 = %9  : int                   
            const %10 = 1 : int                     
            add %11 = %4, %10 : int                 
            assign %4 = %11  : int                  
    .label1                                 
        const %12 = 1 : int                     
        add %13 = %2, %12 : int                 
        assign %2 = %13  : int                  
.label0                                 
    return %3                               
    return                                  

private method main(whiley/lang/System:Console):
body: 
    const %3 = 5 : int                      
    invoke (%2) = (%3) nestedwhileloop:f : function(int)->(int)
    assign %1 = %2  : int                   
    fieldload %4 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}
    fieldload %5 = %4 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}
    indirectinvoke () = %5 (%1) : method(any)->()
    assert                                  
        const %6 = 100 : int                    
        ifeq %1, %6 goto label2 : int           
        fail                                    
    .label2                                 
    return                                  

