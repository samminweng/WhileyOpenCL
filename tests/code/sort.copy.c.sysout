#include "sort.h"
long long* sort(long long* _items, long long _items_size){
	long long _pivot = 0;
	long long* _lhs = NULL;
	long long _lhs_size = 0;
	long long* _rhs = NULL;
	long long _rhs_size = 0;
	long long _l = 0;
	long long _r = 0;
	long long _i = 0;
	long long _7 = 0;
	long long _8 = 0;
	long long _9 = 0;
	long long _10 = 0;
	long long _11 = 0;
	long long _12 = 0;
	long long* _13 = NULL;
	long long _13_size = 0;
	long long* _14 = NULL;
	long long _14_size = 0;
	long long _15 = 0;
	long long* _16 = NULL;
	long long _16_size = 0;
	long long* _17 = NULL;
	long long _17_size = 0;
	long long* _18 = NULL;
	long long _18_size = 0;
	long long _19 = 0;
	long long* _20 = NULL;
	long long _20_size = 0;
	long long _21 = 0;
	long long _22 = 0;
	long long _23 = 0;
	long long _24 = 0;
	long long _25 = 0;
	long long _26 = 0;
	long long _27 = 0;
	long long _28 = 0;
	long long _29 = 0;
	long long _30 = 0;
	long long _31 = 0;
	long long _32 = 0;
	long long _33 = 0;
	long long _34 = 0;
	long long _35 = 0;
	long long _36 = 0;
	long long _37 = 0;
	long long _38 = 0;
	long long _39 = 0;
	long long _40 = 0;
	long long _41 = 0;
	long long _42 = 0;
	long long _43 = 0;
	long long _44 = 0;
	long long _45 = 0;
	long long _46 = 0;
	long long _47 = 0;
	long long _48 = 0;
	long long _49 = 0;
	long long _50 = 0;
	long long _51 = 0;
	long long _52 = 0;
	long long _53 = 0;
	long long _54 = 0;
	long long _55 = 0;
	//lengthof %7 = %0 : [int]
	_7 = _items_size;
	//const %8 = 1 : int
	_8 = 1;
	//ifle %7, %8 goto blklab0 : int
	if(_7<=_8){goto blklab0;}
	//lengthof %10 = %0 : [int]
	_10 = _items_size;
	//const %11 = 2 : int
	_11 = 2;
	//div %12 = %10, %11 : int
	_12=_10/_11;
	//assign %9 = %12  : int
	_9 = _12;
	//assign %1 = %9  : int
	_pivot = _9;
	//const %15 = 0 : int
	_15 = 0;
	//sublist %16 = %0, %15, %1 : [int]
	_16_size = _pivot - _15;
	_16 = sublist(clone(_items, _items_size), _15, _pivot);
	//invoke %14 = (%16) sort:sort : function([int]) -> [int]
	_14_size=_16_size;
	_14=sort(_16, _16_size);
	//assign %13 = %14  : [int]
	_13_size = _14_size;
	_13 = clone(_14, _14_size);
	//assign %2 = %13  : [int]
	_lhs_size = _13_size;
	_lhs = (long long*)_13;
	//lengthof %19 = %0 : [int]
	_19 = _items_size;
	//sublist %20 = %0, %1, %19 : [int]
	_20_size = _19 - _pivot;
	_20 = sublist(clone(_items, _items_size), _pivot, _19);
	//invoke %18 = (%20) sort:sort : function([int]) -> [int]
	_18_size=_20_size;
	_18=sort(_20, _20_size);
	//assign %17 = %18  : [int]
	_17_size = _18_size;
	_17 = clone(_18, _18_size);
	//assign %3 = %17  : [int]
	_rhs_size = _17_size;
	_rhs = (long long*)_17;
	//const %22 = 0 : int
	_22 = 0;
	//assign %21 = %22  : int
	_21 = _22;
	//assign %4 = %21  : int
	_l = _21;
	//const %24 = 0 : int
	_24 = 0;
	//assign %23 = %24  : int
	_23 = _24;
	//assign %5 = %23  : int
	_r = _23;
	//const %26 = 0 : int
	_26 = 0;
	//assign %25 = %26  : int
	_25 = _26;
	//assign %6 = %25  : int
	_i = _25;
	//lengthof %27 = %0 : [int]
	_27 = _items_size;
	//ifge %6, %27 goto blklab1 : int
	while(_i<_27){
		//lengthof %28 = %2 : [int]
		_28 = _lhs_size;
		//ifge %4, %28 goto blklab1 : int
		if(_l>=_28){goto blklab1;}
		//lengthof %29 = %3 : [int]
		_29 = _rhs_size;
		//ifge %5, %29 goto blklab1 : int
		if(_r>=_29){goto blklab1;}
		//indexof %30 = %2, %4 : [int]
		_30=_lhs[_l];
		//indexof %31 = %3, %5 : [int]
		_31=_rhs[_r];
		//ifgt %30, %31 goto blklab2 : int
		if(_30>_31){goto blklab2;}
		//indexof %32 = %2, %4 : [int]
		_32=_lhs[_l];
		//indexof %33 = %2, %4 : [int]
		_33=_lhs[_l];
		//update %0[%6] = %33 : [int] -> [int]
		_items[_i] = _33;
		//const %34 = 1 : int
		_34 = 1;
		//add %35 = %4, %34 : int
		_35=_l+_34;
		//assign %4 = %35  : int
		_l = _35;
		//goto blklab3
		goto blklab3;
//.blklab2
blklab2:;
		//indexof %36 = %3, %5 : [int]
		_36=_rhs[_r];
		//indexof %37 = %3, %5 : [int]
		_37=_rhs[_r];
		//update %0[%6] = %37 : [int] -> [int]
		_items[_i] = _37;
		//const %38 = 1 : int
		_38 = 1;
		//add %39 = %5, %38 : int
		_39=_r+_38;
		//assign %5 = %39  : int
		_r = _39;
//.blklab3
blklab3:;
		//const %40 = 1 : int
		_40 = 1;
		//add %41 = %6, %40 : int
		_41=_i+_40;
		//assign %6 = %41  : int
		_i = _41;
	}
//.blklab1
blklab1:;
	//lengthof %42 = %2 : [int]
	_42 = _lhs_size;
	//ifge %4, %42 goto blklab4 : int
	while(_l<_42){
		//indexof %43 = %2, %4 : [int]
		_43=_lhs[_l];
		//indexof %44 = %2, %4 : [int]
		_44=_lhs[_l];
		//update %0[%6] = %44 : [int] -> [int]
		_items[_i] = _44;
		//const %45 = 1 : int
		_45 = 1;
		//add %46 = %6, %45 : int
		_46=_i+_45;
		//assign %6 = %46  : int
		_i = _46;
		//const %47 = 1 : int
		_47 = 1;
		//add %48 = %4, %47 : int
		_48=_l+_47;
		//assign %4 = %48  : int
		_l = _48;
	}
//.blklab4
blklab4:;
	//lengthof %49 = %3 : [int]
	_49 = _rhs_size;
	//ifge %5, %49 goto blklab5 : int
	while(_r<_49){
		//indexof %50 = %3, %5 : [int]
		_50=_rhs[_r];
		//indexof %51 = %3, %5 : [int]
		_51=_rhs[_r];
		//update %0[%6] = %51 : [int] -> [int]
		_items[_i] = _51;
		//const %52 = 1 : int
		_52 = 1;
		//add %53 = %6, %52 : int
		_53=_i+_52;
		//assign %6 = %53  : int
		_i = _53;
		//const %54 = 1 : int
		_54 = 1;
		//add %55 = %5, %54 : int
		_55=_r+_54;
		//assign %5 = %55  : int
		_r = _55;
	}
//.blklab5
blklab5:;
//.blklab0
blklab0:;
	//return %0 : [int]
	return _items;
	//return
	exit(0);
}
int main(int argc, char** argv){
	long long* _xs = NULL;
	long long _xs_size = 0;
	long long _max = 0;
	long long* _ys = NULL;
	long long _ys_size = 0;
	long long _index = 0;
	long long* _5 = NULL;
	long long _5_size = 0;
	void* _6 = NULL;
	long long _6_size = 0;
	long long* _7 = NULL;
	long long _7_size = 0;
	void* _8 = NULL;
	long long _8_size = 0;
	long long* _9 = NULL;
	long long _9_size = 0;
	long long _10 = 0;
	long long _11 = 0;
	long long _12 = 0;
	long long _13 = 0;
	long long _14 = 0;
	long long* _15 = NULL;
	long long _15_size = 0;
	long long _16 = 0;
	long long _17 = 0;
	long long _18 = 0;
	long long _19 = 0;
	long long _20 = 0;
	long long* _21 = NULL;
	long long _21_size = 0;
	long long* _22 = NULL;
	long long _22_size = 0;
	long long _23 = 0;
	long long _24 = 0;
	long long _25 = 0;
	long long _26 = 0;
	long long _27 = 0;
	long long* _28 = NULL;
	long long _28_size = 0;
	long long _29 = 0;
	long long _30 = 0;
	long long _31 = 0;
	long long _32 = 0;
	long long _33 = 0;
	long long* _34 = NULL;
	long long _34_size = 0;
	long long* _35 = NULL;
	long long _35_size = 0;
	long long _36 = 0;
	long long _37 = 0;
	long long _38 = 0;
	long long _39 = 0;
	long long* _40 = NULL;
	long long _40_size = 0;
	long long _41 = 0;
	long long _42 = 0;
	long long _43 = 0;
	long long _44 = 0;
	long long* _45 = NULL;
	long long _45_size = 0;
	long long* _46 = NULL;
	long long _46_size = 0;
	long long _47 = 0;
	long long _48 = 0;
	long long _49 = 0;
	long long _50 = 0;
	long long* _51 = NULL;
	long long _51_size = 0;
	long long _52 = 0;
	long long _53 = 0;
	long long _54 = 0;
	long long _55 = 0;
	long long* _56 = NULL;
	long long _56_size = 0;
	long long _57 = 0;
	long long _58 = 0;
	long long _59 = 0;
	long long _60 = 0;
	long long _61 = 0;
	long long* _62 = NULL;
	long long _62_size = 0;
	long long* _63 = NULL;
	long long _63_size = 0;
	long long _64 = 0;
	long long _65 = 0;
	long long _66 = 0;
	long long _67 = 0;
	long long _68 = 0;
	long long* _69 = NULL;
	long long _69_size = 0;
	long long _70 = 0;
	long long _71 = 0;
	long long* _72 = NULL;
	long long _72_size = 0;
	void* _73 = NULL;
	long long _73_size = 0;
	long long _74 = 0;
	long long _75 = 0;
	long long _76 = 0;
	long long* _77 = NULL;
	long long _77_size = 0;
	long long* _78 = NULL;
	long long _78_size = 0;
	long long _79 = 0;
	long long _80 = 0;
	long long* _81 = NULL;
	long long _81_size = 0;
	long long _82 = 0;
	long long _83 = 0;
	long long _84 = 0;
	long long _85 = 0;
	//newlist %6 = () : [void]
	_6_size = 0;
	_6 = malloc(_6_size);
	//assign %5 = %6  : [void]
	_5_size = _6_size;
	_5 = (long long*)_6;
	//assign %1 = %5  : [int]
	_xs_size = _5_size;
	_xs = (long long*)_5;
	//invoke %7 = (%1) sort:sort : function([int]) -> [int]
	_7_size=_xs_size;
	_7=sort(_xs, _xs_size);
	//assign %1 = %7  : [int]
	_xs_size = _7_size;
	_xs = clone(_7, _7_size);
	//assert
	{
		//newlist %8 = () : [void]
		_8_size = 0;
		_8 = malloc(_8_size);
		//ifeq %1, %8 goto blklab6 : [int]
		if(isArrayEqual(_xs, _xs_size, (long long*)_8, _8_size)==1){goto blklab6;}
		//fail
		fprintf(stderr,"fail");
		exit(-1);
//.blklab6
blklab6:;
	//assert
	}
	//const %10 = 4 : int
	_10 = 4;
	//const %11 = 3 : int
	_11 = 3;
	//const %12 = 5 : int
	_12 = 5;
	//const %13 = 2 : int
	_13 = 2;
	//const %14 = 1 : int
	_14 = 1;
	//newlist %15 = (%10, %11, %12, %13, %14) : [int]
	_15_size = 5;
	_15 = (long long*)malloc(_15_size*sizeof(long long));
	_15[0] = _10;	_15[1] = _11;	_15[2] = _12;	_15[3] = _13;	_15[4] = _14;
	//invoke %9 = (%15) sort:sort : function([int]) -> [int]
	_9_size=_15_size;
	_9=sort(_15, _15_size);
	//assign %1 = %9  : [int]
	_xs_size = _9_size;
	_xs = clone(_9, _9_size);
	//assert
	{
		//const %16 = 1 : int
		_16 = 1;
		//const %17 = 2 : int
		_17 = 2;
		//const %18 = 3 : int
		_18 = 3;
		//const %19 = 4 : int
		_19 = 4;
		//const %20 = 5 : int
		_20 = 5;
		//newlist %21 = (%16, %17, %18, %19, %20) : [int]
		_21_size = 5;
		_21 = (long long*)malloc(_21_size*sizeof(long long));
		_21[0] = _16;		_21[1] = _17;		_21[2] = _18;		_21[3] = _19;		_21[4] = _20;
		//ifeq %1, %21 goto blklab7 : [int]
		if(isArrayEqual(_xs, _xs_size,_21, _21_size)==1){goto blklab7;}
		//fail
		fprintf(stderr,"fail");
		exit(-1);
//.blklab7
blklab7:;
	//assert
	}
	//const %23 = 3 : int
	_23 = 3;
	//const %24 = 4 : int
	_24 = 4;
	//const %25 = 7 : int
	_25 = 7;
	//const %26 = 1 : int
	_26 = 1;
	//const %27 = 2 : int
	_27 = 2;
	//newlist %28 = (%23, %24, %25, %26, %27) : [int]
	_28_size = 5;
	_28 = (long long*)malloc(_28_size*sizeof(long long));
	_28[0] = _23;	_28[1] = _24;	_28[2] = _25;	_28[3] = _26;	_28[4] = _27;
	//invoke %22 = (%28) sort:sort : function([int]) -> [int]
	_22_size=_28_size;
	_22=sort(_28, _28_size);
	//assign %1 = %22  : [int]
	_xs_size = _22_size;
	_xs = clone(_22, _22_size);
	//assert
	{
		//const %29 = 1 : int
		_29 = 1;
		//const %30 = 2 : int
		_30 = 2;
		//const %31 = 3 : int
		_31 = 3;
		//const %32 = 4 : int
		_32 = 4;
		//const %33 = 7 : int
		_33 = 7;
		//newlist %34 = (%29, %30, %31, %32, %33) : [int]
		_34_size = 5;
		_34 = (long long*)malloc(_34_size*sizeof(long long));
		_34[0] = _29;		_34[1] = _30;		_34[2] = _31;		_34[3] = _32;		_34[4] = _33;
		//ifeq %1, %34 goto blklab8 : [int]
		if(isArrayEqual(_xs, _xs_size,_34, _34_size)==1){goto blklab8;}
		//fail
		fprintf(stderr,"fail");
		exit(-1);
//.blklab8
blklab8:;
	//assert
	}
	//const %36 = 3 : int
	_36 = 3;
	//const %37 = 4 : int
	_37 = 4;
	//const %38 = 7 : int
	_38 = 7;
	//const %39 = 2 : int
	_39 = 2;
	//newlist %40 = (%36, %37, %38, %39) : [int]
	_40_size = 4;
	_40 = (long long*)malloc(_40_size*sizeof(long long));
	_40[0] = _36;	_40[1] = _37;	_40[2] = _38;	_40[3] = _39;
	//invoke %35 = (%40) sort:sort : function([int]) -> [int]
	_35_size=_40_size;
	_35=sort(_40, _40_size);
	//assign %1 = %35  : [int]
	_xs_size = _35_size;
	_xs = clone(_35, _35_size);
	//assert
	{
		//const %41 = 2 : int
		_41 = 2;
		//const %42 = 3 : int
		_42 = 3;
		//const %43 = 4 : int
		_43 = 4;
		//const %44 = 7 : int
		_44 = 7;
		//newlist %45 = (%41, %42, %43, %44) : [int]
		_45_size = 4;
		_45 = (long long*)malloc(_45_size*sizeof(long long));
		_45[0] = _41;		_45[1] = _42;		_45[2] = _43;		_45[3] = _44;
		//ifeq %1, %45 goto blklab9 : [int]
		if(isArrayEqual(_xs, _xs_size,_45, _45_size)==1){goto blklab9;}
		//fail
		fprintf(stderr,"fail");
		exit(-1);
//.blklab9
blklab9:;
	//assert
	}
	//const %47 = 1 : int
	_47 = 1;
	//const %48 = 2 : int
	_48 = 2;
	//const %49 = 3 : int
	_49 = 3;
	//const %50 = 4 : int
	_50 = 4;
	//newlist %51 = (%47, %48, %49, %50) : [int]
	_51_size = 4;
	_51 = (long long*)malloc(_51_size*sizeof(long long));
	_51[0] = _47;	_51[1] = _48;	_51[2] = _49;	_51[3] = _50;
	//invoke %46 = (%51) sort:sort : function([int]) -> [int]
	_46_size=_51_size;
	_46=sort(_51, _51_size);
	//assign %1 = %46  : [int]
	_xs_size = _46_size;
	_xs = clone(_46, _46_size);
	//assert
	{
		//const %52 = 1 : int
		_52 = 1;
		//const %53 = 2 : int
		_53 = 2;
		//const %54 = 3 : int
		_54 = 3;
		//const %55 = 4 : int
		_55 = 4;
		//newlist %56 = (%52, %53, %54, %55) : [int]
		_56_size = 4;
		_56 = (long long*)malloc(_56_size*sizeof(long long));
		_56[0] = _52;		_56[1] = _53;		_56[2] = _54;		_56[3] = _55;
		//ifeq %1, %56 goto blklab10 : [int]
		if(isArrayEqual(_xs, _xs_size,_56, _56_size)==1){goto blklab10;}
		//fail
		fprintf(stderr,"fail");
		exit(-1);
//.blklab10
blklab10:;
	//assert
	}
	//const %57 = 1 : int
	_57 = 1;
	//const %58 = 2 : int
	_58 = 2;
	//const %59 = 3 : int
	_59 = 3;
	//const %60 = 4 : int
	_60 = 4;
	//const %61 = 5 : int
	_61 = 5;
	//newlist %62 = (%57, %58, %59, %60, %61) : [int]
	_62_size = 5;
	_62 = (long long*)malloc(_62_size*sizeof(long long));
	_62[0] = _57;	_62[1] = _58;	_62[2] = _59;	_62[3] = _60;	_62[4] = _61;
	//assign %1 = %62  : [int]
	_xs_size = _62_size;
	_xs = (long long*)_62;
	//invoke %63 = (%1) sort:sort : function([int]) -> [int]
	_63_size=_xs_size;
	_63=sort(_xs, _xs_size);
	//assign %1 = %63  : [int]
	_xs_size = _63_size;
	_xs = clone(_63, _63_size);
	//assert
	{
		//const %64 = 1 : int
		_64 = 1;
		//const %65 = 2 : int
		_65 = 2;
		//const %66 = 3 : int
		_66 = 3;
		//const %67 = 4 : int
		_67 = 4;
		//const %68 = 5 : int
		_68 = 5;
		//newlist %69 = (%64, %65, %66, %67, %68) : [int]
		_69_size = 5;
		_69 = (long long*)malloc(_69_size*sizeof(long long));
		_69[0] = _64;		_69[1] = _65;		_69[2] = _66;		_69[3] = _67;		_69[4] = _68;
		//ifeq %1, %69 goto blklab11 : [int]
		if(isArrayEqual(_xs, _xs_size,_69, _69_size)==1){goto blklab11;}
		//fail
		fprintf(stderr,"fail");
		exit(-1);
//.blklab11
blklab11:;
	//assert
	}
	//const %71 = 10 : int
	_71 = 10;
	//assign %70 = %71  : int
	_70 = _71;
	//assign %2 = %70  : int
	_max = _70;
	//newlist %73 = () : [void]
	_73_size = 0;
	_73 = malloc(_73_size);
	//assign %72 = %73  : [void]
	_72_size = _73_size;
	_72 = (long long*)_73;
	//assign %3 = %72  : [int]
	_ys_size = _72_size;
	_ys = (long long*)_72;
	//const %75 = 0 : int
	_75 = 0;
	//assign %74 = %75  : int
	_74 = _75;
	//assign %4 = %74  : int
	_index = _74;
	//ifgt %4, %2 goto blklab12 : int
	while(_index<=_max){
		//sub %76 = %2, %4 : int
		_76=_max-_index;
		//newlist %77 = (%76) : [int]
		_77_size = 1;
		_77 = (long long*)malloc(_77_size*sizeof(long long));
		_77[0] = _76;
		//append %78 = %3, %77 : [int]
		_78_size = _ys_size+_77_size;
		_78=append(_ys, _ys_size, _77, _77_size);

		//assign %3 = %78  : [int]
		_ys_size = _78_size;
		_ys = (long long*)_78;
		//const %79 = 1 : int
		_79 = 1;
		//add %80 = %4, %79 : int
		_80=_index+_79;
		//assign %4 = %80  : int
		_index = _80;
	}
//.blklab12
blklab12:;
	//invoke %81 = (%3) sort:sort : function([int]) -> [int]
	_81_size=_ys_size;
	_81=sort(_ys, _ys_size);
	//assign %3 = %81  : [int]
	_ys_size = _81_size;
	_ys = clone(_81, _81_size);
	//const %82 = 0 : int
	_82 = 0;
	//assign %4 = %82  : int
	_index = _82;
	//ifgt %4, %2 goto blklab13 : int
	while(_index<=_max){
		//assert
		{
			//indexof %83 = %3, %4 : [int]
			_83=_ys[_index];
			//ifeq %83, %4 goto blklab14 : int
			if(_83==_index){goto blklab14;}
			//fail
			fprintf(stderr,"fail");
			exit(-1);
//.blklab14
blklab14:;
		//assert
		}
		//const %84 = 1 : int
		_84 = 1;
		//add %85 = %4, %84 : int
		_85=_index+_84;
		//assign %4 = %85  : int
		_index = _85;
	}
//.blklab13
blklab13:;
	//return
	exit(0);
}
