=== Test report for ea_dealloc ArrayAppend ===
The Valgrind memory detector as below:
==8134== Memcheck, a memory error detector
==8134== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8134== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8134== Command: ./ArrayAppend.out
==8134== Parent PID: 8113
==8134== 
==8134== 
==8134== HEAP SUMMARY:
==8134==     in use at exit: 0 bytes in 0 blocks
==8134==   total heap usage: 9 allocs, 9 frees, 8,832 bytes allocated
==8134== 
==8134== All heap blocks were freed -- no leaks are possible
==8134== 
==8134== For counts of detected and suppressed errors, rerun with: -v
==8134== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_naive ArrayAppend ===
The Valgrind memory detector as below:
==8149== Memcheck, a memory error detector
==8149== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8149== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8149== Command: ./ArrayAppend.out
==8149== Parent PID: 8113
==8149== 
==8149== 
==8149== HEAP SUMMARY:
==8149==     in use at exit: 640 bytes in 8 blocks
==8149==   total heap usage: 9 allocs, 1 frees, 8,832 bytes allocated
==8149== 
==8149== 0 bytes in 1 blocks are definitely lost in loss record 3 of 8
==8149==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8149==    by 0x4012B5: copy1DArray_int64_t (Util.c:80)
==8149==    by 0x400E13: main (ArrayAppend.c:100)
==8149== 
==8149== 128 bytes in 1 blocks are definitely lost in loss record 8 of 8
==8149==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8149==    by 0x401109: create1DArray_int64_t (Util.c:23)
==8149==    by 0x400C0A: _test_append_ (ArrayAppend.c:31)
==8149==    by 0x401003: main (ArrayAppend.c:110)
==8149== 
==8149== LEAK SUMMARY:
==8149==    definitely lost: 128 bytes in 2 blocks
==8149==    indirectly lost: 0 bytes in 0 blocks
==8149==      possibly lost: 0 bytes in 0 blocks
==8149==    still reachable: 512 bytes in 6 blocks
==8149==         suppressed: 0 bytes in 0 blocks
==8149== Reachable blocks (those to which a pointer was found) are not shown.
==8149== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8149== 
==8149== For counts of detected and suppressed errors, rerun with: -v
==8149== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_nocopy ArrayAppend ===
The Valgrind memory detector as below:
==8165== Memcheck, a memory error detector
==8165== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8165== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8165== Command: ./ArrayAppend.out
==8165== Parent PID: 8113
==8165== 
==8165== 
==8165== HEAP SUMMARY:
==8165==     in use at exit: 256 bytes in 3 blocks
==8165==   total heap usage: 4 allocs, 1 frees, 8,448 bytes allocated
==8165== 
==8165== LEAK SUMMARY:
==8165==    definitely lost: 0 bytes in 0 blocks
==8165==    indirectly lost: 0 bytes in 0 blocks
==8165==      possibly lost: 0 bytes in 0 blocks
==8165==    still reachable: 256 bytes in 3 blocks
==8165==         suppressed: 0 bytes in 0 blocks
==8165== Reachable blocks (those to which a pointer was found) are not shown.
==8165== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8165== 
==8165== For counts of detected and suppressed errors, rerun with: -v
==8165== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_nocopy_dealloc ArrayAppend ===
The Valgrind memory detector as below:
==8181== Memcheck, a memory error detector
==8181== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8181== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8181== Command: ./ArrayAppend.out
==8181== Parent PID: 8113
==8181== 
==8181== 
==8181== HEAP SUMMARY:
==8181==     in use at exit: 0 bytes in 0 blocks
==8181==   total heap usage: 4 allocs, 4 frees, 8,448 bytes allocated
==8181== 
==8181== All heap blocks were freed -- no leaks are possible
==8181== 
==8181== For counts of detected and suppressed errors, rerun with: -v
==8181== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_dealloc ArrayAppend2 ===
The Valgrind memory detector as below:
==8199== Memcheck, a memory error detector
==8199== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8199== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8199== Command: ./ArrayAppend2.out
==8199== Parent PID: 8113
==8199== 
==8199== 
==8199== HEAP SUMMARY:
==8199==     in use at exit: 0 bytes in 0 blocks
==8199==   total heap usage: 6 allocs, 6 frees, 8,576 bytes allocated
==8199== 
==8199== All heap blocks were freed -- no leaks are possible
==8199== 
==8199== For counts of detected and suppressed errors, rerun with: -v
==8199== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_naive ArrayAppend2 ===
The Valgrind memory detector as below:
==8215== Memcheck, a memory error detector
==8215== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8215== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8215== Command: ./ArrayAppend2.out
==8215== Parent PID: 8113
==8215== 
==8215== 
==8215== HEAP SUMMARY:
==8215==     in use at exit: 384 bytes in 5 blocks
==8215==   total heap usage: 6 allocs, 1 frees, 8,576 bytes allocated
==8215== 
==8215== 0 bytes in 1 blocks are definitely lost in loss record 2 of 5
==8215==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8215==    by 0x400FC1: copy1DArray_int64_t (Util.c:80)
==8215==    by 0x400BE3: main (ArrayAppend2.c:12)
==8215== 
==8215== LEAK SUMMARY:
==8215==    definitely lost: 0 bytes in 1 blocks
==8215==    indirectly lost: 0 bytes in 0 blocks
==8215==      possibly lost: 0 bytes in 0 blocks
==8215==    still reachable: 384 bytes in 4 blocks
==8215==         suppressed: 0 bytes in 0 blocks
==8215== Reachable blocks (those to which a pointer was found) are not shown.
==8215== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8215== 
==8215== For counts of detected and suppressed errors, rerun with: -v
==8215== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_nocopy ArrayAppend2 ===
The Valgrind memory detector as below:
==8230== Memcheck, a memory error detector
==8230== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8230== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8230== Command: ./ArrayAppend2.out
==8230== Parent PID: 8113
==8230== 
==8230== 
==8230== HEAP SUMMARY:
==8230==     in use at exit: 256 bytes in 3 blocks
==8230==   total heap usage: 4 allocs, 1 frees, 8,448 bytes allocated
==8230== 
==8230== LEAK SUMMARY:
==8230==    definitely lost: 0 bytes in 0 blocks
==8230==    indirectly lost: 0 bytes in 0 blocks
==8230==      possibly lost: 0 bytes in 0 blocks
==8230==    still reachable: 256 bytes in 3 blocks
==8230==         suppressed: 0 bytes in 0 blocks
==8230== Reachable blocks (those to which a pointer was found) are not shown.
==8230== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8230== 
==8230== For counts of detected and suppressed errors, rerun with: -v
==8230== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_nocopy_dealloc ArrayAppend2 ===
The Valgrind memory detector as below:
==8245== Memcheck, a memory error detector
==8245== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8245== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8245== Command: ./ArrayAppend2.out
==8245== Parent PID: 8113
==8245== 
==8245== 
==8245== HEAP SUMMARY:
==8245==     in use at exit: 0 bytes in 0 blocks
==8245==   total heap usage: 4 allocs, 4 frees, 8,448 bytes allocated
==8245== 
==8245== All heap blocks were freed -- no leaks are possible
==8245== 
==8245== For counts of detected and suppressed errors, rerun with: -v
==8245== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
 This is a test 



=== Test report for ea_dealloc ArrayAppend3 ===
The Valgrind memory detector as below:
==8263== Memcheck, a memory error detector
==8263== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8263== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8263== Command: ./ArrayAppend3.out
==8263== Parent PID: 8113
==8263== 
==8263== 
==8263== HEAP SUMMARY:
==8263==     in use at exit: 0 bytes in 0 blocks
==8263==   total heap usage: 83 allocs, 83 frees, 20,032 bytes allocated
==8263== 
==8263== All heap blocks were freed -- no leaks are possible
==8263== 
==8263== For counts of detected and suppressed errors, rerun with: -v
==8263== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1



=== Test report for ea_naive ArrayAppend3 ===
The Valgrind memory detector as below:
==8279== Memcheck, a memory error detector
==8279== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8279== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8279== Command: ./ArrayAppend3.out
==8279== Parent PID: 8113
==8279== 
==8279== 
==8279== HEAP SUMMARY:
==8279==     in use at exit: 11,840 bytes in 82 blocks
==8279==   total heap usage: 83 allocs, 1 frees, 20,032 bytes allocated
==8279== 
==8279== 0 bytes in 1 blocks are definitely lost in loss record 1 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x400CC3: _toString_ (ArrayAppend3.c:32)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 0 bytes in 1 blocks are definitely lost in loss record 2 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x401864: copy1DArray_int64_t (Util.c:80)
==8279==    by 0x400CEB: _toString_ (ArrayAppend3.c:34)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 0 bytes in 1 blocks are definitely lost in loss record 3 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x40125B: _toString_ (ArrayAppend3.c:153)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 48 bytes in 6 blocks are definitely lost in loss record 5 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4024EB: Int_toString (WyRT.c:16)
==8279==    by 0x400E63: _toString_ (ArrayAppend3.c:78)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 80 bytes in 5 blocks are definitely lost in loss record 9 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x400DAC: _toString_ (ArrayAppend3.c:62)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 144 bytes in 6 blocks are definitely lost in loss record 10 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x400EEC: _toString_ (ArrayAppend3.c:87)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,000 bytes in 5 blocks are definitely lost in loss record 12 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x401864: copy1DArray_int64_t (Util.c:80)
==8279==    by 0x40120D: _toString_ (ArrayAppend3.c:138)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,080 bytes in 5 blocks are definitely lost in loss record 13 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x402708: Array_Append (WyRT.c:62)
==8279==    by 0x400E01: _toString_ (ArrayAppend3.c:66)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,080 bytes in 5 blocks are definitely lost in loss record 14 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x401864: copy1DArray_int64_t (Util.c:80)
==8279==    by 0x400E2F: _toString_ (ArrayAppend3.c:69)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,128 bytes in 6 blocks are definitely lost in loss record 15 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x402708: Array_Append (WyRT.c:62)
==8279==    by 0x400E98: _toString_ (ArrayAppend3.c:82)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,128 bytes in 6 blocks are definitely lost in loss record 16 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x401864: copy1DArray_int64_t (Util.c:80)
==8279==    by 0x400EC6: _toString_ (ArrayAppend3.c:85)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,272 bytes in 6 blocks are definitely lost in loss record 18 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x402708: Array_Append (WyRT.c:62)
==8279==    by 0x400F53: _toString_ (ArrayAppend3.c:91)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,272 bytes in 6 blocks are definitely lost in loss record 19 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x401864: copy1DArray_int64_t (Util.c:80)
==8279==    by 0x400F81: _toString_ (ArrayAppend3.c:94)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,416 bytes in 6 blocks are definitely lost in loss record 20 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x4016B8: create1DArray_int64_t (Util.c:23)
==8279==    by 0x402708: Array_Append (WyRT.c:62)
==8279==    by 0x4011DF: _toString_ (ArrayAppend3.c:135)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== 1,536 (384 direct, 1,152 indirect) bytes in 6 blocks are definitely lost in loss record 21 of 21
==8279==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8279==    by 0x401E2C: create2DArray_int64_t_empty (Util.c:236)
==8279==    by 0x400FAD: _toString_ (ArrayAppend3.c:96)
==8279==    by 0x4015CE: main (ArrayAppend3.c:220)
==8279== 
==8279== LEAK SUMMARY:
==8279==    definitely lost: 10,032 bytes in 71 blocks
==8279==    indirectly lost: 1,152 bytes in 6 blocks
==8279==      possibly lost: 0 bytes in 0 blocks
==8279==    still reachable: 656 bytes in 5 blocks
==8279==         suppressed: 0 bytes in 0 blocks
==8279== Reachable blocks (those to which a pointer was found) are not shown.
==8279== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8279== 
==8279== For counts of detected and suppressed errors, rerun with: -v
==8279== ERROR SUMMARY: 15 errors from 15 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1



=== Test report for ea_nocopy ArrayAppend3 ===
The Valgrind memory detector as below:
==8294== Memcheck, a memory error detector
==8294== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8294== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8294== Command: ./ArrayAppend3.out
==8294== Parent PID: 8113
==8294== 
==8294== 
==8294== HEAP SUMMARY:
==8294==     in use at exit: 6,816 bytes in 56 blocks
==8294==   total heap usage: 57 allocs, 1 frees, 15,008 bytes allocated
==8294== 
==8294== 0 bytes in 1 blocks are definitely lost in loss record 1 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x400CC3: _toString_ (ArrayAppend3.c:32)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 0 bytes in 1 blocks are definitely lost in loss record 2 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x401201: _toString_ (ArrayAppend3.c:163)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 48 bytes in 6 blocks are definitely lost in loss record 4 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x402405: Int_toString (WyRT.c:16)
==8294==    by 0x400E3F: _toString_ (ArrayAppend3.c:84)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 80 bytes in 5 blocks are definitely lost in loss record 6 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x400D9A: _toString_ (ArrayAppend3.c:66)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 144 bytes in 6 blocks are definitely lost in loss record 7 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x400EB6: _toString_ (ArrayAppend3.c:94)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 1,000 bytes in 5 blocks are definitely lost in loss record 9 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x402622: Array_Append (WyRT.c:62)
==8294==    by 0x401197: _toString_ (ArrayAppend3.c:143)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 1,080 bytes in 5 blocks are definitely lost in loss record 10 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x402622: Array_Append (WyRT.c:62)
==8294==    by 0x400DEF: _toString_ (ArrayAppend3.c:70)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 1,128 bytes in 6 blocks are definitely lost in loss record 11 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x402622: Array_Append (WyRT.c:62)
==8294==    by 0x400E74: _toString_ (ArrayAppend3.c:88)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 1,272 bytes in 6 blocks are definitely lost in loss record 13 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x4015D2: create1DArray_int64_t (Util.c:23)
==8294==    by 0x402622: Array_Append (WyRT.c:62)
==8294==    by 0x400F1D: _toString_ (ArrayAppend3.c:98)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== 1,536 (384 direct, 1,152 indirect) bytes in 6 blocks are definitely lost in loss record 14 of 14
==8294==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8294==    by 0x401D46: create2DArray_int64_t_empty (Util.c:236)
==8294==    by 0x400F65: _toString_ (ArrayAppend3.c:104)
==8294==    by 0x4014E8: main (ArrayAppend3.c:231)
==8294== 
==8294== LEAK SUMMARY:
==8294==    definitely lost: 5,136 bytes in 47 blocks
==8294==    indirectly lost: 1,152 bytes in 6 blocks
==8294==      possibly lost: 0 bytes in 0 blocks
==8294==    still reachable: 528 bytes in 3 blocks
==8294==         suppressed: 0 bytes in 0 blocks
==8294== Reachable blocks (those to which a pointer was found) are not shown.
==8294== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8294== 
==8294== For counts of detected and suppressed errors, rerun with: -v
==8294== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1



=== Test report for ea_nocopy_dealloc ArrayAppend3 ===
The Valgrind memory detector as below:
==8309== Memcheck, a memory error detector
==8309== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8309== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8309== Command: ./ArrayAppend3.out
==8309== Parent PID: 8113
==8309== 
==8309== 
==8309== HEAP SUMMARY:
==8309==     in use at exit: 0 bytes in 0 blocks
==8309==   total heap usage: 57 allocs, 57 frees, 15,008 bytes allocated
==8309== 
==8309== All heap blocks were freed -- no leaks are possible
==8309== 
==8309== For counts of detected and suppressed errors, rerun with: -v
==8309== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1



=== Test report for ea_dealloc bubblesort ===
The Valgrind memory detector as below:
==8327== Memcheck, a memory error detector
==8327== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8327== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8327== Command: ./bubblesort.out
==8327== Parent PID: 8113
==8327== 
==8327== 
==8327== HEAP SUMMARY:
==8327==     in use at exit: 0 bytes in 0 blocks
==8327==   total heap usage: 27 allocs, 27 frees, 9,512 bytes allocated
==8327== 
==8327== All heap blocks were freed -- no leaks are possible
==8327== 
==8327== For counts of detected and suppressed errors, rerun with: -v
==8327== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
[1,2,3,4,7]
[2,3,4,7]
[1,2,3,4]
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,10]
Pass BubbleSort test case



=== Test report for ea_naive bubblesort ===
The Valgrind memory detector as below:
==8343== Memcheck, a memory error detector
==8343== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8343== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8343== Command: ./bubblesort.out
==8343== Parent PID: 8113
==8343== 
==8343== 
==8343== HEAP SUMMARY:
==8343==     in use at exit: 1,320 bytes in 26 blocks
==8343==   total heap usage: 27 allocs, 1 frees, 9,512 bytes allocated
==8343== 
==8343== 32 bytes in 1 blocks are definitely lost in loss record 7 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x4012ED: main (bubblesort.c:251)
==8343== 
==8343== 32 bytes in 1 blocks are definitely lost in loss record 8 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x4013B6: main (bubblesort.c:259)
==8343== 
==8343== 32 bytes in 1 blocks are definitely lost in loss record 9 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x401592: main (bubblesort.c:300)
==8343== 
==8343== 32 bytes in 1 blocks are definitely lost in loss record 10 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x40165B: main (bubblesort.c:308)
==8343== 
==8343== 40 bytes in 1 blocks are definitely lost in loss record 18 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x401028: main (bubblesort.c:200)
==8343== 
==8343== 40 bytes in 1 blocks are definitely lost in loss record 19 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x4010F1: main (bubblesort.c:208)
==8343== 
==8343== 40 bytes in 1 blocks are definitely lost in loss record 20 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x401857: main (bubblesort.c:351)
==8343== 
==8343== 80 bytes in 1 blocks are definitely lost in loss record 25 of 26
==8343==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8343==    by 0x402229: copy1DArray_int64_t (Util.c:80)
==8343==    by 0x401ADF: main (bubblesort.c:403)
==8343== 
==8343== LEAK SUMMARY:
==8343==    definitely lost: 328 bytes in 8 blocks
==8343==    indirectly lost: 0 bytes in 0 blocks
==8343==      possibly lost: 0 bytes in 0 blocks
==8343==    still reachable: 992 bytes in 18 blocks
==8343==         suppressed: 0 bytes in 0 blocks
==8343== Reachable blocks (those to which a pointer was found) are not shown.
==8343== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8343== 
==8343== For counts of detected and suppressed errors, rerun with: -v
==8343== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
[1,2,3,4,7]
[2,3,4,7]
[1,2,3,4]
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,10]
Pass BubbleSort test case



=== Test report for ea_nocopy bubblesort ===
The Valgrind memory detector as below:
==8358== Memcheck, a memory error detector
==8358== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8358== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8358== Command: ./bubblesort.out
==8358== Parent PID: 8113
==8358== 
==8358== 
==8358== HEAP SUMMARY:
==8358==     in use at exit: 648 bytes in 11 blocks
==8358==   total heap usage: 12 allocs, 1 frees, 8,840 bytes allocated
==8358== 
==8358== LEAK SUMMARY:
==8358==    definitely lost: 0 bytes in 0 blocks
==8358==    indirectly lost: 0 bytes in 0 blocks
==8358==      possibly lost: 0 bytes in 0 blocks
==8358==    still reachable: 648 bytes in 11 blocks
==8358==         suppressed: 0 bytes in 0 blocks
==8358== Reachable blocks (those to which a pointer was found) are not shown.
==8358== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8358== 
==8358== For counts of detected and suppressed errors, rerun with: -v
==8358== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
[1,2,3,4,7]
[2,3,4,7]
[1,2,3,4]
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,10]
Pass BubbleSort test case



=== Test report for ea_nocopy_dealloc bubblesort ===
The Valgrind memory detector as below:
==8373== Memcheck, a memory error detector
==8373== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8373== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8373== Command: ./bubblesort.out
==8373== Parent PID: 8113
==8373== 
==8373== 
==8373== HEAP SUMMARY:
==8373==     in use at exit: 0 bytes in 0 blocks
==8373==   total heap usage: 12 allocs, 12 frees, 8,840 bytes allocated
==8373== 
==8373== All heap blocks were freed -- no leaks are possible
==8373== 
==8373== For counts of detected and suppressed errors, rerun with: -v
==8373== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
[1,2,3,4,7]
[2,3,4,7]
[1,2,3,4]
[1,2,3,4,5]
[1,2,3,4,5,6,7,8,9,10]
Pass BubbleSort test case



=== Test report for ea_dealloc CallerMacro1 ===
The Valgrind memory detector as below:
==8392== Memcheck, a memory error detector
==8392== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8392== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8392== Command: ./CallerMacro1.out
==8392== Parent PID: 8113
==8392== 
==8392== 
==8392== HEAP SUMMARY:
==8392==     in use at exit: 0 bytes in 0 blocks
==8392==   total heap usage: 7 allocs, 7 frees, 8,368 bytes allocated
==8392== 
==8392== All heap blocks were freed -- no leaks are possible
==8392== 
==8392== For counts of detected and suppressed errors, rerun with: -v
==8392== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0



=== Test report for ea_naive CallerMacro1 ===
The Valgrind memory detector as below:
==8407== Memcheck, a memory error detector
==8407== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8407== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8407== Command: ./CallerMacro1.out
==8407== Parent PID: 8113
==8407== 
==8407== 
==8407== HEAP SUMMARY:
==8407==     in use at exit: 176 bytes in 6 blocks
==8407==   total heap usage: 7 allocs, 1 frees, 8,368 bytes allocated
==8407== 
==8407== 24 bytes in 1 blocks are definitely lost in loss record 3 of 6
==8407==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8407==    by 0x400FAF: create1DArray_int64_t (Util.c:23)
==8407==    by 0x400C48: _g1_ (CallerMacro1.c:29)
==8407==    by 0x400D92: main (CallerMacro1.c:61)
==8407== 
==8407== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==8407==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8407==    by 0x400C83: _g1_ (CallerMacro1.c:37)
==8407==    by 0x400D92: main (CallerMacro1.c:61)
==8407== 
==8407== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==8407==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8407==    by 0x40115B: copy1DArray_int64_t (Util.c:80)
==8407==    by 0x400D0C: _g1_ (CallerMacro1.c:41)
==8407==    by 0x400D92: main (CallerMacro1.c:61)
==8407== 
==8407== LEAK SUMMARY:
==8407==    definitely lost: 72 bytes in 3 blocks
==8407==    indirectly lost: 0 bytes in 0 blocks
==8407==      possibly lost: 0 bytes in 0 blocks
==8407==    still reachable: 104 bytes in 3 blocks
==8407==         suppressed: 0 bytes in 0 blocks
==8407== Reachable blocks (those to which a pointer was found) are not shown.
==8407== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8407== 
==8407== For counts of detected and suppressed errors, rerun with: -v
==8407== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0



=== Test report for ea_nocopy CallerMacro1 ===
The Valgrind memory detector as below:
==8422== Memcheck, a memory error detector
==8422== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8422== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8422== Command: ./CallerMacro1.out
==8422== Parent PID: 8113
==8422== 
==8422== 
==8422== HEAP SUMMARY:
==8422==     in use at exit: 104 bytes in 3 blocks
==8422==   total heap usage: 4 allocs, 1 frees, 8,296 bytes allocated
==8422== 
==8422== 24 bytes in 1 blocks are definitely lost in loss record 2 of 3
==8422==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8422==    by 0x400C74: _g1_ (CallerMacro1.c:38)
==8422==    by 0x400D74: main (CallerMacro1.c:64)
==8422== 
==8422== LEAK SUMMARY:
==8422==    definitely lost: 24 bytes in 1 blocks
==8422==    indirectly lost: 0 bytes in 0 blocks
==8422==      possibly lost: 0 bytes in 0 blocks
==8422==    still reachable: 80 bytes in 2 blocks
==8422==         suppressed: 0 bytes in 0 blocks
==8422== Reachable blocks (those to which a pointer was found) are not shown.
==8422== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8422== 
==8422== For counts of detected and suppressed errors, rerun with: -v
==8422== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0



=== Test report for ea_nocopy_dealloc CallerMacro1 ===
The Valgrind memory detector as below:
==8438== Memcheck, a memory error detector
==8438== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8438== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8438== Command: ./CallerMacro1.out
==8438== Parent PID: 8113
==8438== 
==8438== 
==8438== HEAP SUMMARY:
==8438==     in use at exit: 0 bytes in 0 blocks
==8438==   total heap usage: 4 allocs, 4 frees, 8,296 bytes allocated
==8438== 
==8438== All heap blocks were freed -- no leaks are possible
==8438== 
==8438== For counts of detected and suppressed errors, rerun with: -v
==8438== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0



=== Test report for ea_dealloc CallerMacro2 ===
The Valgrind memory detector as below:
==8457== Memcheck, a memory error detector
==8457== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8457== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8457== Command: ./CallerMacro2.out
==8457== Parent PID: 8113
==8457== 
==8457== 
==8457== HEAP SUMMARY:
==8457==     in use at exit: 0 bytes in 0 blocks
==8457==   total heap usage: 13 allocs, 13 frees, 8,544 bytes allocated
==8457== 
==8457== All heap blocks were freed -- no leaks are possible
==8457== 
==8457== For counts of detected and suppressed errors, rerun with: -v
==8457== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0
b[0] = 11



=== Test report for ea_naive CallerMacro2 ===
The Valgrind memory detector as below:
==8472== Memcheck, a memory error detector
==8472== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8472== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8472== Command: ./CallerMacro2.out
==8472== Parent PID: 8113
==8472== 
==8472== 
==8472== HEAP SUMMARY:
==8472==     in use at exit: 352 bytes in 12 blocks
==8472==   total heap usage: 13 allocs, 1 frees, 8,544 bytes allocated
==8472== 
==8472== 24 bytes in 1 blocks are definitely lost in loss record 5 of 12
==8472==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8472==    by 0x4011FF: create1DArray_int64_t (Util.c:23)
==8472==    by 0x400C4F: _g3_ (CallerMacro2.c:30)
==8472==    by 0x400E29: main (CallerMacro2.c:89)
==8472== 
==8472== 24 bytes in 1 blocks are definitely lost in loss record 6 of 12
==8472==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8472==    by 0x400C8A: _g3_ (CallerMacro2.c:38)
==8472==    by 0x400E29: main (CallerMacro2.c:89)
==8472== 
==8472== 24 bytes in 1 blocks are definitely lost in loss record 7 of 12
==8472==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8472==    by 0x4013AB: copy1DArray_int64_t (Util.c:80)
==8472==    by 0x400D13: _g3_ (CallerMacro2.c:42)
==8472==    by 0x400E29: main (CallerMacro2.c:89)
==8472== 
==8472== 24 bytes in 1 blocks are definitely lost in loss record 8 of 12
==8472==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8472==    by 0x4011FF: create1DArray_int64_t (Util.c:23)
==8472==    by 0x400C4F: _g3_ (CallerMacro2.c:30)
==8472==    by 0x400FD0: main (CallerMacro2.c:133)
==8472== 
==8472== 24 bytes in 1 blocks are definitely lost in loss record 9 of 12
==8472==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8472==    by 0x4013AB: copy1DArray_int64_t (Util.c:80)
==8472==    by 0x400C6E: _g3_ (CallerMacro2.c:32)
==8472==    by 0x400FD0: main (CallerMacro2.c:133)
==8472== 
==8472== 24 bytes in 1 blocks are definitely lost in loss record 10 of 12
==8472==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8472==    by 0x400C8A: _g3_ (CallerMacro2.c:38)
==8472==    by 0x400FD0: main (CallerMacro2.c:133)
==8472== 
==8472== LEAK SUMMARY:
==8472==    definitely lost: 144 bytes in 6 blocks
==8472==    indirectly lost: 0 bytes in 0 blocks
==8472==      possibly lost: 0 bytes in 0 blocks
==8472==    still reachable: 208 bytes in 6 blocks
==8472==         suppressed: 0 bytes in 0 blocks
==8472== Reachable blocks (those to which a pointer was found) are not shown.
==8472== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8472== 
==8472== For counts of detected and suppressed errors, rerun with: -v
==8472== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0
b[0] = 11



=== Test report for ea_nocopy CallerMacro2 ===
The Valgrind memory detector as below:
==8487== Memcheck, a memory error detector
==8487== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8487== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8487== Command: ./CallerMacro2.out
==8487== Parent PID: 8113
==8487== 
==8487== 
==8487== HEAP SUMMARY:
==8487==     in use at exit: 208 bytes in 6 blocks
==8487==   total heap usage: 7 allocs, 1 frees, 8,400 bytes allocated
==8487== 
==8487== 24 bytes in 1 blocks are definitely lost in loss record 3 of 6
==8487==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8487==    by 0x400C7B: _g3_ (CallerMacro2.c:39)
==8487==    by 0x400E0B: main (CallerMacro2.c:92)
==8487== 
==8487== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==8487==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8487==    by 0x4011BD: create1DArray_int64_t (Util.c:23)
==8487==    by 0x400C4F: _g3_ (CallerMacro2.c:30)
==8487==    by 0x400FA0: main (CallerMacro2.c:137)
==8487== 
==8487== LEAK SUMMARY:
==8487==    definitely lost: 48 bytes in 2 blocks
==8487==    indirectly lost: 0 bytes in 0 blocks
==8487==      possibly lost: 0 bytes in 0 blocks
==8487==    still reachable: 160 bytes in 4 blocks
==8487==         suppressed: 0 bytes in 0 blocks
==8487== Reachable blocks (those to which a pointer was found) are not shown.
==8487== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8487== 
==8487== For counts of detected and suppressed errors, rerun with: -v
==8487== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0
b[0] = 11



=== Test report for ea_nocopy_dealloc CallerMacro2 ===
The Valgrind memory detector as below:
==8503== Memcheck, a memory error detector
==8503== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8503== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8503== Command: ./CallerMacro2.out
==8503== Parent PID: 8113
==8503== 
==8503== 
==8503== HEAP SUMMARY:
==8503==     in use at exit: 0 bytes in 0 blocks
==8503==   total heap usage: 7 allocs, 7 frees, 8,400 bytes allocated
==8503== 
==8503== All heap blocks were freed -- no leaks are possible
==8503== 
==8503== For counts of detected and suppressed errors, rerun with: -v
==8503== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 0
b[0] = 11



=== Test report for ea_dealloc CallerMacro3 ===
The Valgrind memory detector as below:
==8521== Memcheck, a memory error detector
==8521== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8521== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8521== Command: ./CallerMacro3.out
==8521== Parent PID: 8113
==8521== 
==8521== 
==8521== HEAP SUMMARY:
==8521==     in use at exit: 0 bytes in 0 blocks
==8521==   total heap usage: 7 allocs, 7 frees, 8,624 bytes allocated
==8521== 
==8521== All heap blocks were freed -- no leaks are possible
==8521== 
==8521== For counts of detected and suppressed errors, rerun with: -v
==8521== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[1] = 1
b[1] = 0



=== Test report for ea_naive CallerMacro3 ===
The Valgrind memory detector as below:
==8536== Memcheck, a memory error detector
==8536== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8536== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8536== Command: ./CallerMacro3.out
==8536== Parent PID: 8113
==8536== 
==8536== 
==8536== HEAP SUMMARY:
==8536==     in use at exit: 432 bytes in 6 blocks
==8536==   total heap usage: 7 allocs, 1 frees, 8,624 bytes allocated
==8536== 
==8536== LEAK SUMMARY:
==8536==    definitely lost: 0 bytes in 0 blocks
==8536==    indirectly lost: 0 bytes in 0 blocks
==8536==      possibly lost: 0 bytes in 0 blocks
==8536==    still reachable: 432 bytes in 6 blocks
==8536==         suppressed: 0 bytes in 0 blocks
==8536== Reachable blocks (those to which a pointer was found) are not shown.
==8536== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8536== 
==8536== For counts of detected and suppressed errors, rerun with: -v
==8536== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[1] = 1
b[1] = 0



=== Test report for ea_nocopy CallerMacro3 ===
The Valgrind memory detector as below:
==8552== Memcheck, a memory error detector
==8552== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8552== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8552== Command: ./CallerMacro3.out
==8552== Parent PID: 8113
==8552== 
==8552== 
==8552== HEAP SUMMARY:
==8552==     in use at exit: 272 bytes in 4 blocks
==8552==   total heap usage: 5 allocs, 1 frees, 8,464 bytes allocated
==8552== 
==8552== LEAK SUMMARY:
==8552==    definitely lost: 0 bytes in 0 blocks
==8552==    indirectly lost: 0 bytes in 0 blocks
==8552==      possibly lost: 0 bytes in 0 blocks
==8552==    still reachable: 272 bytes in 4 blocks
==8552==         suppressed: 0 bytes in 0 blocks
==8552== Reachable blocks (those to which a pointer was found) are not shown.
==8552== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8552== 
==8552== For counts of detected and suppressed errors, rerun with: -v
==8552== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[1] = 1
b[1] = 0



=== Test report for ea_nocopy_dealloc CallerMacro3 ===
The Valgrind memory detector as below:
==8567== Memcheck, a memory error detector
==8567== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8567== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8567== Command: ./CallerMacro3.out
==8567== Parent PID: 8113
==8567== 
==8567== 
==8567== HEAP SUMMARY:
==8567==     in use at exit: 0 bytes in 0 blocks
==8567==   total heap usage: 5 allocs, 5 frees, 8,464 bytes allocated
==8567== 
==8567== All heap blocks were freed -- no leaks are possible
==8567== 
==8567== For counts of detected and suppressed errors, rerun with: -v
==8567== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[1] = 1
b[1] = 0



=== Test report for ea_dealloc CallerMacro4 ===
The Valgrind memory detector as below:
==8585== Memcheck, a memory error detector
==8585== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8585== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8585== Command: ./CallerMacro4.out
==8585== Parent PID: 8113
==8585== 
==8585== 
==8585== HEAP SUMMARY:
==8585==     in use at exit: 0 bytes in 0 blocks
==8585==   total heap usage: 30 allocs, 30 frees, 8,984 bytes allocated
==8585== 
==8585== All heap blocks were freed -- no leaks are possible
==8585== 
==8585== For counts of detected and suppressed errors, rerun with: -v
==8585== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 1



=== Test report for ea_naive CallerMacro4 ===
The Valgrind memory detector as below:
==8601== Memcheck, a memory error detector
==8601== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8601== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8601== Command: ./CallerMacro4.out
==8601== Parent PID: 8113
==8601== 
==8601== 
==8601== HEAP SUMMARY:
==8601==     in use at exit: 792 bytes in 29 blocks
==8601==   total heap usage: 30 allocs, 1 frees, 8,984 bytes allocated
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 9 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4015FC: create1DArray_int64_t (Util.c:23)
==8601==    by 0x400C23: _func_ (CallerMacro4.c:21)
==8601==    by 0x400F51: main (CallerMacro4.c:114)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 10 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400C45: _func_ (CallerMacro4.c:23)
==8601==    by 0x400F51: main (CallerMacro4.c:114)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 11 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4015FC: create1DArray_int64_t (Util.c:23)
==8601==    by 0x400C77: _func_ (CallerMacro4.c:29)
==8601==    by 0x400F51: main (CallerMacro4.c:114)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 12 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400C96: _func_ (CallerMacro4.c:31)
==8601==    by 0x400F51: main (CallerMacro4.c:114)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 13 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400CBE: _func_ (CallerMacro4.c:33)
==8601==    by 0x400F51: main (CallerMacro4.c:114)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 14 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400CDD: _func_ (CallerMacro4.c:35)
==8601==    by 0x400F51: main (CallerMacro4.c:114)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 15 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400F7F: main (CallerMacro4.c:117)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 16 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4015FC: create1DArray_int64_t (Util.c:23)
==8601==    by 0x400C23: _func_ (CallerMacro4.c:21)
==8601==    by 0x401186: main (CallerMacro4.c:160)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 17 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400C45: _func_ (CallerMacro4.c:23)
==8601==    by 0x401186: main (CallerMacro4.c:160)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 18 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4015FC: create1DArray_int64_t (Util.c:23)
==8601==    by 0x400C77: _func_ (CallerMacro4.c:29)
==8601==    by 0x401186: main (CallerMacro4.c:160)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 19 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400C96: _func_ (CallerMacro4.c:31)
==8601==    by 0x401186: main (CallerMacro4.c:160)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 20 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400CDD: _func_ (CallerMacro4.c:35)
==8601==    by 0x401186: main (CallerMacro4.c:160)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 21 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x4011B4: main (CallerMacro4.c:163)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 22 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4015FC: create1DArray_int64_t (Util.c:23)
==8601==    by 0x400C23: _func_ (CallerMacro4.c:21)
==8601==    by 0x4013A3: main (CallerMacro4.c:206)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 23 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400C45: _func_ (CallerMacro4.c:23)
==8601==    by 0x4013A3: main (CallerMacro4.c:206)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 24 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4015FC: create1DArray_int64_t (Util.c:23)
==8601==    by 0x400C77: _func_ (CallerMacro4.c:29)
==8601==    by 0x4013A3: main (CallerMacro4.c:206)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 25 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400C96: _func_ (CallerMacro4.c:31)
==8601==    by 0x4013A3: main (CallerMacro4.c:206)
==8601== 
==8601== 24 bytes in 1 blocks are definitely lost in loss record 26 of 29
==8601==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8601==    by 0x4017A8: copy1DArray_int64_t (Util.c:80)
==8601==    by 0x400CBE: _func_ (CallerMacro4.c:33)
==8601==    by 0x4013A3: main (CallerMacro4.c:206)
==8601== 
==8601== LEAK SUMMARY:
==8601==    definitely lost: 432 bytes in 18 blocks
==8601==    indirectly lost: 0 bytes in 0 blocks
==8601==      possibly lost: 0 bytes in 0 blocks
==8601==    still reachable: 360 bytes in 11 blocks
==8601==         suppressed: 0 bytes in 0 blocks
==8601== Reachable blocks (those to which a pointer was found) are not shown.
==8601== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8601== 
==8601== For counts of detected and suppressed errors, rerun with: -v
==8601== ERROR SUMMARY: 18 errors from 18 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 1



=== Test report for ea_nocopy CallerMacro4 ===
The Valgrind memory detector as below:
==8616== Memcheck, a memory error detector
==8616== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8616== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8616== Command: ./CallerMacro4.out
==8616== Parent PID: 8113
==8616== 
==8616== 
==8616== HEAP SUMMARY:
==8616==     in use at exit: 384 bytes in 12 blocks
==8616==   total heap usage: 13 allocs, 1 frees, 8,576 bytes allocated
==8616== 
==8616== 24 bytes in 1 blocks are definitely lost in loss record 6 of 12
==8616==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8616==    by 0x401504: create1DArray_int64_t (Util.c:23)
==8616==    by 0x400C23: _func_ (CallerMacro4.c:21)
==8616==    by 0x400F00: main (CallerMacro4.c:120)
==8616== 
==8616== 24 bytes in 1 blocks are definitely lost in loss record 7 of 12
==8616==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8616==    by 0x401504: create1DArray_int64_t (Util.c:23)
==8616==    by 0x400C68: _func_ (CallerMacro4.c:30)
==8616==    by 0x400F00: main (CallerMacro4.c:120)
==8616== 
==8616== 24 bytes in 1 blocks are definitely lost in loss record 8 of 12
==8616==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8616==    by 0x401504: create1DArray_int64_t (Util.c:23)
==8616==    by 0x400C68: _func_ (CallerMacro4.c:30)
==8616==    by 0x40111D: main (CallerMacro4.c:168)
==8616== 
==8616== 24 bytes in 1 blocks are definitely lost in loss record 9 of 12
==8616==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8616==    by 0x401504: create1DArray_int64_t (Util.c:23)
==8616==    by 0x400C23: _func_ (CallerMacro4.c:21)
==8616==    by 0x4012BD: main (CallerMacro4.c:214)
==8616== 
==8616== LEAK SUMMARY:
==8616==    definitely lost: 96 bytes in 4 blocks
==8616==    indirectly lost: 0 bytes in 0 blocks
==8616==      possibly lost: 0 bytes in 0 blocks
==8616==    still reachable: 288 bytes in 8 blocks
==8616==         suppressed: 0 bytes in 0 blocks
==8616== Reachable blocks (those to which a pointer was found) are not shown.
==8616== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8616== 
==8616== For counts of detected and suppressed errors, rerun with: -v
==8616== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 1



=== Test report for ea_nocopy_dealloc CallerMacro4 ===
The Valgrind memory detector as below:
==8631== Memcheck, a memory error detector
==8631== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8631== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8631== Command: ./CallerMacro4.out
==8631== Parent PID: 8113
==8631== 
==8631== 
==8631== HEAP SUMMARY:
==8631==     in use at exit: 0 bytes in 0 blocks
==8631==   total heap usage: 13 allocs, 13 frees, 8,576 bytes allocated
==8631== 
==8631== All heap blocks were freed -- no leaks are possible
==8631== 
==8631== For counts of detected and suppressed errors, rerun with: -v
==8631== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 1



=== Test report for ea_dealloc CallerMacro5 ===
The Valgrind memory detector as below:
==8650== Memcheck, a memory error detector
==8650== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8650== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8650== Command: ./CallerMacro5.out
==8650== Parent PID: 8113
==8650== 
==8650== 
==8650== HEAP SUMMARY:
==8650==     in use at exit: 0 bytes in 0 blocks
==8650==   total heap usage: 33 allocs, 33 frees, 9,056 bytes allocated
==8650== 
==8650== All heap blocks were freed -- no leaks are possible
==8650== 
==8650== For counts of detected and suppressed errors, rerun with: -v
==8650== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 0



=== Test report for ea_naive CallerMacro5 ===
The Valgrind memory detector as below:
==8665== Memcheck, a memory error detector
==8665== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8665== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8665== Command: ./CallerMacro5.out
==8665== Parent PID: 8113
==8665== 
==8665== 
==8665== HEAP SUMMARY:
==8665==     in use at exit: 864 bytes in 32 blocks
==8665==   total heap usage: 33 allocs, 1 frees, 9,056 bytes allocated
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 9 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x40161B: create1DArray_int64_t (Util.c:23)
==8665==    by 0x400C23: _func_ (CallerMacro5.c:21)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 10 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400C45: _func_ (CallerMacro5.c:23)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 11 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x40161B: create1DArray_int64_t (Util.c:23)
==8665==    by 0x400C77: _func_ (CallerMacro5.c:29)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 12 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400C96: _func_ (CallerMacro5.c:31)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 13 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CBE: _func_ (CallerMacro5.c:33)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 14 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CDD: _func_ (CallerMacro5.c:35)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 15 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CFC: _func_ (CallerMacro5.c:37)
==8665==    by 0x400F70: main (CallerMacro5.c:116)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 16 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400F9E: main (CallerMacro5.c:119)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 17 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x40161B: create1DArray_int64_t (Util.c:23)
==8665==    by 0x400C23: _func_ (CallerMacro5.c:21)
==8665==    by 0x4011A5: main (CallerMacro5.c:162)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 18 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400C45: _func_ (CallerMacro5.c:23)
==8665==    by 0x4011A5: main (CallerMacro5.c:162)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 19 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x40161B: create1DArray_int64_t (Util.c:23)
==8665==    by 0x400C77: _func_ (CallerMacro5.c:29)
==8665==    by 0x4011A5: main (CallerMacro5.c:162)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 20 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400C96: _func_ (CallerMacro5.c:31)
==8665==    by 0x4011A5: main (CallerMacro5.c:162)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 21 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CBE: _func_ (CallerMacro5.c:33)
==8665==    by 0x4011A5: main (CallerMacro5.c:162)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 22 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CFC: _func_ (CallerMacro5.c:37)
==8665==    by 0x4011A5: main (CallerMacro5.c:162)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 23 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x4011D3: main (CallerMacro5.c:165)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 24 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x40161B: create1DArray_int64_t (Util.c:23)
==8665==    by 0x400C23: _func_ (CallerMacro5.c:21)
==8665==    by 0x4013C2: main (CallerMacro5.c:208)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 25 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400C45: _func_ (CallerMacro5.c:23)
==8665==    by 0x4013C2: main (CallerMacro5.c:208)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 26 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x40161B: create1DArray_int64_t (Util.c:23)
==8665==    by 0x400C77: _func_ (CallerMacro5.c:29)
==8665==    by 0x4013C2: main (CallerMacro5.c:208)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 27 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400C96: _func_ (CallerMacro5.c:31)
==8665==    by 0x4013C2: main (CallerMacro5.c:208)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 28 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CBE: _func_ (CallerMacro5.c:33)
==8665==    by 0x4013C2: main (CallerMacro5.c:208)
==8665== 
==8665== 24 bytes in 1 blocks are definitely lost in loss record 29 of 32
==8665==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8665==    by 0x4017C7: copy1DArray_int64_t (Util.c:80)
==8665==    by 0x400CDD: _func_ (CallerMacro5.c:35)
==8665==    by 0x4013C2: main (CallerMacro5.c:208)
==8665== 
==8665== LEAK SUMMARY:
==8665==    definitely lost: 504 bytes in 21 blocks
==8665==    indirectly lost: 0 bytes in 0 blocks
==8665==      possibly lost: 0 bytes in 0 blocks
==8665==    still reachable: 360 bytes in 11 blocks
==8665==         suppressed: 0 bytes in 0 blocks
==8665== Reachable blocks (those to which a pointer was found) are not shown.
==8665== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8665== 
==8665== For counts of detected and suppressed errors, rerun with: -v
==8665== ERROR SUMMARY: 21 errors from 21 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 0



=== Test report for ea_nocopy CallerMacro5 ===
The Valgrind memory detector as below:
==8681== Memcheck, a memory error detector
==8681== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8681== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8681== Command: ./CallerMacro5.out
==8681== Parent PID: 8113
==8681== 
==8681== 
==8681== HEAP SUMMARY:
==8681==     in use at exit: 456 bytes in 15 blocks
==8681==   total heap usage: 16 allocs, 1 frees, 8,648 bytes allocated
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 6 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x401523: create1DArray_int64_t (Util.c:23)
==8681==    by 0x400C23: _func_ (CallerMacro5.c:21)
==8681==    by 0x400F1F: main (CallerMacro5.c:123)
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 7 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x401523: create1DArray_int64_t (Util.c:23)
==8681==    by 0x400C68: _func_ (CallerMacro5.c:30)
==8681==    by 0x400F1F: main (CallerMacro5.c:123)
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 8 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x4016CF: copy1DArray_int64_t (Util.c:80)
==8681==    by 0x400CBD: _func_ (CallerMacro5.c:42)
==8681==    by 0x400F1F: main (CallerMacro5.c:123)
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 9 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x401523: create1DArray_int64_t (Util.c:23)
==8681==    by 0x400C68: _func_ (CallerMacro5.c:30)
==8681==    by 0x40113C: main (CallerMacro5.c:171)
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 10 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x4016CF: copy1DArray_int64_t (Util.c:80)
==8681==    by 0x400CBD: _func_ (CallerMacro5.c:42)
==8681==    by 0x40113C: main (CallerMacro5.c:171)
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 11 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x401523: create1DArray_int64_t (Util.c:23)
==8681==    by 0x400C23: _func_ (CallerMacro5.c:21)
==8681==    by 0x4012DC: main (CallerMacro5.c:217)
==8681== 
==8681== 24 bytes in 1 blocks are definitely lost in loss record 12 of 15
==8681==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8681==    by 0x401523: create1DArray_int64_t (Util.c:23)
==8681==    by 0x400C68: _func_ (CallerMacro5.c:30)
==8681==    by 0x4012DC: main (CallerMacro5.c:217)
==8681== 
==8681== LEAK SUMMARY:
==8681==    definitely lost: 168 bytes in 7 blocks
==8681==    indirectly lost: 0 bytes in 0 blocks
==8681==      possibly lost: 0 bytes in 0 blocks
==8681==    still reachable: 288 bytes in 8 blocks
==8681==         suppressed: 0 bytes in 0 blocks
==8681== Reachable blocks (those to which a pointer was found) are not shown.
==8681== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8681== 
==8681== For counts of detected and suppressed errors, rerun with: -v
==8681== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 0



=== Test report for ea_nocopy_dealloc CallerMacro5 ===
The Valgrind memory detector as below:
==8698== Memcheck, a memory error detector
==8698== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8698== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8698== Command: ./CallerMacro5.out
==8698== Parent PID: 8113
==8698== 
==8698== 
==8698== HEAP SUMMARY:
==8698==     in use at exit: 0 bytes in 0 blocks
==8698==   total heap usage: 16 allocs, 16 frees, 8,648 bytes allocated
==8698== 
==8698== All heap blocks were freed -- no leaks are possible
==8698== 
==8698== For counts of detected and suppressed errors, rerun with: -v
==8698== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
y[0] = 2
y[0] = 0
y[0] = 0



=== Test report for ea_dealloc cashtill ===
The Valgrind memory detector as below:
==8716== Memcheck, a memory error detector
==8716== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8716== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8716== Command: ./cashtill.out
==8716== Parent PID: 8113
==8716== 
==8716== 
==8716== HEAP SUMMARY:
==8716==     in use at exit: 0 bytes in 0 blocks
==8716==   total heap usage: 307,694 allocs, 307,694 frees, 19,715,080 bytes allocated
==8716== 
==8716== All heap blocks were freed -- no leaks are possible
==8716== 
==8716== For counts of detected and suppressed errors, rerun with: -v
==8716== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1
--
Customer wants to purchase item for 85c.
Customer gives: 1 x $1
Change given: 5 x 1c, 2 x 5c
Till: 1 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 4 x $1
--
Customer wants to purchase item for 105c.
Customer gives: 1 x $1
Customer has not given enough cash!
--
Customer wants to purchase item for 5c.
Customer gives: 1 x $10
Cash till cannot give exact change!
--
Customer wants to purchase item for 305c.
Customer gives: 1 x $5
Change given: 1 x 5c, 2 x 10c, 1 x 20c, 1 x 50c, 1 x $1
Till: 1 x 10c, 3 x $1, 1 x $5



=== Test report for ea_naive cashtill ===
The Valgrind memory detector as below:
==8732== Memcheck, a memory error detector
==8732== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8732== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8732== Command: ./cashtill.out
==8732== Parent PID: 8113
==8732== 
==8732== 
==8732== HEAP SUMMARY:
==8732==     in use at exit: 19,706,888 bytes in 307,693 blocks
==8732==   total heap usage: 307,694 allocs, 1 frees, 19,715,080 bytes allocated
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 1 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 2 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 3 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 4 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 5 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 6 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 7 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 8 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 9 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 10 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 11 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 12 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 13 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 14 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 15 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 16 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 17 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 18 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 19 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 20 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 21 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 22 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 23 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 24 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 25 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4019C2: _toString_ (cashtill.c:482)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 26 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4019EA: _toString_ (cashtill.c:484)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 0 bytes in 1 blocks are definitely lost in loss record 27 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401F5A: _toString_ (cashtill.c:603)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 36 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 37 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 38 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 39 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 40 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 41 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 42 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x402585: _buy_ (cashtill.c:674)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 43 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 44 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 45 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 46 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 47 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 8 bytes in 1 blocks are definitely lost in loss record 48 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 49 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402243: _buy_ (cashtill.c:655)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 50 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x402585: _buy_ (cashtill.c:674)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 51 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4025C4: _buy_ (cashtill.c:683)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 52 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401AAB: _toString_ (cashtill.c:512)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 53 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402243: _buy_ (cashtill.c:655)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 54 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4025C4: _buy_ (cashtill.c:683)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 55 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402243: _buy_ (cashtill.c:655)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 56 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4025C4: _buy_ (cashtill.c:683)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 57 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402243: _buy_ (cashtill.c:655)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 16 bytes in 1 blocks are definitely lost in loss record 58 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4025C4: _buy_ (cashtill.c:683)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 16 bytes in 2 blocks are definitely lost in loss record 59 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 24 bytes in 1 blocks are definitely lost in loss record 60 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 24 bytes in 1 blocks are definitely lost in loss record 61 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x402585: _buy_ (cashtill.c:674)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 24 bytes in 1 blocks are definitely lost in loss record 62 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 24 bytes in 1 blocks are definitely lost in loss record 63 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 24 bytes in 1 blocks are definitely lost in loss record 64 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x402585: _buy_ (cashtill.c:674)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 24 bytes in 1 blocks are definitely lost in loss record 65 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 24 bytes in 3 blocks are definitely lost in loss record 66 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 67 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 68 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 69 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 70 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 71 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 72 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 73 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 32 bytes in 1 blocks are definitely lost in loss record 74 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 32 bytes in 2 blocks are definitely lost in loss record 75 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401AAB: _toString_ (cashtill.c:512)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 40 bytes in 5 blocks are definitely lost in loss record 76 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 40 bytes in 5 blocks are definitely lost in loss record 77 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 48 bytes in 1 blocks are definitely lost in loss record 79 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40342D: _buy_ (cashtill.c:810)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 48 bytes in 1 blocks are definitely lost in loss record 80 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40342D: _buy_ (cashtill.c:810)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 48 bytes in 2 blocks are definitely lost in loss record 81 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 48 bytes in 6 blocks are definitely lost in loss record 82 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x405161: Int_toString (WyRT.c:16)
==8732==    by 0x401B62: _toString_ (cashtill.c:528)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 83 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 84 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 85 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 86 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 87 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 88 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 89 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 56 bytes in 1 blocks are definitely lost in loss record 90 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 108 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x403855: main (cashtill.c:893)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 109 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400D6D: _Cash_1_ (cashtill.c:85)
==8732==    by 0x403A8D: main (cashtill.c:924)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 110 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402772: _buy_ (cashtill.c:703)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 111 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40281D: _buy_ (cashtill.c:713)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 112 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402B91: _buy_ (cashtill.c:734)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 113 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402C28: _buy_ (cashtill.c:742)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 114 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 115 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 116 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 117 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 118 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 119 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 120 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 121 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 122 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 123 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 124 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 125 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 126 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 127 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 128 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 129 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 130 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 131 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 132 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 133 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 134 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 135 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 136 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 137 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 138 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 139 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 140 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 141 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 142 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400C0A: _Cash_ (cashtill.c:30)
==8732==    by 0x4013E8: _calculateChange_ (cashtill.c:358)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 143 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 144 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 145 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 146 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 147 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 148 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 149 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 150 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x402CCF: _buy_ (cashtill.c:746)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 151 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40310A: _buy_ (cashtill.c:780)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 152 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4031B5: _buy_ (cashtill.c:790)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 153 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x403223: _buy_ (cashtill.c:792)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 154 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4032D4: _buy_ (cashtill.c:796)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 155 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4032EE: _buy_ (cashtill.c:800)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 156 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40335C: _buy_ (cashtill.c:802)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 157 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4034C5: _buy_ (cashtill.c:821)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 158 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x403BF7: main (cashtill.c:937)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 159 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400D6D: _Cash_1_ (cashtill.c:85)
==8732==    by 0x403CC5: main (cashtill.c:947)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 160 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402772: _buy_ (cashtill.c:703)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 161 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40281D: _buy_ (cashtill.c:713)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 162 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x403E17: main (cashtill.c:960)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 163 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400D6D: _Cash_1_ (cashtill.c:85)
==8732==    by 0x403EE5: main (cashtill.c:970)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 164 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402772: _buy_ (cashtill.c:703)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 165 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40281D: _buy_ (cashtill.c:713)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 166 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402B91: _buy_ (cashtill.c:734)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 167 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402C28: _buy_ (cashtill.c:742)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 168 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x404037: main (cashtill.c:983)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 169 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400D6D: _Cash_1_ (cashtill.c:85)
==8732==    by 0x404105: main (cashtill.c:993)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 170 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402772: _buy_ (cashtill.c:703)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 171 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40281D: _buy_ (cashtill.c:713)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 172 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402B91: _buy_ (cashtill.c:734)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 173 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x402C28: _buy_ (cashtill.c:742)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 174 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 175 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 176 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 177 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 178 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 179 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 180 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 181 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 182 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 183 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 184 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 185 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 186 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400C0A: _Cash_ (cashtill.c:30)
==8732==    by 0x4013E8: _calculateChange_ (cashtill.c:358)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 187 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 188 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 189 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 190 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 191 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 192 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x40177E: _calculateChange_ (cashtill.c:414)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 193 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x402CCF: _buy_ (cashtill.c:746)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 194 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40310A: _buy_ (cashtill.c:780)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 195 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4031B5: _buy_ (cashtill.c:790)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 196 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x403223: _buy_ (cashtill.c:792)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 197 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x4032D4: _buy_ (cashtill.c:796)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 198 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4032EE: _buy_ (cashtill.c:800)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 199 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40335C: _buy_ (cashtill.c:802)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 1 blocks are definitely lost in loss record 200 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4034C5: _buy_ (cashtill.c:821)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 64 bytes in 4 blocks are definitely lost in loss record 201 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401AAB: _toString_ (cashtill.c:512)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 64 bytes in 4 blocks are definitely lost in loss record 202 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401AAB: _toString_ (cashtill.c:512)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 72 bytes in 1 blocks are definitely lost in loss record 203 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B00: _toString_ (cashtill.c:516)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 72 bytes in 1 blocks are definitely lost in loss record 204 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401B2E: _toString_ (cashtill.c:519)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 72 bytes in 3 blocks are definitely lost in loss record 205 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 80 bytes in 5 blocks are definitely lost in loss record 206 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401AAB: _toString_ (cashtill.c:512)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 88 bytes in 2 blocks are definitely lost in loss record 207 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 88 bytes in 2 blocks are definitely lost in loss record 208 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 112 bytes in 1 blocks are definitely lost in loss record 209 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402FDF: _buy_ (cashtill.c:769)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 112 bytes in 1 blocks are definitely lost in loss record 210 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402FDF: _buy_ (cashtill.c:769)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 120 bytes in 5 blocks are definitely lost in loss record 211 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 120 bytes in 5 blocks are definitely lost in loss record 212 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 128 bytes in 1 blocks are definitely lost in loss record 213 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402623: _buy_ (cashtill.c:692)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 128 bytes in 1 blocks are definitely lost in loss record 214 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402623: _buy_ (cashtill.c:692)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 128 bytes in 1 blocks are definitely lost in loss record 215 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402623: _buy_ (cashtill.c:692)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 128 bytes in 1 blocks are definitely lost in loss record 216 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402623: _buy_ (cashtill.c:692)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 128 bytes in 2 blocks are definitely lost in loss record 217 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 128 bytes in 2 blocks are definitely lost in loss record 218 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 128 bytes in 2 blocks are definitely lost in loss record 219 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 128 bytes in 2 blocks are definitely lost in loss record 220 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 136 bytes in 2 blocks are definitely lost in loss record 221 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 136 bytes in 2 blocks are definitely lost in loss record 222 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 144 bytes in 6 blocks are definitely lost in loss record 223 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401BEB: _toString_ (cashtill.c:537)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 184 bytes in 2 blocks are definitely lost in loss record 224 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 184 bytes in 2 blocks are definitely lost in loss record 225 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 216 bytes in 2 blocks are definitely lost in loss record 230 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B00: _toString_ (cashtill.c:516)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 216 bytes in 2 blocks are definitely lost in loss record 231 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401B2E: _toString_ (cashtill.c:519)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 240 bytes in 3 blocks are definitely lost in loss record 232 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 240 bytes in 3 blocks are definitely lost in loss record 233 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 234 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 235 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 236 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 237 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x4027EA: _buy_ (cashtill.c:704)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 280 bytes in 1 blocks are definitely lost in loss record 238 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4028C2: _buy_ (cashtill.c:721)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 280 bytes in 1 blocks are definitely lost in loss record 239 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x402D04: _buy_ (cashtill.c:756)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 288 bytes in 1 blocks are definitely lost in loss record 240 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4022A2: _buy_ (cashtill.c:664)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 288 bytes in 1 blocks are definitely lost in loss record 241 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4022A2: _buy_ (cashtill.c:664)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 288 bytes in 1 blocks are definitely lost in loss record 242 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4022A2: _buy_ (cashtill.c:664)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 288 bytes in 1 blocks are definitely lost in loss record 243 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x4022A2: _buy_ (cashtill.c:664)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 312 bytes in 3 blocks are definitely lost in loss record 244 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 312 bytes in 3 blocks are definitely lost in loss record 245 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 246 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 247 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 248 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 249 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 250 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 251 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 252 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 320 bytes in 5 blocks are definitely lost in loss record 253 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 384 bytes in 3 blocks are definitely lost in loss record 255 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 384 bytes in 3 blocks are definitely lost in loss record 256 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 512 (128 direct, 384 indirect) bytes in 2 blocks are definitely lost in loss record 258 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 259 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x40288E: _buy_ (cashtill.c:714)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 260 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x402C02: _buy_ (cashtill.c:735)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 261 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x40288E: _buy_ (cashtill.c:714)
==8732==    by 0x403DE5: main (cashtill.c:957)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 262 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x40288E: _buy_ (cashtill.c:714)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 263 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x402C02: _buy_ (cashtill.c:735)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 264 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x40288E: _buy_ (cashtill.c:714)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 512 bytes in 8 blocks are definitely lost in loss record 265 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x400F8D: _total_ (cashtill.c:157)
==8732==    by 0x402C02: _buy_ (cashtill.c:735)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 640 bytes in 10 blocks are definitely lost in loss record 267 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 640 bytes in 10 blocks are definitely lost in loss record 268 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 640 bytes in 10 blocks are definitely lost in loss record 269 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 704 bytes in 11 blocks are definitely lost in loss record 270 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 720 bytes in 4 blocks are definitely lost in loss record 271 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B00: _toString_ (cashtill.c:516)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 720 bytes in 4 blocks are definitely lost in loss record 272 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401B2E: _toString_ (cashtill.c:519)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 720 bytes in 4 blocks are definitely lost in loss record 273 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B00: _toString_ (cashtill.c:516)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 720 bytes in 4 blocks are definitely lost in loss record 274 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401B2E: _toString_ (cashtill.c:519)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 760 bytes in 5 blocks are definitely lost in loss record 275 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 760 bytes in 5 blocks are definitely lost in loss record 276 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 760 bytes in 5 blocks are definitely lost in loss record 277 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 760 bytes in 5 blocks are definitely lost in loss record 278 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 768 (192 direct, 576 indirect) bytes in 3 blocks are definitely lost in loss record 279 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 880 bytes in 5 blocks are definitely lost in loss record 280 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 880 bytes in 5 blocks are definitely lost in loss record 281 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 880 bytes in 5 blocks are definitely lost in loss record 282 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 880 bytes in 5 blocks are definitely lost in loss record 283 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 896 bytes in 14 blocks are definitely lost in loss record 284 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 1,000 bytes in 5 blocks are definitely lost in loss record 287 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,000 bytes in 5 blocks are definitely lost in loss record 288 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 1,000 bytes in 5 blocks are definitely lost in loss record 289 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 1,000 bytes in 5 blocks are definitely lost in loss record 290 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 1,000 bytes in 5 blocks are definitely lost in loss record 291 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401F0C: _toString_ (cashtill.c:588)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 1,080 bytes in 5 blocks are definitely lost in loss record 292 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B00: _toString_ (cashtill.c:516)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,080 bytes in 5 blocks are definitely lost in loss record 293 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401B2E: _toString_ (cashtill.c:519)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,128 bytes in 6 blocks are definitely lost in loss record 294 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401B97: _toString_ (cashtill.c:532)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,128 bytes in 6 blocks are definitely lost in loss record 295 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401BC5: _toString_ (cashtill.c:535)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,272 bytes in 6 blocks are definitely lost in loss record 297 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401C52: _toString_ (cashtill.c:541)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,272 bytes in 6 blocks are definitely lost in loss record 298 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401C80: _toString_ (cashtill.c:544)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,280 (320 direct, 960 indirect) bytes in 5 blocks are definitely lost in loss record 299 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x40353D: _buy_ (cashtill.c:822)
==8732==    by 0x403BC5: main (cashtill.c:934)
==8732== 
==8732== 1,280 (320 direct, 960 indirect) bytes in 5 blocks are definitely lost in loss record 300 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x403182: _buy_ (cashtill.c:781)
==8732==    by 0x404225: main (cashtill.c:1003)
==8732== 
==8732== 1,408 bytes in 22 blocks are definitely lost in loss record 301 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 1,408 bytes in 22 blocks are definitely lost in loss record 302 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 1,408 bytes in 22 blocks are definitely lost in loss record 303 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 1,408 bytes in 22 blocks are definitely lost in loss record 304 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 1,416 bytes in 6 blocks are definitely lost in loss record 305 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40537E: Array_Append (WyRT.c:62)
==8732==    by 0x401EDE: _toString_ (cashtill.c:585)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 1,536 (384 direct, 1,152 indirect) bytes in 6 blocks are definitely lost in loss record 306 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x404AA2: create2DArray_int64_t_empty (Util.c:236)
==8732==    by 0x401CAC: _toString_ (cashtill.c:546)
==8732==    by 0x403997: main (cashtill.c:909)
==8732== 
==8732== 5,504 bytes in 86 blocks are definitely lost in loss record 307 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 5,504 bytes in 86 blocks are definitely lost in loss record 308 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 5,504 bytes in 86 blocks are definitely lost in loss record 309 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 5,504 bytes in 86 blocks are definitely lost in loss record 310 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 19,392 bytes in 303 blocks are definitely lost in loss record 311 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 19,392 bytes in 303 blocks are definitely lost in loss record 312 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 19,392 bytes in 303 blocks are definitely lost in loss record 313 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 19,392 bytes in 303 blocks are definitely lost in loss record 314 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 62,080 bytes in 970 blocks are definitely lost in loss record 315 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 62,080 bytes in 970 blocks are definitely lost in loss record 316 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 62,080 bytes in 970 blocks are definitely lost in loss record 317 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 62,080 bytes in 970 blocks are definitely lost in loss record 318 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 178,880 bytes in 2,795 blocks are definitely lost in loss record 319 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 178,880 bytes in 2,795 blocks are definitely lost in loss record 320 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 178,880 bytes in 2,795 blocks are definitely lost in loss record 321 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 178,880 bytes in 2,795 blocks are definitely lost in loss record 322 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 452,480 bytes in 7,070 blocks are definitely lost in loss record 323 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 452,480 bytes in 7,070 blocks are definitely lost in loss record 324 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 452,480 bytes in 7,070 blocks are definitely lost in loss record 325 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 452,480 bytes in 7,070 blocks are definitely lost in loss record 326 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 967,680 bytes in 15,120 blocks are definitely lost in loss record 327 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 967,680 bytes in 15,120 blocks are definitely lost in loss record 328 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 967,680 bytes in 15,120 blocks are definitely lost in loss record 329 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 967,680 bytes in 15,120 blocks are definitely lost in loss record 330 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 331 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 332 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 333 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 334 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732==    by 0x404005: main (cashtill.c:980)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 335 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x40149D: _calculateChange_ (cashtill.c:384)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 336 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4044DA: copy1DArray_int64_t (Util.c:80)
==8732==    by 0x401588: _calculateChange_ (cashtill.c:391)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 337 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x40432E: create1DArray_int64_t (Util.c:23)
==8732==    by 0x401602: _calculateChange_ (cashtill.c:401)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732== 
==8732== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 338 of 338
==8732==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8732==    by 0x4016D7: _calculateChange_ (cashtill.c:410)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x401750: _calculateChange_ (cashtill.c:411)
==8732==    by 0x402CA1: _buy_ (cashtill.c:743)
==8732== 
==8732== LEAK SUMMARY:
==8732==    definitely lost: 19,700,472 bytes in 307,641 blocks
==8732==    indirectly lost: 4,800 bytes in 25 blocks
==8732==      possibly lost: 0 bytes in 0 blocks
==8732==    still reachable: 1,616 bytes in 27 blocks
==8732==         suppressed: 0 bytes in 0 blocks
==8732== Reachable blocks (those to which a pointer was found) are not shown.
==8732== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8732== 
==8732== For counts of detected and suppressed errors, rerun with: -v
==8732== ERROR SUMMARY: 302 errors from 302 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1
--
Customer wants to purchase item for 85c.
Customer gives: 1 x $1
Change given: 5 x 1c, 2 x 5c
Till: 1 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 4 x $1
--
Customer wants to purchase item for 105c.
Customer gives: 1 x $1
Customer has not given enough cash!
--
Customer wants to purchase item for 5c.
Customer gives: 1 x $10
Cash till cannot give exact change!
--
Customer wants to purchase item for 305c.
Customer gives: 1 x $5
Change given: 1 x 5c, 2 x 10c, 1 x 20c, 1 x 50c, 1 x $1
Till: 1 x 10c, 3 x $1, 1 x $5



=== Test report for ea_nocopy cashtill ===
The Valgrind memory detector as below:
==8747== Memcheck, a memory error detector
==8747== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8747== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8747== Command: ./cashtill.out
==8747== Parent PID: 8113
==8747== 
==8747== 
==8747== HEAP SUMMARY:
==8747==     in use at exit: 14,774,120 bytes in 230,728 blocks
==8747==   total heap usage: 230,729 allocs, 1 frees, 14,782,312 bytes allocated
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 1 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 2 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 3 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 4 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 5 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 6 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 7 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 8 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 9 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 10 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 11 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 12 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 13 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 14 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 15 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 16 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 17 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x40192D: _toString_ (cashtill.c:499)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 0 bytes in 1 blocks are definitely lost in loss record 18 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401E6B: _toString_ (cashtill.c:630)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 23 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 24 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 25 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 26 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 27 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x402469: _buy_ (cashtill.c:702)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 28 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 29 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 30 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 8 bytes in 1 blocks are definitely lost in loss record 31 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 32 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402127: _buy_ (cashtill.c:683)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 33 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x402469: _buy_ (cashtill.c:702)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 34 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4024A8: _buy_ (cashtill.c:711)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 35 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401A04: _toString_ (cashtill.c:533)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 36 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402127: _buy_ (cashtill.c:683)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 37 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4024A8: _buy_ (cashtill.c:711)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 38 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402127: _buy_ (cashtill.c:683)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 39 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4024A8: _buy_ (cashtill.c:711)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 40 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402127: _buy_ (cashtill.c:683)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 16 bytes in 1 blocks are definitely lost in loss record 41 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4024A8: _buy_ (cashtill.c:711)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 16 bytes in 2 blocks are definitely lost in loss record 42 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 24 bytes in 1 blocks are definitely lost in loss record 43 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 24 bytes in 1 blocks are definitely lost in loss record 44 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x402469: _buy_ (cashtill.c:702)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 24 bytes in 1 blocks are definitely lost in loss record 45 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 24 bytes in 1 blocks are definitely lost in loss record 46 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 24 bytes in 1 blocks are definitely lost in loss record 47 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x402469: _buy_ (cashtill.c:702)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 24 bytes in 1 blocks are definitely lost in loss record 48 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 24 bytes in 3 blocks are definitely lost in loss record 49 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 32 bytes in 1 blocks are definitely lost in loss record 50 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 32 bytes in 1 blocks are definitely lost in loss record 51 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 32 bytes in 1 blocks are definitely lost in loss record 52 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 32 bytes in 1 blocks are definitely lost in loss record 53 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 32 bytes in 2 blocks are definitely lost in loss record 54 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401A04: _toString_ (cashtill.c:533)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 40 bytes in 5 blocks are definitely lost in loss record 55 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 40 bytes in 5 blocks are definitely lost in loss record 56 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 48 bytes in 1 blocks are definitely lost in loss record 58 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402E46: _buy_ (cashtill.c:832)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 48 bytes in 1 blocks are definitely lost in loss record 59 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402E46: _buy_ (cashtill.c:832)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 48 bytes in 2 blocks are definitely lost in loss record 60 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 48 bytes in 6 blocks are definitely lost in loss record 61 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4044D4: Int_toString (WyRT.c:16)
==8747==    by 0x401AA9: _toString_ (cashtill.c:551)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 56 bytes in 1 blocks are definitely lost in loss record 62 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 56 bytes in 1 blocks are definitely lost in loss record 63 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 56 bytes in 1 blocks are definitely lost in loss record 64 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 56 bytes in 1 blocks are definitely lost in loss record 65 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 71 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 72 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 73 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 74 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 75 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 76 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 77 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 78 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 79 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 80 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 81 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 82 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 83 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 84 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 85 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 86 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 87 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 88 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 89 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 90 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 91 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 92 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400C0A: _Cash_ (cashtill.c:30)
==8747==    by 0x4013D6: _calculateChange_ (cashtill.c:372)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 93 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 94 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 95 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 96 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 97 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 98 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 99 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 100 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 101 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 1 blocks are definitely lost in loss record 102 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400C0A: _Cash_ (cashtill.c:30)
==8747==    by 0x4013D6: _calculateChange_ (cashtill.c:372)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 64 bytes in 4 blocks are definitely lost in loss record 103 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401A04: _toString_ (cashtill.c:533)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 64 bytes in 4 blocks are definitely lost in loss record 104 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401A04: _toString_ (cashtill.c:533)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 72 bytes in 1 blocks are definitely lost in loss record 105 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401A59: _toString_ (cashtill.c:537)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 72 bytes in 3 blocks are definitely lost in loss record 106 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 80 bytes in 5 blocks are definitely lost in loss record 107 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401A04: _toString_ (cashtill.c:533)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 88 bytes in 2 blocks are definitely lost in loss record 108 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 112 bytes in 1 blocks are definitely lost in loss record 109 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402C78: _buy_ (cashtill.c:794)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 112 bytes in 1 blocks are definitely lost in loss record 110 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402C78: _buy_ (cashtill.c:794)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 120 bytes in 5 blocks are definitely lost in loss record 111 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 120 bytes in 5 blocks are definitely lost in loss record 112 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 128 bytes in 1 blocks are definitely lost in loss record 113 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402507: _buy_ (cashtill.c:720)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 128 bytes in 1 blocks are definitely lost in loss record 114 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402507: _buy_ (cashtill.c:720)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 128 bytes in 1 blocks are definitely lost in loss record 115 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402507: _buy_ (cashtill.c:720)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 128 bytes in 1 blocks are definitely lost in loss record 116 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402507: _buy_ (cashtill.c:720)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 128 bytes in 2 blocks are definitely lost in loss record 117 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 128 bytes in 2 blocks are definitely lost in loss record 118 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 128 bytes in 2 blocks are definitely lost in loss record 119 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 136 bytes in 2 blocks are definitely lost in loss record 120 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 144 bytes in 6 blocks are definitely lost in loss record 121 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401B20: _toString_ (cashtill.c:561)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 184 bytes in 2 blocks are definitely lost in loss record 122 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 216 bytes in 2 blocks are definitely lost in loss record 127 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401A59: _toString_ (cashtill.c:537)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 240 bytes in 3 blocks are definitely lost in loss record 128 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 129 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 130 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 131 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 256 (64 direct, 192 indirect) bytes in 1 blocks are definitely lost in loss record 132 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402663: _buy_ (cashtill.c:731)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 280 bytes in 1 blocks are definitely lost in loss record 133 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4026CA: _buy_ (cashtill.c:747)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 280 bytes in 1 blocks are definitely lost in loss record 134 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402A15: _buy_ (cashtill.c:781)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 288 bytes in 1 blocks are definitely lost in loss record 135 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402186: _buy_ (cashtill.c:692)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 288 bytes in 1 blocks are definitely lost in loss record 136 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402186: _buy_ (cashtill.c:692)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 288 bytes in 1 blocks are definitely lost in loss record 137 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402186: _buy_ (cashtill.c:692)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 288 bytes in 1 blocks are definitely lost in loss record 138 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x402186: _buy_ (cashtill.c:692)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 312 bytes in 3 blocks are definitely lost in loss record 139 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 320 bytes in 5 blocks are definitely lost in loss record 140 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 320 bytes in 5 blocks are definitely lost in loss record 141 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 320 bytes in 5 blocks are definitely lost in loss record 142 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 320 bytes in 5 blocks are definitely lost in loss record 143 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 320 bytes in 5 blocks are definitely lost in loss record 144 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 320 bytes in 5 blocks are definitely lost in loss record 145 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 384 bytes in 3 blocks are definitely lost in loss record 147 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 512 (128 direct, 384 indirect) bytes in 2 blocks are definitely lost in loss record 149 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 150 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40269C: _buy_ (cashtill.c:740)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 151 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40299C: _buy_ (cashtill.c:760)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 152 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40269C: _buy_ (cashtill.c:740)
==8747==    by 0x403410: main (cashtill.c:973)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 153 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40269C: _buy_ (cashtill.c:740)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 154 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40299C: _buy_ (cashtill.c:760)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 155 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40269C: _buy_ (cashtill.c:740)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 512 bytes in 8 blocks are definitely lost in loss record 156 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x400F7B: _total_ (cashtill.c:163)
==8747==    by 0x40299C: _buy_ (cashtill.c:760)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 640 bytes in 10 blocks are definitely lost in loss record 158 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 640 bytes in 10 blocks are definitely lost in loss record 159 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 704 bytes in 11 blocks are definitely lost in loss record 160 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 720 bytes in 4 blocks are definitely lost in loss record 161 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401A59: _toString_ (cashtill.c:537)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 720 bytes in 4 blocks are definitely lost in loss record 162 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401A59: _toString_ (cashtill.c:537)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 760 bytes in 5 blocks are definitely lost in loss record 163 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 760 bytes in 5 blocks are definitely lost in loss record 164 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 768 (192 direct, 576 indirect) bytes in 3 blocks are definitely lost in loss record 165 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 880 bytes in 5 blocks are definitely lost in loss record 166 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 880 bytes in 5 blocks are definitely lost in loss record 167 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 896 bytes in 14 blocks are definitely lost in loss record 168 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 1,000 bytes in 5 blocks are definitely lost in loss record 171 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 1,000 bytes in 5 blocks are definitely lost in loss record 172 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 1,000 bytes in 5 blocks are definitely lost in loss record 173 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401E01: _toString_ (cashtill.c:610)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 1,080 bytes in 5 blocks are definitely lost in loss record 174 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401A59: _toString_ (cashtill.c:537)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 1,128 bytes in 6 blocks are definitely lost in loss record 175 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401ADE: _toString_ (cashtill.c:555)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 1,272 bytes in 6 blocks are definitely lost in loss record 177 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4046F1: Array_Append (WyRT.c:62)
==8747==    by 0x401B87: _toString_ (cashtill.c:565)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 1,280 (320 direct, 960 indirect) bytes in 5 blocks are definitely lost in loss record 178 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402ED3: _buy_ (cashtill.c:843)
==8747==    by 0x403343: main (cashtill.c:952)
==8747== 
==8747== 1,280 (320 direct, 960 indirect) bytes in 5 blocks are definitely lost in loss record 179 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x402D7D: _buy_ (cashtill.c:805)
==8747==    by 0x4035AA: main (cashtill.c:1015)
==8747== 
==8747== 1,408 bytes in 22 blocks are definitely lost in loss record 180 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 1,408 bytes in 22 blocks are definitely lost in loss record 181 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 1,408 bytes in 22 blocks are definitely lost in loss record 182 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 1,536 (384 direct, 1,152 indirect) bytes in 6 blocks are definitely lost in loss record 183 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x403E15: create2DArray_int64_t_empty (Util.c:236)
==8747==    by 0x401BCF: _toString_ (cashtill.c:571)
==8747==    by 0x40327D: main (cashtill.c:930)
==8747== 
==8747== 5,504 bytes in 86 blocks are definitely lost in loss record 184 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 5,504 bytes in 86 blocks are definitely lost in loss record 185 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 5,504 bytes in 86 blocks are definitely lost in loss record 186 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 19,392 bytes in 303 blocks are definitely lost in loss record 187 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 19,392 bytes in 303 blocks are definitely lost in loss record 188 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 19,392 bytes in 303 blocks are definitely lost in loss record 189 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 62,080 bytes in 970 blocks are definitely lost in loss record 190 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 62,080 bytes in 970 blocks are definitely lost in loss record 191 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 62,080 bytes in 970 blocks are definitely lost in loss record 192 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 178,880 bytes in 2,795 blocks are definitely lost in loss record 193 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 178,880 bytes in 2,795 blocks are definitely lost in loss record 194 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 178,880 bytes in 2,795 blocks are definitely lost in loss record 195 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 452,480 bytes in 7,070 blocks are definitely lost in loss record 196 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 452,480 bytes in 7,070 blocks are definitely lost in loss record 197 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 452,480 bytes in 7,070 blocks are definitely lost in loss record 198 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 967,680 bytes in 15,120 blocks are definitely lost in loss record 199 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 967,680 bytes in 15,120 blocks are definitely lost in loss record 200 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 967,680 bytes in 15,120 blocks are definitely lost in loss record 201 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747==    by 0x4034DD: main (cashtill.c:994)
==8747== 
==8747== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 202 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747== 
==8747== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 203 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747== 
==8747== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 204 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4029D0: _buy_ (cashtill.c:767)
==8747== 
==8747== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 205 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x401485: _calculateChange_ (cashtill.c:399)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747== 
==8747== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 206 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x40384D: copy1DArray_int64_t (Util.c:80)
==8747==    by 0x401570: _calculateChange_ (cashtill.c:407)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747== 
==8747== 1,612,800 bytes in 25,200 blocks are definitely lost in loss record 207 of 207
==8747==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8747==    by 0x4036A1: create1DArray_int64_t (Util.c:23)
==8747==    by 0x4015EA: _calculateChange_ (cashtill.c:417)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747==    by 0x4016CD: _calculateChange_ (cashtill.c:426)
==8747== 
==8747== LEAK SUMMARY:
==8747==    definitely lost: 14,768,504 bytes in 230,692 blocks
==8747==    indirectly lost: 4,800 bytes in 25 blocks
==8747==      possibly lost: 0 bytes in 0 blocks
==8747==    still reachable: 816 bytes in 11 blocks
==8747==         suppressed: 0 bytes in 0 blocks
==8747== Reachable blocks (those to which a pointer was found) are not shown.
==8747== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8747== 
==8747== For counts of detected and suppressed errors, rerun with: -v
==8747== ERROR SUMMARY: 187 errors from 187 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1
--
Customer wants to purchase item for 85c.
Customer gives: 1 x $1
Change given: 5 x 1c, 2 x 5c
Till: 1 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 4 x $1
--
Customer wants to purchase item for 105c.
Customer gives: 1 x $1
Customer has not given enough cash!
--
Customer wants to purchase item for 5c.
Customer gives: 1 x $10
Cash till cannot give exact change!
--
Customer wants to purchase item for 305c.
Customer gives: 1 x $5
Change given: 1 x 5c, 2 x 10c, 1 x 20c, 1 x 50c, 1 x $1
Till: 1 x 10c, 3 x $1, 1 x $5



=== Test report for ea_nocopy_dealloc cashtill ===
The Valgrind memory detector as below:
==8763== Memcheck, a memory error detector
==8763== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8763== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8763== Command: ./cashtill.out
==8763== Parent PID: 8113
==8763== 
==8763== 
==8763== HEAP SUMMARY:
==8763==     in use at exit: 0 bytes in 0 blocks
==8763==   total heap usage: 230,729 allocs, 230,729 frees, 14,782,312 bytes allocated
==8763== 
==8763== All heap blocks were freed -- no leaks are possible
==8763== 
==8763== For counts of detected and suppressed errors, rerun with: -v
==8763== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Till: 5 x 1c, 3 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 3 x $1
--
Customer wants to purchase item for 85c.
Customer gives: 1 x $1
Change given: 5 x 1c, 2 x 5c
Till: 1 x 5c, 3 x 10c, 1 x 20c, 1 x 50c, 4 x $1
--
Customer wants to purchase item for 105c.
Customer gives: 1 x $1
Customer has not given enough cash!
--
Customer wants to purchase item for 5c.
Customer gives: 1 x $10
Cash till cannot give exact change!
--
Customer wants to purchase item for 305c.
Customer gives: 1 x $5
Change given: 1 x 5c, 2 x 10c, 1 x 20c, 1 x 50c, 1 x $1
Till: 1 x 10c, 3 x $1, 1 x $5



=== Test report for ea_dealloc CoinGame ===
The Valgrind memory detector as below:
==8781== Memcheck, a memory error detector
==8781== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8781== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8781== Command: ./CoinGame.out
==8781== Parent PID: 8113
==8781== 
==8781== Invalid read of size 8
==8781==    at 0x400E13: _play_ (CoinGame.c:114)
==8781==    by 0x402351: main (CoinGame.c:587)
==8781==  Address 0x5204db8 is 8 bytes before a block of size 800 alloc'd
==8781==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8781==    by 0x4022D8: main (CoinGame.c:586)
==8781== 
==8781== 
==8781== HEAP SUMMARY:
==8781==     in use at exit: 0 bytes in 0 blocks
==8781==   total heap usage: 48 allocs, 48 frees, 14,856 bytes allocated
==8781== 
==8781== All heap blocks were freed -- no leaks are possible
==8781== 
==8781== For counts of detected and suppressed errors, rerun with: -v
==8781== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_naive CoinGame ===
The Valgrind memory detector as below:
==8797== Memcheck, a memory error detector
==8797== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8797== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8797== Command: ./CoinGame.out
==8797== Parent PID: 8113
==8797== 
==8797== Invalid read of size 8
==8797==    at 0x400DDB: _play_ (CoinGame.c:106)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797==  Address 0x5204db8 is 8 bytes before a block of size 800 alloc'd
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x401EC5: main (CoinGame.c:545)
==8797== 
==8797== 
==8797== HEAP SUMMARY:
==8797==     in use at exit: 6,664 bytes in 47 blocks
==8797==   total heap usage: 48 allocs, 1 frees, 14,856 bytes allocated
==8797== 
==8797== 40 bytes in 5 blocks are definitely lost in loss record 1 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x401357: _play_ (CoinGame.c:225)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 80 bytes in 5 blocks are definitely lost in loss record 2 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x4012D5: _play_ (CoinGame.c:208)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 160 bytes in 10 blocks are definitely lost in loss record 3 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x401227: _play_ (CoinGame.c:187)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 240 bytes in 10 blocks are definitely lost in loss record 4 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x40119D: _play_ (CoinGame.c:172)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 384 bytes in 1 blocks are definitely lost in loss record 5 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x401408: _play_ (CoinGame.c:258)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 640 bytes in 5 blocks are definitely lost in loss record 7 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x401029: _play_ (CoinGame.c:155)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 720 bytes in 5 blocks are definitely lost in loss record 8 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4023F4: create1DArray_int64_t (Util.c:23)
==8797==    by 0x400EA2: _play_ (CoinGame.c:142)
==8797==    by 0x401F3E: main (CoinGame.c:546)
==8797== 
==8797== 800 bytes in 1 blocks are definitely lost in loss record 13 of 13
==8797==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8797==    by 0x4025A0: copy1DArray_int64_t (Util.c:80)
==8797==    by 0x401DF0: main (CoinGame.c:533)
==8797== 
==8797== LEAK SUMMARY:
==8797==    definitely lost: 3,064 bytes in 42 blocks
==8797==    indirectly lost: 0 bytes in 0 blocks
==8797==      possibly lost: 0 bytes in 0 blocks
==8797==    still reachable: 3,600 bytes in 5 blocks
==8797==         suppressed: 0 bytes in 0 blocks
==8797== Reachable blocks (those to which a pointer was found) are not shown.
==8797== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8797== 
==8797== For counts of detected and suppressed errors, rerun with: -v
==8797== ERROR SUMMARY: 9 errors from 9 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_nocopy CoinGame ===
The Valgrind memory detector as below:
==8812== Memcheck, a memory error detector
==8812== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8812== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8812== Command: ./CoinGame.out
==8812== Parent PID: 8113
==8812== 
==8812== Invalid read of size 8
==8812==    at 0x400DDB: _play_ (CoinGame.c:112)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812==  Address 0x5204038 is 8 bytes before a block of size 800 alloc'd
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x401DC2: main (CoinGame.c:559)
==8812== 
==8812== 
==8812== HEAP SUMMARY:
==8812==     in use at exit: 3,464 bytes in 43 blocks
==8812==   total heap usage: 44 allocs, 1 frees, 11,656 bytes allocated
==8812== 
==8812== 40 bytes in 5 blocks are definitely lost in loss record 1 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x401357: _play_ (CoinGame.c:237)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== 80 bytes in 5 blocks are definitely lost in loss record 2 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x4012D5: _play_ (CoinGame.c:219)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== 160 bytes in 10 blocks are definitely lost in loss record 3 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x401227: _play_ (CoinGame.c:197)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== 240 bytes in 10 blocks are definitely lost in loss record 4 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x40119D: _play_ (CoinGame.c:182)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== 384 bytes in 1 blocks are definitely lost in loss record 5 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x401408: _play_ (CoinGame.c:271)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== 640 bytes in 5 blocks are definitely lost in loss record 7 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x401029: _play_ (CoinGame.c:165)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== 720 bytes in 5 blocks are definitely lost in loss record 8 of 9
==8812==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8812==    by 0x4022E5: create1DArray_int64_t (Util.c:23)
==8812==    by 0x400EA2: _play_ (CoinGame.c:152)
==8812==    by 0x401E2F: main (CoinGame.c:574)
==8812== 
==8812== LEAK SUMMARY:
==8812==    definitely lost: 2,264 bytes in 41 blocks
==8812==    indirectly lost: 0 bytes in 0 blocks
==8812==      possibly lost: 0 bytes in 0 blocks
==8812==    still reachable: 1,200 bytes in 2 blocks
==8812==         suppressed: 0 bytes in 0 blocks
==8812== Reachable blocks (those to which a pointer was found) are not shown.
==8812== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8812== 
==8812== For counts of detected and suppressed errors, rerun with: -v
==8812== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_nocopy_dealloc CoinGame ===
The Valgrind memory detector as below:
==8827== Memcheck, a memory error detector
==8827== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8827== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8827== Command: ./CoinGame.out
==8827== Parent PID: 8113
==8827== 
==8827== Invalid read of size 8
==8827==    at 0x400E13: _play_ (CoinGame.c:120)
==8827==    by 0x40225B: main (CoinGame.c:615)
==8827==  Address 0x5204038 is 8 bytes before a block of size 800 alloc'd
==8827==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8827==    by 0x4027D2: create1DArray_int64_t (Util.c:23)
==8827==    by 0x40211D: main (CoinGame.c:596)
==8827== 
==8827== 
==8827== HEAP SUMMARY:
==8827==     in use at exit: 0 bytes in 0 blocks
==8827==   total heap usage: 44 allocs, 44 frees, 11,656 bytes allocated
==8827== 
==8827== All heap blocks were freed -- no leaks are possible
==8827== 
==8827== For counts of detected and suppressed errors, rerun with: -v
==8827== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_dealloc CoinGame1 ===
The Valgrind memory detector as below:
==8845== Memcheck, a memory error detector
==8845== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8845== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8845== Command: ./CoinGame1.out
==8845== Parent PID: 8113
==8845== 
==8845== 
==8845== HEAP SUMMARY:
==8845==     in use at exit: 0 bytes in 0 blocks
==8845==   total heap usage: 7 allocs, 7 frees, 11,976 bytes allocated
==8845== 
==8845== All heap blocks were freed -- no leaks are possible
==8845== 
==8845== For counts of detected and suppressed errors, rerun with: -v
==8845== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_naive CoinGame1 ===
The Valgrind memory detector as below:
==8861== Memcheck, a memory error detector
==8861== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8861== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8861== Command: ./CoinGame1.out
==8861== Parent PID: 8113
==8861== 
==8861== 
==8861== HEAP SUMMARY:
==8861==     in use at exit: 3,784 bytes in 6 blocks
==8861==   total heap usage: 7 allocs, 1 frees, 11,976 bytes allocated
==8861== 
==8861== 800 bytes in 1 blocks are definitely lost in loss record 6 of 6
==8861==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8861==    by 0x401A0A: copy1DArray_int64_t (Util.c:80)
==8861==    by 0x401155: main (CoinGame1.c:244)
==8861== 
==8861== LEAK SUMMARY:
==8861==    definitely lost: 800 bytes in 1 blocks
==8861==    indirectly lost: 0 bytes in 0 blocks
==8861==      possibly lost: 0 bytes in 0 blocks
==8861==    still reachable: 2,984 bytes in 5 blocks
==8861==         suppressed: 0 bytes in 0 blocks
==8861== Reachable blocks (those to which a pointer was found) are not shown.
==8861== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8861== 
==8861== For counts of detected and suppressed errors, rerun with: -v
==8861== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_nocopy CoinGame1 ===
The Valgrind memory detector as below:
==8876== Memcheck, a memory error detector
==8876== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8876== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8876== Command: ./CoinGame1.out
==8876== Parent PID: 8113
==8876== 
==8876== 
==8876== HEAP SUMMARY:
==8876==     in use at exit: 1,384 bytes in 3 blocks
==8876==   total heap usage: 4 allocs, 1 frees, 9,576 bytes allocated
==8876== 
==8876== LEAK SUMMARY:
==8876==    definitely lost: 0 bytes in 0 blocks
==8876==    indirectly lost: 0 bytes in 0 blocks
==8876==      possibly lost: 0 bytes in 0 blocks
==8876==    still reachable: 1,384 bytes in 3 blocks
==8876==         suppressed: 0 bytes in 0 blocks
==8876== Reachable blocks (those to which a pointer was found) are not shown.
==8876== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8876== 
==8876== For counts of detected and suppressed errors, rerun with: -v
==8876== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_nocopy_dealloc CoinGame1 ===
The Valgrind memory detector as below:
==8892== Memcheck, a memory error detector
==8892== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8892== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8892== Command: ./CoinGame1.out
==8892== Parent PID: 8113
==8892== 
==8892== 
==8892== HEAP SUMMARY:
==8892==     in use at exit: 0 bytes in 0 blocks
==8892==   total heap usage: 4 allocs, 4 frees, 9,576 bytes allocated
==8892== 
==8892== All heap blocks were freed -- no leaks are possible
==8892== 
==8892== For counts of detected and suppressed errors, rerun with: -v
==8892== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_dealloc CoinGame2 ===
The Valgrind memory detector as below:
==8910== Memcheck, a memory error detector
==8910== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8910== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8910== Command: ./CoinGame2.out
==8910== Parent PID: 8113
==8910== 
==8910== 
==8910== HEAP SUMMARY:
==8910==     in use at exit: 0 bytes in 0 blocks
==8910==   total heap usage: 67 allocs, 67 frees, 16,776 bytes allocated
==8910== 
==8910== All heap blocks were freed -- no leaks are possible
==8910== 
==8910== For counts of detected and suppressed errors, rerun with: -v
==8910== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_naive CoinGame2 ===
The Valgrind memory detector as below:
==8927== Memcheck, a memory error detector
==8927== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8927== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8927== Command: ./CoinGame2.out
==8927== Parent PID: 8113
==8927== 
==8927== 
==8927== HEAP SUMMARY:
==8927==     in use at exit: 8,584 bytes in 66 blocks
==8927==   total heap usage: 67 allocs, 1 frees, 16,776 bytes allocated
==8927== 
==8927== 800 bytes in 1 blocks are definitely lost in loss record 6 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401DFE: copy1DArray_int64_t (Util.c:80)
==8927==    by 0x401549: main (CoinGame2.c:317)
==8927== 
==8927== 800 bytes in 10 blocks are definitely lost in loss record 7 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401C52: create1DArray_int64_t (Util.c:23)
==8927==    by 0x400C75: _findMoves_ (CoinGame2.c:83)
==8927==    by 0x4015DC: main (CoinGame2.c:322)
==8927== 
==8927== 800 bytes in 10 blocks are definitely lost in loss record 8 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401DFE: copy1DArray_int64_t (Util.c:80)
==8927==    by 0x400CA3: _findMoves_ (CoinGame2.c:85)
==8927==    by 0x4015DC: main (CoinGame2.c:322)
==8927== 
==8927== 800 bytes in 10 blocks are definitely lost in loss record 9 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401C52: create1DArray_int64_t (Util.c:23)
==8927==    by 0x400CDC: _findMoves_ (CoinGame2.c:89)
==8927==    by 0x4015DC: main (CoinGame2.c:322)
==8927== 
==8927== 800 bytes in 10 blocks are definitely lost in loss record 10 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401DFE: copy1DArray_int64_t (Util.c:80)
==8927==    by 0x400D0A: _findMoves_ (CoinGame2.c:91)
==8927==    by 0x4015DC: main (CoinGame2.c:322)
==8927== 
==8927== 800 bytes in 10 blocks are definitely lost in loss record 11 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401C52: create1DArray_int64_t (Util.c:23)
==8927==    by 0x400D43: _findMoves_ (CoinGame2.c:95)
==8927==    by 0x4015DC: main (CoinGame2.c:322)
==8927== 
==8927== 800 bytes in 10 blocks are definitely lost in loss record 12 of 12
==8927==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8927==    by 0x401DFE: copy1DArray_int64_t (Util.c:80)
==8927==    by 0x400D71: _findMoves_ (CoinGame2.c:97)
==8927==    by 0x4015DC: main (CoinGame2.c:322)
==8927== 
==8927== LEAK SUMMARY:
==8927==    definitely lost: 5,600 bytes in 61 blocks
==8927==    indirectly lost: 0 bytes in 0 blocks
==8927==      possibly lost: 0 bytes in 0 blocks
==8927==    still reachable: 2,984 bytes in 5 blocks
==8927==         suppressed: 0 bytes in 0 blocks
==8927== Reachable blocks (those to which a pointer was found) are not shown.
==8927== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8927== 
==8927== For counts of detected and suppressed errors, rerun with: -v
==8927== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_nocopy CoinGame2 ===
The Valgrind memory detector as below:
==8942== Memcheck, a memory error detector
==8942== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8942== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8942== Command: ./CoinGame2.out
==8942== Parent PID: 8113
==8942== 
==8942== 
==8942== HEAP SUMMARY:
==8942==     in use at exit: 3,784 bytes in 33 blocks
==8942==   total heap usage: 34 allocs, 1 frees, 11,976 bytes allocated
==8942== 
==8942== 800 bytes in 10 blocks are definitely lost in loss record 4 of 6
==8942==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8942==    by 0x401B81: create1DArray_int64_t (Util.c:23)
==8942==    by 0x400C75: _findMoves_ (CoinGame2.c:84)
==8942==    by 0x40151D: main (CoinGame2.c:332)
==8942== 
==8942== 800 bytes in 10 blocks are definitely lost in loss record 5 of 6
==8942==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8942==    by 0x401B81: create1DArray_int64_t (Util.c:23)
==8942==    by 0x400CCA: _findMoves_ (CoinGame2.c:91)
==8942==    by 0x40151D: main (CoinGame2.c:332)
==8942== 
==8942== 800 bytes in 10 blocks are definitely lost in loss record 6 of 6
==8942==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8942==    by 0x401B81: create1DArray_int64_t (Util.c:23)
==8942==    by 0x400D1F: _findMoves_ (CoinGame2.c:98)
==8942==    by 0x40151D: main (CoinGame2.c:332)
==8942== 
==8942== LEAK SUMMARY:
==8942==    definitely lost: 2,400 bytes in 30 blocks
==8942==    indirectly lost: 0 bytes in 0 blocks
==8942==      possibly lost: 0 bytes in 0 blocks
==8942==    still reachable: 1,384 bytes in 3 blocks
==8942==         suppressed: 0 bytes in 0 blocks
==8942== Reachable blocks (those to which a pointer was found) are not shown.
==8942== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8942== 
==8942== For counts of detected and suppressed errors, rerun with: -v
==8942== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_nocopy_dealloc CoinGame2 ===
The Valgrind memory detector as below:
==8958== Memcheck, a memory error detector
==8958== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8958== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8958== Command: ./CoinGame2.out
==8958== Parent PID: 8113
==8958== 
==8958== 
==8958== HEAP SUMMARY:
==8958==     in use at exit: 0 bytes in 0 blocks
==8958==   total heap usage: 34 allocs, 34 frees, 11,976 bytes allocated
==8958== 
==8958== All heap blocks were freed -- no leaks are possible
==8958== 
==8958== For counts of detected and suppressed errors, rerun with: -v
==8958== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_dealloc CoinGame3 ===
The Valgrind memory detector as below:
==8976== Memcheck, a memory error detector
==8976== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8976== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8976== Command: ./CoinGame3.out
==8976== Parent PID: 8113
==8976== 
==8976== 
==8976== HEAP SUMMARY:
==8976==     in use at exit: 0 bytes in 0 blocks
==8976==   total heap usage: 13 allocs, 13 frees, 12,456 bytes allocated
==8976== 
==8976== All heap blocks were freed -- no leaks are possible
==8976== 
==8976== For counts of detected and suppressed errors, rerun with: -v
==8976== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_naive CoinGame3 ===
The Valgrind memory detector as below:
==8991== Memcheck, a memory error detector
==8991== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8991== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8991== Command: ./CoinGame3.out
==8991== Parent PID: 8113
==8991== 
==8991== 
==8991== HEAP SUMMARY:
==8991==     in use at exit: 4,264 bytes in 12 blocks
==8991==   total heap usage: 13 allocs, 1 frees, 12,456 bytes allocated
==8991== 
==8991== 80 bytes in 1 blocks are definitely lost in loss record 1 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401BC7: create1DArray_int64_t (Util.c:23)
==8991==    by 0x400C48: _findMoves_ (CoinGame3.c:74)
==8991==    by 0x401551: main (CoinGame3.c:303)
==8991== 
==8991== 80 bytes in 1 blocks are definitely lost in loss record 2 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401D73: copy1DArray_int64_t (Util.c:80)
==8991==    by 0x400C76: _findMoves_ (CoinGame3.c:76)
==8991==    by 0x401551: main (CoinGame3.c:303)
==8991== 
==8991== 80 bytes in 1 blocks are definitely lost in loss record 3 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401BC7: create1DArray_int64_t (Util.c:23)
==8991==    by 0x400CAF: _findMoves_ (CoinGame3.c:80)
==8991==    by 0x401551: main (CoinGame3.c:303)
==8991== 
==8991== 80 bytes in 1 blocks are definitely lost in loss record 4 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401D73: copy1DArray_int64_t (Util.c:80)
==8991==    by 0x400CDD: _findMoves_ (CoinGame3.c:82)
==8991==    by 0x401551: main (CoinGame3.c:303)
==8991== 
==8991== 80 bytes in 1 blocks are definitely lost in loss record 5 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401BC7: create1DArray_int64_t (Util.c:23)
==8991==    by 0x400D16: _findMoves_ (CoinGame3.c:86)
==8991==    by 0x401551: main (CoinGame3.c:303)
==8991== 
==8991== 80 bytes in 1 blocks are definitely lost in loss record 6 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401D73: copy1DArray_int64_t (Util.c:80)
==8991==    by 0x400D44: _findMoves_ (CoinGame3.c:88)
==8991==    by 0x401551: main (CoinGame3.c:303)
==8991== 
==8991== 800 bytes in 1 blocks are definitely lost in loss record 12 of 12
==8991==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==8991==    by 0x401D73: copy1DArray_int64_t (Util.c:80)
==8991==    by 0x4014BE: main (CoinGame3.c:298)
==8991== 
==8991== LEAK SUMMARY:
==8991==    definitely lost: 1,280 bytes in 7 blocks
==8991==    indirectly lost: 0 bytes in 0 blocks
==8991==      possibly lost: 0 bytes in 0 blocks
==8991==    still reachable: 2,984 bytes in 5 blocks
==8991==         suppressed: 0 bytes in 0 blocks
==8991== Reachable blocks (those to which a pointer was found) are not shown.
==8991== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8991== 
==8991== For counts of detected and suppressed errors, rerun with: -v
==8991== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_nocopy CoinGame3 ===
The Valgrind memory detector as below:
==9006== Memcheck, a memory error detector
==9006== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9006== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9006== Command: ./CoinGame3.out
==9006== Parent PID: 8113
==9006== 
==9006== 
==9006== HEAP SUMMARY:
==9006==     in use at exit: 1,624 bytes in 6 blocks
==9006==   total heap usage: 7 allocs, 1 frees, 9,816 bytes allocated
==9006== 
==9006== 80 bytes in 1 blocks are definitely lost in loss record 1 of 6
==9006==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9006==    by 0x401AF6: create1DArray_int64_t (Util.c:23)
==9006==    by 0x400C48: _findMoves_ (CoinGame3.c:74)
==9006==    by 0x401492: main (CoinGame3.c:313)
==9006== 
==9006== 80 bytes in 1 blocks are definitely lost in loss record 2 of 6
==9006==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9006==    by 0x401AF6: create1DArray_int64_t (Util.c:23)
==9006==    by 0x400C9D: _findMoves_ (CoinGame3.c:81)
==9006==    by 0x401492: main (CoinGame3.c:313)
==9006== 
==9006== 80 bytes in 1 blocks are definitely lost in loss record 3 of 6
==9006==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9006==    by 0x401AF6: create1DArray_int64_t (Util.c:23)
==9006==    by 0x400CF2: _findMoves_ (CoinGame3.c:88)
==9006==    by 0x401492: main (CoinGame3.c:313)
==9006== 
==9006== LEAK SUMMARY:
==9006==    definitely lost: 240 bytes in 3 blocks
==9006==    indirectly lost: 0 bytes in 0 blocks
==9006==      possibly lost: 0 bytes in 0 blocks
==9006==    still reachable: 1,384 bytes in 3 blocks
==9006==         suppressed: 0 bytes in 0 blocks
==9006== Reachable blocks (those to which a pointer was found) are not shown.
==9006== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9006== 
==9006== For counts of detected and suppressed errors, rerun with: -v
==9006== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_nocopy_dealloc CoinGame3 ===
The Valgrind memory detector as below:
==9022== Memcheck, a memory error detector
==9022== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9022== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9022== Command: ./CoinGame3.out
==9022== Parent PID: 8113
==9022== 
==9022== 
==9022== HEAP SUMMARY:
==9022==     in use at exit: 0 bytes in 0 blocks
==9022==   total heap usage: 7 allocs, 7 frees, 9,816 bytes allocated
==9022== 
==9022== All heap blocks were freed -- no leaks are possible
==9022== 
==9022== For counts of detected and suppressed errors, rerun with: -v
==9022== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
The total amount of money (maximum) Alice gets is 25
Pass CoinGame test case



=== Test report for ea_dealloc CoinGame4 ===
The Valgrind memory detector as below:
==9041== Memcheck, a memory error detector
==9041== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9041== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9041== Command: ./CoinGame4.out
==9041== Parent PID: 8113
==9041== 
==9041== Invalid read of size 8
==9041==    at 0x400E13: _play_ (CoinGame4.c:114)
==9041==    by 0x402521: main (CoinGame4.c:619)
==9041==  Address 0x521c0f8 is 8 bytes before a block of size 800 alloc'd
==9041==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9041==    by 0x4024A8: main (CoinGame4.c:618)
==9041== 
==9041== 
==9041== HEAP SUMMARY:
==9041==     in use at exit: 0 bytes in 0 blocks
==9041==   total heap usage: 158 allocs, 158 frees, 102,856 bytes allocated
==9041== 
==9041== All heap blocks were freed -- no leaks are possible
==9041== 
==9041== For counts of detected and suppressed errors, rerun with: -v
==9041== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_naive CoinGame4 ===
The Valgrind memory detector as below:
==9057== Memcheck, a memory error detector
==9057== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9057== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9057== Command: ./CoinGame4.out
==9057== Parent PID: 8113
==9057== 
==9057== Invalid read of size 8
==9057==    at 0x400DDB: _play_ (CoinGame4.c:106)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057==  Address 0x521c0f8 is 8 bytes before a block of size 800 alloc'd
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x401FBB: main (CoinGame4.c:569)
==9057== 
==9057== 
==9057== HEAP SUMMARY:
==9057==     in use at exit: 94,664 bytes in 157 blocks
==9057==   total heap usage: 158 allocs, 1 frees, 102,856 bytes allocated
==9057== 
==9057== 40 bytes in 5 blocks are definitely lost in loss record 1 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x401357: _play_ (CoinGame4.c:225)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 80 bytes in 5 blocks are definitely lost in loss record 2 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x4012D5: _play_ (CoinGame4.c:208)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 160 bytes in 10 blocks are definitely lost in loss record 3 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x401227: _play_ (CoinGame4.c:187)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 240 bytes in 10 blocks are definitely lost in loss record 4 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x40119D: _play_ (CoinGame4.c:172)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 384 bytes in 1 blocks are definitely lost in loss record 5 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x401408: _play_ (CoinGame4.c:258)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 640 bytes in 5 blocks are definitely lost in loss record 7 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x401029: _play_ (CoinGame4.c:155)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 720 bytes in 5 blocks are definitely lost in loss record 8 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x4024EA: create1DArray_int64_t (Util.c:23)
==9057==    by 0x400EA2: _play_ (CoinGame4.c:142)
==9057==    by 0x402034: main (CoinGame4.c:570)
==9057== 
==9057== 800 bytes in 1 blocks are definitely lost in loss record 14 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x402696: copy1DArray_int64_t (Util.c:80)
==9057==    by 0x401EE6: main (CoinGame4.c:557)
==9057== 
==9057== 43,200 bytes in 54 blocks are definitely lost in loss record 15 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x402696: copy1DArray_int64_t (Util.c:80)
==9057==    by 0x401D5B: _findMoves_ (CoinGame4.c:495)
==9057==    by 0x401F79: main (CoinGame4.c:562)
==9057== 
==9057== 44,000 bytes in 55 blocks are definitely lost in loss record 16 of 16
==9057==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9057==    by 0x401C87: _findMoves_ (CoinGame4.c:491)
==9057==    by 0x401F79: main (CoinGame4.c:562)
==9057== 
==9057== LEAK SUMMARY:
==9057==    definitely lost: 90,264 bytes in 151 blocks
==9057==    indirectly lost: 0 bytes in 0 blocks
==9057==      possibly lost: 0 bytes in 0 blocks
==9057==    still reachable: 4,400 bytes in 6 blocks
==9057==         suppressed: 0 bytes in 0 blocks
==9057== Reachable blocks (those to which a pointer was found) are not shown.
==9057== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9057== 
==9057== For counts of detected and suppressed errors, rerun with: -v
==9057== ERROR SUMMARY: 11 errors from 11 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_nocopy CoinGame4 ===
The Valgrind memory detector as below:
==9073== Memcheck, a memory error detector
==9073== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9073== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9073== Command: ./CoinGame4.out
==9073== Parent PID: 8113
==9073== 
==9073== Invalid read of size 8
==9073==    at 0x400DDB: _play_ (CoinGame4.c:112)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073==  Address 0x5204038 is 8 bytes before a block of size 800 alloc'd
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x401E31: main (CoinGame4.c:581)
==9073== 
==9073== 
==9073== HEAP SUMMARY:
==9073==     in use at exit: 3,464 bytes in 43 blocks
==9073==   total heap usage: 44 allocs, 1 frees, 11,656 bytes allocated
==9073== 
==9073== 40 bytes in 5 blocks are definitely lost in loss record 1 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x401357: _play_ (CoinGame4.c:237)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== 80 bytes in 5 blocks are definitely lost in loss record 2 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x4012D5: _play_ (CoinGame4.c:219)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== 160 bytes in 10 blocks are definitely lost in loss record 3 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x401227: _play_ (CoinGame4.c:197)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== 240 bytes in 10 blocks are definitely lost in loss record 4 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x40119D: _play_ (CoinGame4.c:182)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== 384 bytes in 1 blocks are definitely lost in loss record 5 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x401408: _play_ (CoinGame4.c:271)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== 640 bytes in 5 blocks are definitely lost in loss record 7 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x401029: _play_ (CoinGame4.c:165)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== 720 bytes in 5 blocks are definitely lost in loss record 8 of 9
==9073==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9073==    by 0x402354: create1DArray_int64_t (Util.c:23)
==9073==    by 0x400EA2: _play_ (CoinGame4.c:152)
==9073==    by 0x401E9E: main (CoinGame4.c:596)
==9073== 
==9073== LEAK SUMMARY:
==9073==    definitely lost: 2,264 bytes in 41 blocks
==9073==    indirectly lost: 0 bytes in 0 blocks
==9073==      possibly lost: 0 bytes in 0 blocks
==9073==    still reachable: 1,200 bytes in 2 blocks
==9073==         suppressed: 0 bytes in 0 blocks
==9073== Reachable blocks (those to which a pointer was found) are not shown.
==9073== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9073== 
==9073== For counts of detected and suppressed errors, rerun with: -v
==9073== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_nocopy_dealloc CoinGame4 ===
The Valgrind memory detector as below:
==9088== Memcheck, a memory error detector
==9088== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9088== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9088== Command: ./CoinGame4.out
==9088== Parent PID: 8113
==9088== 
==9088== Invalid read of size 8
==9088==    at 0x400E13: _play_ (CoinGame4.c:120)
==9088==    by 0x4023BA: main (CoinGame4.c:645)
==9088==  Address 0x5204038 is 8 bytes before a block of size 800 alloc'd
==9088==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9088==    by 0x402931: create1DArray_int64_t (Util.c:23)
==9088==    by 0x40227C: main (CoinGame4.c:626)
==9088== 
==9088== 
==9088== HEAP SUMMARY:
==9088==     in use at exit: 0 bytes in 0 blocks
==9088==   total heap usage: 44 allocs, 44 frees, 11,656 bytes allocated
==9088== 
==9088== All heap blocks were freed -- no leaks are possible
==9088== 
==9088== For counts of detected and suppressed errors, rerun with: -v
==9088== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Alice take coin ( 0 , 9 ), Bob take coin ( 1 , 8 ) 
Alice take coin ( 2 , 7 ), Bob take coin ( 3 , 6 ) 
Alice take coin ( 4 , 5 ), Bob take coin ( 5 , 4 ) 
Alice take coin ( 6 , 3 ), Bob take coin ( 7 , 2 ) 
Alice take coin ( 8 , 1 ), Bob take coin ( 9 , 0 ) 
The total amount of money (maximum) Bob gets is 20
The total amount of money (maximum) Alice gets is 25



=== Test report for ea_dealloc factorial ===
The Valgrind memory detector as below:
==9106== Memcheck, a memory error detector
==9106== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9106== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9106== Command: ./factorial.out
==9106== Parent PID: 8113
==9106== 
==9106== 
==9106== HEAP SUMMARY:
==9106==     in use at exit: 0 bytes in 0 blocks
==9106==   total heap usage: 2 allocs, 2 frees, 8,384 bytes allocated
==9106== 
==9106== All heap blocks were freed -- no leaks are possible
==9106== 
==9106== For counts of detected and suppressed errors, rerun with: -v
==9106== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass factorial test case


=== Test report for ea_naive factorial ===
The Valgrind memory detector as below:
==9121== Memcheck, a memory error detector
==9121== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9121== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9121== Command: ./factorial.out
==9121== Parent PID: 8113
==9121== 
==9121== 
==9121== HEAP SUMMARY:
==9121==     in use at exit: 192 bytes in 1 blocks
==9121==   total heap usage: 2 allocs, 1 frees, 8,384 bytes allocated
==9121== 
==9121== LEAK SUMMARY:
==9121==    definitely lost: 0 bytes in 0 blocks
==9121==    indirectly lost: 0 bytes in 0 blocks
==9121==      possibly lost: 0 bytes in 0 blocks
==9121==    still reachable: 192 bytes in 1 blocks
==9121==         suppressed: 0 bytes in 0 blocks
==9121== Reachable blocks (those to which a pointer was found) are not shown.
==9121== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9121== 
==9121== For counts of detected and suppressed errors, rerun with: -v
==9121== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass factorial test case


=== Test report for ea_nocopy factorial ===
The Valgrind memory detector as below:
==9137== Memcheck, a memory error detector
==9137== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9137== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9137== Command: ./factorial.out
==9137== Parent PID: 8113
==9137== 
==9137== 
==9137== HEAP SUMMARY:
==9137==     in use at exit: 192 bytes in 1 blocks
==9137==   total heap usage: 2 allocs, 1 frees, 8,384 bytes allocated
==9137== 
==9137== LEAK SUMMARY:
==9137==    definitely lost: 0 bytes in 0 blocks
==9137==    indirectly lost: 0 bytes in 0 blocks
==9137==      possibly lost: 0 bytes in 0 blocks
==9137==    still reachable: 192 bytes in 1 blocks
==9137==         suppressed: 0 bytes in 0 blocks
==9137== Reachable blocks (those to which a pointer was found) are not shown.
==9137== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9137== 
==9137== For counts of detected and suppressed errors, rerun with: -v
==9137== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass factorial test case


=== Test report for ea_nocopy_dealloc factorial ===
The Valgrind memory detector as below:
==9152== Memcheck, a memory error detector
==9152== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9152== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9152== Command: ./factorial.out
==9152== Parent PID: 8113
==9152== 
==9152== 
==9152== HEAP SUMMARY:
==9152==     in use at exit: 0 bytes in 0 blocks
==9152==   total heap usage: 2 allocs, 2 frees, 8,384 bytes allocated
==9152== 
==9152== All heap blocks were freed -- no leaks are possible
==9152== 
==9152== For counts of detected and suppressed errors, rerun with: -v
==9152== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass factorial test case


=== Test report for ea_dealloc Fibonacci ===
The Valgrind memory detector as below:
==9170== Memcheck, a memory error detector
==9170== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9170== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9170== Command: ./Fibonacci.out
==9170== Parent PID: 8113
==9170== 
==9170== 
==9170== HEAP SUMMARY:
==9170==     in use at exit: 0 bytes in 0 blocks
==9170==   total heap usage: 23 allocs, 23 frees, 10,064 bytes allocated
==9170== 
==9170== All heap blocks were freed -- no leaks are possible
==9170== 
==9170== For counts of detected and suppressed errors, rerun with: -v
==9170== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
86002416Pass Fibonacci test case


=== Test report for ea_naive Fibonacci ===
The Valgrind memory detector as below:
==9185== Memcheck, a memory error detector
==9185== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9185== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9185== Command: ./Fibonacci.out
==9185== Parent PID: 8113
==9185== 
==9185== 
==9185== HEAP SUMMARY:
==9185==     in use at exit: 1,872 bytes in 22 blocks
==9185==   total heap usage: 23 allocs, 1 frees, 10,064 bytes allocated
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 6 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400ECB: main (Fibonacci.c:107)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 7 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 8 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 9 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 10 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 11 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 12 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 13 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 14 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x400C56: _fibonacci_ (Fibonacci.c:46)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 15 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 16 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 17 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 18 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 19 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 20 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== 80 bytes in 1 blocks are definitely lost in loss record 21 of 22
==9185==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9185==    by 0x4015AC: copy1DArray_int64_t (Util.c:80)
==9185==    by 0x400CFD: _fibonacci_ (Fibonacci.c:50)
==9185==    by 0x400CCF: _fibonacci_ (Fibonacci.c:47)
==9185==    by 0x400F72: main (Fibonacci.c:116)
==9185== 
==9185== LEAK SUMMARY:
==9185==    definitely lost: 1,280 bytes in 16 blocks
==9185==    indirectly lost: 0 bytes in 0 blocks
==9185==      possibly lost: 0 bytes in 0 blocks
==9185==    still reachable: 592 bytes in 6 blocks
==9185==         suppressed: 0 bytes in 0 blocks
==9185== Reachable blocks (those to which a pointer was found) are not shown.
==9185== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9185== 
==9185== For counts of detected and suppressed errors, rerun with: -v
==9185== ERROR SUMMARY: 16 errors from 16 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
86002416Pass Fibonacci test case


=== Test report for ea_nocopy Fibonacci ===
The Valgrind memory detector as below:
==9202== Memcheck, a memory error detector
==9202== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9202== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9202== Command: ./Fibonacci.out
==9202== Parent PID: 8113
==9202== 
==9202== 
==9202== HEAP SUMMARY:
==9202==     in use at exit: 352 bytes in 3 blocks
==9202==   total heap usage: 4 allocs, 1 frees, 8,544 bytes allocated
==9202== 
==9202== LEAK SUMMARY:
==9202==    definitely lost: 0 bytes in 0 blocks
==9202==    indirectly lost: 0 bytes in 0 blocks
==9202==      possibly lost: 0 bytes in 0 blocks
==9202==    still reachable: 352 bytes in 3 blocks
==9202==         suppressed: 0 bytes in 0 blocks
==9202== Reachable blocks (those to which a pointer was found) are not shown.
==9202== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9202== 
==9202== For counts of detected and suppressed errors, rerun with: -v
==9202== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
85999680Pass Fibonacci test case


=== Test report for ea_nocopy_dealloc Fibonacci ===
The Valgrind memory detector as below:
==9217== Memcheck, a memory error detector
==9217== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9217== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9217== Command: ./Fibonacci.out
==9217== Parent PID: 8113
==9217== 
==9217== 
==9217== HEAP SUMMARY:
==9217==     in use at exit: 0 bytes in 0 blocks
==9217==   total heap usage: 4 allocs, 4 frees, 8,544 bytes allocated
==9217== 
==9217== All heap blocks were freed -- no leaks are possible
==9217== 
==9217== For counts of detected and suppressed errors, rerun with: -v
==9217== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
85999680Pass Fibonacci test case


=== Test report for ea_dealloc fileread ===
The Valgrind memory detector as below:
==9237== Memcheck, a memory error detector
==9237== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9237== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9237== Command: ./fileread.out
==9237== Parent PID: 8113
==9237== 
==9237== 
==9237== HEAP SUMMARY:
==9237==     in use at exit: 0 bytes in 0 blocks
==9237==   total heap usage: 11 allocs, 11 frees, 58,363 bytes allocated
==9237== 
==9237== All heap blocks were freed -- no leaks are possible
==9237== 
==9237== For counts of detected and suppressed errors, rerun with: -v
==9237== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
READ:         4096 bytes



=== Test report for ea_naive fileread ===
The Valgrind memory detector as below:
==9253== Memcheck, a memory error detector
==9253== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9253== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9253== Command: ./fileread.out
==9253== Parent PID: 8113
==9253== 
==9253== 
==9253== HEAP SUMMARY:
==9253==     in use at exit: 8,624 bytes in 5 blocks
==9253==   total heap usage: 11 allocs, 6 frees, 58,363 bytes allocated
==9253== 
==9253== LEAK SUMMARY:
==9253==    definitely lost: 0 bytes in 0 blocks
==9253==    indirectly lost: 0 bytes in 0 blocks
==9253==      possibly lost: 0 bytes in 0 blocks
==9253==    still reachable: 8,624 bytes in 5 blocks
==9253==         suppressed: 0 bytes in 0 blocks
==9253== Reachable blocks (those to which a pointer was found) are not shown.
==9253== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9253== 
==9253== For counts of detected and suppressed errors, rerun with: -v
==9253== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
READ:         4096 bytes



=== Test report for ea_nocopy fileread ===
The Valgrind memory detector as below:
==9268== Memcheck, a memory error detector
==9268== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9268== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9268== Command: ./fileread.out
==9268== Parent PID: 8113
==9268== 
==9268== 
==9268== HEAP SUMMARY:
==9268==     in use at exit: 4,528 bytes in 4 blocks
==9268==   total heap usage: 10 allocs, 6 frees, 54,267 bytes allocated
==9268== 
==9268== LEAK SUMMARY:
==9268==    definitely lost: 0 bytes in 0 blocks
==9268==    indirectly lost: 0 bytes in 0 blocks
==9268==      possibly lost: 0 bytes in 0 blocks
==9268==    still reachable: 4,528 bytes in 4 blocks
==9268==         suppressed: 0 bytes in 0 blocks
==9268== Reachable blocks (those to which a pointer was found) are not shown.
==9268== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9268== 
==9268== For counts of detected and suppressed errors, rerun with: -v
==9268== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
READ:         4096 bytes



=== Test report for ea_nocopy_dealloc fileread ===
The Valgrind memory detector as below:
==9283== Memcheck, a memory error detector
==9283== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9283== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9283== Command: ./fileread.out
==9283== Parent PID: 8113
==9283== 
==9283== 
==9283== HEAP SUMMARY:
==9283==     in use at exit: 0 bytes in 0 blocks
==9283==   total heap usage: 10 allocs, 10 frees, 54,267 bytes allocated
==9283== 
==9283== All heap blocks were freed -- no leaks are possible
==9283== 
==9283== For counts of detected and suppressed errors, rerun with: -v
==9283== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
READ:         4096 bytes



=== Test report for ea_dealloc fileread2 ===
The Valgrind memory detector as below:
==9301== Memcheck, a memory error detector
==9301== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9301== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9301== Command: ./fileread2.out
==9301== Parent PID: 8113
==9301== 
==9301== 
==9301== HEAP SUMMARY:
==9301==     in use at exit: 0 bytes in 0 blocks
==9301==   total heap usage: 77 allocs, 77 frees, 62,323 bytes allocated
==9301== 
==9301== All heap blocks were freed -- no leaks are possible
==9301== 
==9301== For counts of detected and suppressed errors, rerun with: -v
==9301== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
[]



=== Test report for ea_naive fileread2 ===
The Valgrind memory detector as below:
==9317== Memcheck, a memory error detector
==9317== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9317== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9317== Command: ./fileread2.out
==9317== Parent PID: 8113
==9317== 
==9317== 
==9317== HEAP SUMMARY:
==9317==     in use at exit: 13,136 bytes in 72 blocks
==9317==   total heap usage: 77 allocs, 5 frees, 62,323 bytes allocated
==9317== 
==9317== 0 bytes in 1 blocks are definitely lost in loss record 1 of 9
==9317==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9317==    by 0x4012A5: create1DArray_int64_t (Util.c:23)
==9317==    by 0x400E47: _print_pbm_ (fileread2.c:145)
==9317==    by 0x4011D5: main (fileread2.c:192)
==9317== 
==9317== 0 bytes in 64 blocks are definitely lost in loss record 2 of 9
==9317==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9317==    by 0x4012A5: create1DArray_int64_t (Util.c:23)
==9317==    by 0x400DEC: _print_pbm_ (fileread2.c:126)
==9317==    by 0x4011D5: main (fileread2.c:192)
==9317== 
==9317== 8 bytes in 1 blocks are definitely lost in loss record 3 of 9
==9317==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9317==    by 0x4012A5: create1DArray_int64_t (Util.c:23)
==9317==    by 0x400C7D: _print_pbm_ (fileread2.c:50)
==9317==    by 0x4011D5: main (fileread2.c:192)
==9317== 
==9317== 16 bytes in 1 blocks are definitely lost in loss record 4 of 9
==9317==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9317==    by 0x4012A5: create1DArray_int64_t (Util.c:23)
==9317==    by 0x400C0B: _print_pbm_ (fileread2.c:35)
==9317==    by 0x4011D5: main (fileread2.c:192)
==9317== 
==9317== LEAK SUMMARY:
==9317==    definitely lost: 24 bytes in 67 blocks
==9317==    indirectly lost: 0 bytes in 0 blocks
==9317==      possibly lost: 0 bytes in 0 blocks
==9317==    still reachable: 13,112 bytes in 5 blocks
==9317==         suppressed: 0 bytes in 0 blocks
==9317== Reachable blocks (those to which a pointer was found) are not shown.
==9317== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9317== 
==9317== For counts of detected and suppressed errors, rerun with: -v
==9317== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
[]



=== Test report for ea_nocopy fileread2 ===
The Valgrind memory detector as below:
==9332== Memcheck, a memory error detector
==9332== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9332== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9332== Command: ./fileread2.out
==9332== Parent PID: 8113
==9332== 
==9332== 
==9332== HEAP SUMMARY:
==9332==     in use at exit: 4,944 bytes in 70 blocks
==9332==   total heap usage: 75 allocs, 5 frees, 54,131 bytes allocated
==9332== 
==9332== 0 bytes in 1 blocks are definitely lost in loss record 1 of 7
==9332==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9332==    by 0x401240: create1DArray_int64_t (Util.c:23)
==9332==    by 0x400E47: _print_pbm_ (fileread2.c:150)
==9332==    by 0x401170: main (fileread2.c:200)
==9332== 
==9332== 0 bytes in 64 blocks are definitely lost in loss record 2 of 7
==9332==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9332==    by 0x401240: create1DArray_int64_t (Util.c:23)
==9332==    by 0x400DEC: _print_pbm_ (fileread2.c:130)
==9332==    by 0x401170: main (fileread2.c:200)
==9332== 
==9332== 8 bytes in 1 blocks are definitely lost in loss record 3 of 7
==9332==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9332==    by 0x401240: create1DArray_int64_t (Util.c:23)
==9332==    by 0x400C7D: _print_pbm_ (fileread2.c:50)
==9332==    by 0x401170: main (fileread2.c:200)
==9332== 
==9332== 16 bytes in 1 blocks are definitely lost in loss record 4 of 7
==9332==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9332==    by 0x401240: create1DArray_int64_t (Util.c:23)
==9332==    by 0x400C0B: _print_pbm_ (fileread2.c:35)
==9332==    by 0x401170: main (fileread2.c:200)
==9332== 
==9332== LEAK SUMMARY:
==9332==    definitely lost: 24 bytes in 67 blocks
==9332==    indirectly lost: 0 bytes in 0 blocks
==9332==      possibly lost: 0 bytes in 0 blocks
==9332==    still reachable: 4,920 bytes in 3 blocks
==9332==         suppressed: 0 bytes in 0 blocks
==9332== Reachable blocks (those to which a pointer was found) are not shown.
==9332== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9332== 
==9332== For counts of detected and suppressed errors, rerun with: -v
==9332== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
[]



=== Test report for ea_nocopy_dealloc fileread2 ===
The Valgrind memory detector as below:
==9348== Memcheck, a memory error detector
==9348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9348== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9348== Command: ./fileread2.out
==9348== Parent PID: 8113
==9348== 
==9348== 
==9348== HEAP SUMMARY:
==9348==     in use at exit: 0 bytes in 0 blocks
==9348==   total heap usage: 75 allocs, 75 frees, 54,131 bytes allocated
==9348== 
==9348== All heap blocks were freed -- no leaks are possible
==9348== 
==9348== For counts of detected and suppressed errors, rerun with: -v
==9348== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
[]



=== Test report for ea_dealloc FunctionCall1 ===
The Valgrind memory detector as below:
==9367== Memcheck, a memory error detector
==9367== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9367== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9367== Command: ./FunctionCall1.out
==9367== Parent PID: 8113
==9367== 
==9367== 
==9367== HEAP SUMMARY:
==9367==     in use at exit: 0 bytes in 0 blocks
==9367==   total heap usage: 14 allocs, 14 frees, 8,712 bytes allocated
==9367== 
==9367== All heap blocks were freed -- no leaks are possible
==9367== 
==9367== For counts of detected and suppressed errors, rerun with: -v
==9367== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=3



=== Test report for ea_naive FunctionCall1 ===
The Valgrind memory detector as below:
==9382== Memcheck, a memory error detector
==9382== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9382== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9382== Command: ./FunctionCall1.out
==9382== Parent PID: 8113
==9382== 
==9382== 
==9382== HEAP SUMMARY:
==9382==     in use at exit: 520 bytes in 13 blocks
==9382==   total heap usage: 14 allocs, 1 frees, 8,712 bytes allocated
==9382== 
==9382== 40 bytes in 1 blocks are definitely lost in loss record 13 of 13
==9382==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9382==    by 0x401661: copy1DArray_int64_t (Util.c:80)
==9382==    by 0x400DCF: main (FunctionCall1.c:77)
==9382== 
==9382== LEAK SUMMARY:
==9382==    definitely lost: 40 bytes in 1 blocks
==9382==    indirectly lost: 0 bytes in 0 blocks
==9382==      possibly lost: 0 bytes in 0 blocks
==9382==    still reachable: 480 bytes in 12 blocks
==9382==         suppressed: 0 bytes in 0 blocks
==9382== Reachable blocks (those to which a pointer was found) are not shown.
==9382== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9382== 
==9382== For counts of detected and suppressed errors, rerun with: -v
==9382== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=3



=== Test report for ea_nocopy FunctionCall1 ===
The Valgrind memory detector as below:
==9397== Memcheck, a memory error detector
==9397== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9397== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9397== Command: ./FunctionCall1.out
==9397== Parent PID: 8113
==9397== 
==9397== 
==9397== HEAP SUMMARY:
==9397==     in use at exit: 240 bytes in 6 blocks
==9397==   total heap usage: 7 allocs, 1 frees, 8,432 bytes allocated
==9397== 
==9397== LEAK SUMMARY:
==9397==    definitely lost: 0 bytes in 0 blocks
==9397==    indirectly lost: 0 bytes in 0 blocks
==9397==      possibly lost: 0 bytes in 0 blocks
==9397==    still reachable: 240 bytes in 6 blocks
==9397==         suppressed: 0 bytes in 0 blocks
==9397== Reachable blocks (those to which a pointer was found) are not shown.
==9397== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9397== 
==9397== For counts of detected and suppressed errors, rerun with: -v
==9397== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=3



=== Test report for ea_nocopy_dealloc FunctionCall1 ===
The Valgrind memory detector as below:
==9412== Memcheck, a memory error detector
==9412== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9412== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9412== Command: ./FunctionCall1.out
==9412== Parent PID: 8113
==9412== 
==9412== 
==9412== HEAP SUMMARY:
==9412==     in use at exit: 0 bytes in 0 blocks
==9412==   total heap usage: 7 allocs, 7 frees, 8,432 bytes allocated
==9412== 
==9412== All heap blocks were freed -- no leaks are possible
==9412== 
==9412== For counts of detected and suppressed errors, rerun with: -v
==9412== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=3



=== Test report for ea_dealloc FunctionCall2 ===
The Valgrind memory detector as below:
==9431== Memcheck, a memory error detector
==9431== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9431== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9431== Command: ./FunctionCall2.out
==9431== Parent PID: 8113
==9431== 
==9431== 
==9431== HEAP SUMMARY:
==9431==     in use at exit: 0 bytes in 0 blocks
==9431==   total heap usage: 13 allocs, 13 frees, 8,672 bytes allocated
==9431== 
==9431== All heap blocks were freed -- no leaks are possible
==9431== 
==9431== For counts of detected and suppressed errors, rerun with: -v
==9431== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=0



=== Test report for ea_naive FunctionCall2 ===
The Valgrind memory detector as below:
==9446== Memcheck, a memory error detector
==9446== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9446== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9446== Command: ./FunctionCall2.out
==9446== Parent PID: 8113
==9446== 
==9446== 
==9446== HEAP SUMMARY:
==9446==     in use at exit: 480 bytes in 12 blocks
==9446==   total heap usage: 13 allocs, 1 frees, 8,672 bytes allocated
==9446== 
==9446== 40 bytes in 1 blocks are definitely lost in loss record 12 of 12
==9446==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9446==    by 0x4016A7: copy1DArray_int64_t (Util.c:80)
==9446==    by 0x400DF7: main (FunctionCall2.c:93)
==9446== 
==9446== LEAK SUMMARY:
==9446==    definitely lost: 40 bytes in 1 blocks
==9446==    indirectly lost: 0 bytes in 0 blocks
==9446==      possibly lost: 0 bytes in 0 blocks
==9446==    still reachable: 440 bytes in 11 blocks
==9446==         suppressed: 0 bytes in 0 blocks
==9446== Reachable blocks (those to which a pointer was found) are not shown.
==9446== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9446== 
==9446== For counts of detected and suppressed errors, rerun with: -v
==9446== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=0



=== Test report for ea_nocopy FunctionCall2 ===
The Valgrind memory detector as below:
==9461== Memcheck, a memory error detector
==9461== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9461== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9461== Command: ./FunctionCall2.out
==9461== Parent PID: 8113
==9461== 
==9461== 
==9461== HEAP SUMMARY:
==9461==     in use at exit: 240 bytes in 6 blocks
==9461==   total heap usage: 7 allocs, 1 frees, 8,432 bytes allocated
==9461== 
==9461== LEAK SUMMARY:
==9461==    definitely lost: 0 bytes in 0 blocks
==9461==    indirectly lost: 0 bytes in 0 blocks
==9461==      possibly lost: 0 bytes in 0 blocks
==9461==    still reachable: 240 bytes in 6 blocks
==9461==         suppressed: 0 bytes in 0 blocks
==9461== Reachable blocks (those to which a pointer was found) are not shown.
==9461== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9461== 
==9461== For counts of detected and suppressed errors, rerun with: -v
==9461== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=0



=== Test report for ea_nocopy_dealloc FunctionCall2 ===
The Valgrind memory detector as below:
==9476== Memcheck, a memory error detector
==9476== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9476== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9476== Command: ./FunctionCall2.out
==9476== Parent PID: 8113
==9476== 
==9476== 
==9476== HEAP SUMMARY:
==9476==     in use at exit: 0 bytes in 0 blocks
==9476==   total heap usage: 7 allocs, 7 frees, 8,432 bytes allocated
==9476== 
==9476== All heap blocks were freed -- no leaks are possible
==9476== 
==9476== For counts of detected and suppressed errors, rerun with: -v
==9476== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=0



=== Test report for ea_dealloc FunctionCall3 ===
The Valgrind memory detector as below:
==9496== Memcheck, a memory error detector
==9496== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9496== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9496== Command: ./FunctionCall3.out
==9496== Parent PID: 8113
==9496== 
==9496== 
==9496== HEAP SUMMARY:
==9496==     in use at exit: 0 bytes in 0 blocks
==9496==   total heap usage: 14 allocs, 14 frees, 8,712 bytes allocated
==9496== 
==9496== All heap blocks were freed -- no leaks are possible
==9496== 
==9496== For counts of detected and suppressed errors, rerun with: -v
==9496== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=0
b[2]=0
c[2]=0



=== Test report for ea_naive FunctionCall3 ===
The Valgrind memory detector as below:
==9511== Memcheck, a memory error detector
==9511== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9511== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9511== Command: ./FunctionCall3.out
==9511== Parent PID: 8113
==9511== 
==9511== 
==9511== HEAP SUMMARY:
==9511==     in use at exit: 520 bytes in 13 blocks
==9511==   total heap usage: 14 allocs, 1 frees, 8,712 bytes allocated
==9511== 
==9511== 40 bytes in 1 blocks are definitely lost in loss record 13 of 13
==9511==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9511==    by 0x401637: copy1DArray_int64_t (Util.c:80)
==9511==    by 0x400DA5: main (FunctionCall3.c:69)
==9511== 
==9511== LEAK SUMMARY:
==9511==    definitely lost: 40 bytes in 1 blocks
==9511==    indirectly lost: 0 bytes in 0 blocks
==9511==      possibly lost: 0 bytes in 0 blocks
==9511==    still reachable: 480 bytes in 12 blocks
==9511==         suppressed: 0 bytes in 0 blocks
==9511== Reachable blocks (those to which a pointer was found) are not shown.
==9511== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9511== 
==9511== For counts of detected and suppressed errors, rerun with: -v
==9511== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=0
b[2]=0
c[2]=0



=== Test report for ea_nocopy FunctionCall3 ===
The Valgrind memory detector as below:
==9526== Memcheck, a memory error detector
==9526== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9526== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9526== Command: ./FunctionCall3.out
==9526== Parent PID: 8113
==9526== 
==9526== 
==9526== HEAP SUMMARY:
==9526==     in use at exit: 240 bytes in 6 blocks
==9526==   total heap usage: 7 allocs, 1 frees, 8,432 bytes allocated
==9526== 
==9526== LEAK SUMMARY:
==9526==    definitely lost: 0 bytes in 0 blocks
==9526==    indirectly lost: 0 bytes in 0 blocks
==9526==      possibly lost: 0 bytes in 0 blocks
==9526==    still reachable: 240 bytes in 6 blocks
==9526==         suppressed: 0 bytes in 0 blocks
==9526== Reachable blocks (those to which a pointer was found) are not shown.
==9526== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9526== 
==9526== For counts of detected and suppressed errors, rerun with: -v
==9526== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=0
b[2]=0
c[2]=0



=== Test report for ea_nocopy_dealloc FunctionCall3 ===
The Valgrind memory detector as below:
==9542== Memcheck, a memory error detector
==9542== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9542== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9542== Command: ./FunctionCall3.out
==9542== Parent PID: 8113
==9542== 
==9542== 
==9542== HEAP SUMMARY:
==9542==     in use at exit: 0 bytes in 0 blocks
==9542==   total heap usage: 7 allocs, 7 frees, 8,432 bytes allocated
==9542== 
==9542== All heap blocks were freed -- no leaks are possible
==9542== 
==9542== For counts of detected and suppressed errors, rerun with: -v
==9542== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=0
b[2]=0
c[2]=0



=== Test report for ea_dealloc FunctionCall4 ===
The Valgrind memory detector as below:
==9560== Memcheck, a memory error detector
==9560== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9560== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9560== Command: ./FunctionCall4.out
==9560== Parent PID: 8113
==9560== 
==9560== 
==9560== HEAP SUMMARY:
==9560==     in use at exit: 0 bytes in 0 blocks
==9560==   total heap usage: 15 allocs, 15 frees, 8,752 bytes allocated
==9560== 
==9560== All heap blocks were freed -- no leaks are possible
==9560== 
==9560== For counts of detected and suppressed errors, rerun with: -v
==9560== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=1



=== Test report for ea_naive FunctionCall4 ===
The Valgrind memory detector as below:
==9575== Memcheck, a memory error detector
==9575== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9575== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9575== Command: ./FunctionCall4.out
==9575== Parent PID: 8113
==9575== 
==9575== 
==9575== HEAP SUMMARY:
==9575==     in use at exit: 560 bytes in 14 blocks
==9575==   total heap usage: 15 allocs, 1 frees, 8,752 bytes allocated
==9575== 
==9575== 40 bytes in 1 blocks are definitely lost in loss record 13 of 14
==9575==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9575==    by 0x401796: copy1DArray_int64_t (Util.c:80)
==9575==    by 0x400EE6: main (FunctionCall4.c:115)
==9575== 
==9575== 40 bytes in 1 blocks are definitely lost in loss record 14 of 14
==9575==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9575==    by 0x4015EA: create1DArray_int64_t (Util.c:23)
==9575==    by 0x400C7C: _func_ (FunctionCall4.c:45)
==9575==    by 0x401285: main (FunctionCall4.c:183)
==9575== 
==9575== LEAK SUMMARY:
==9575==    definitely lost: 80 bytes in 2 blocks
==9575==    indirectly lost: 0 bytes in 0 blocks
==9575==      possibly lost: 0 bytes in 0 blocks
==9575==    still reachable: 480 bytes in 12 blocks
==9575==         suppressed: 0 bytes in 0 blocks
==9575== Reachable blocks (those to which a pointer was found) are not shown.
==9575== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9575== 
==9575== For counts of detected and suppressed errors, rerun with: -v
==9575== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=1



=== Test report for ea_nocopy FunctionCall4 ===
The Valgrind memory detector as below:
==9590== Memcheck, a memory error detector
==9590== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9590== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9590== Command: ./FunctionCall4.out
==9590== Parent PID: 8113
==9590== 
==9590== 
==9590== HEAP SUMMARY:
==9590==     in use at exit: 280 bytes in 7 blocks
==9590==   total heap usage: 8 allocs, 1 frees, 8,472 bytes allocated
==9590== 
==9590== LEAK SUMMARY:
==9590==    definitely lost: 0 bytes in 0 blocks
==9590==    indirectly lost: 0 bytes in 0 blocks
==9590==      possibly lost: 0 bytes in 0 blocks
==9590==    still reachable: 280 bytes in 7 blocks
==9590==         suppressed: 0 bytes in 0 blocks
==9590== Reachable blocks (those to which a pointer was found) are not shown.
==9590== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9590== 
==9590== For counts of detected and suppressed errors, rerun with: -v
==9590== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=1



=== Test report for ea_nocopy_dealloc FunctionCall4 ===
The Valgrind memory detector as below:
==9606== Memcheck, a memory error detector
==9606== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9606== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9606== Command: ./FunctionCall4.out
==9606== Parent PID: 8113
==9606== 
==9606== 
==9606== HEAP SUMMARY:
==9606==     in use at exit: 0 bytes in 0 blocks
==9606==   total heap usage: 8 allocs, 8 frees, 8,472 bytes allocated
==9606== 
==9606== All heap blocks were freed -- no leaks are possible
==9606== 
==9606== For counts of detected and suppressed errors, rerun with: -v
==9606== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[2]=3
b[2]=0
c[2]=1



=== Test report for ea_dealloc FunctionOverload ===
The Valgrind memory detector as below:
==9624== Memcheck, a memory error detector
==9624== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9624== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9624== Command: ./FunctionOverload.out
==9624== Parent PID: 8113
==9624== 
==9624== 
==9624== HEAP SUMMARY:
==9624==     in use at exit: 0 bytes in 0 blocks
==9624==   total heap usage: 2 allocs, 2 frees, 128 bytes allocated
==9624== 
==9624== All heap blocks were freed -- no leaks are possible
==9624== 
==9624== For counts of detected and suppressed errors, rerun with: -v
==9624== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_naive FunctionOverload ===
The Valgrind memory detector as below:
==9639== Memcheck, a memory error detector
==9639== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9639== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9639== Command: ./FunctionOverload.out
==9639== Parent PID: 8113
==9639== 
==9639== 
==9639== HEAP SUMMARY:
==9639==     in use at exit: 128 bytes in 2 blocks
==9639==   total heap usage: 2 allocs, 0 frees, 128 bytes allocated
==9639== 
==9639== LEAK SUMMARY:
==9639==    definitely lost: 0 bytes in 0 blocks
==9639==    indirectly lost: 0 bytes in 0 blocks
==9639==      possibly lost: 0 bytes in 0 blocks
==9639==    still reachable: 128 bytes in 2 blocks
==9639==         suppressed: 0 bytes in 0 blocks
==9639== Reachable blocks (those to which a pointer was found) are not shown.
==9639== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9639== 
==9639== For counts of detected and suppressed errors, rerun with: -v
==9639== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_nocopy FunctionOverload ===
The Valgrind memory detector as below:
==9655== Memcheck, a memory error detector
==9655== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9655== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9655== Command: ./FunctionOverload.out
==9655== Parent PID: 8113
==9655== 
==9655== 
==9655== HEAP SUMMARY:
==9655==     in use at exit: 64 bytes in 1 blocks
==9655==   total heap usage: 1 allocs, 0 frees, 64 bytes allocated
==9655== 
==9655== LEAK SUMMARY:
==9655==    definitely lost: 0 bytes in 0 blocks
==9655==    indirectly lost: 0 bytes in 0 blocks
==9655==      possibly lost: 0 bytes in 0 blocks
==9655==    still reachable: 64 bytes in 1 blocks
==9655==         suppressed: 0 bytes in 0 blocks
==9655== Reachable blocks (those to which a pointer was found) are not shown.
==9655== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9655== 
==9655== For counts of detected and suppressed errors, rerun with: -v
==9655== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_nocopy_dealloc FunctionOverload ===
The Valgrind memory detector as below:
==9670== Memcheck, a memory error detector
==9670== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9670== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9670== Command: ./FunctionOverload.out
==9670== Parent PID: 8113
==9670== 
==9670== 
==9670== HEAP SUMMARY:
==9670==     in use at exit: 0 bytes in 0 blocks
==9670==   total heap usage: 1 allocs, 1 frees, 64 bytes allocated
==9670== 
==9670== All heap blocks were freed -- no leaks are possible
==9670== 
==9670== For counts of detected and suppressed errors, rerun with: -v
==9670== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_dealloc FunctionOverload2 ===
The Valgrind memory detector as below:
==9688== Memcheck, a memory error detector
==9688== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9688== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9688== Command: ./FunctionOverload2.out
==9688== Parent PID: 8113
==9688== 
==9688== 
==9688== HEAP SUMMARY:
==9688==     in use at exit: 0 bytes in 0 blocks
==9688==   total heap usage: 7 allocs, 7 frees, 448 bytes allocated
==9688== 
==9688== All heap blocks were freed -- no leaks are possible
==9688== 
==9688== For counts of detected and suppressed errors, rerun with: -v
==9688== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_naive FunctionOverload2 ===
The Valgrind memory detector as below:
==9703== Memcheck, a memory error detector
==9703== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9703== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9703== Command: ./FunctionOverload2.out
==9703== Parent PID: 8113
==9703== 
==9703== 
==9703== HEAP SUMMARY:
==9703==     in use at exit: 448 bytes in 7 blocks
==9703==   total heap usage: 7 allocs, 0 frees, 448 bytes allocated
==9703== 
==9703== 64 bytes in 1 blocks are definitely lost in loss record 7 of 7
==9703==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9703==    by 0x4011F5: create1DArray_int64_t (Util.c:23)
==9703==    by 0x400D3D: _Cash_1_ (FunctionOverload2.c:85)
==9703==    by 0x4010FC: main (FunctionOverload2.c:171)
==9703== 
==9703== LEAK SUMMARY:
==9703==    definitely lost: 64 bytes in 1 blocks
==9703==    indirectly lost: 0 bytes in 0 blocks
==9703==      possibly lost: 0 bytes in 0 blocks
==9703==    still reachable: 384 bytes in 6 blocks
==9703==         suppressed: 0 bytes in 0 blocks
==9703== Reachable blocks (those to which a pointer was found) are not shown.
==9703== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9703== 
==9703== For counts of detected and suppressed errors, rerun with: -v
==9703== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_nocopy FunctionOverload2 ===
The Valgrind memory detector as below:
==9719== Memcheck, a memory error detector
==9719== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9719== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9719== Command: ./FunctionOverload2.out
==9719== Parent PID: 8113
==9719== 
==9719== 
==9719== HEAP SUMMARY:
==9719==     in use at exit: 192 bytes in 3 blocks
==9719==   total heap usage: 3 allocs, 0 frees, 192 bytes allocated
==9719== 
==9719== LEAK SUMMARY:
==9719==    definitely lost: 0 bytes in 0 blocks
==9719==    indirectly lost: 0 bytes in 0 blocks
==9719==      possibly lost: 0 bytes in 0 blocks
==9719==    still reachable: 192 bytes in 3 blocks
==9719==         suppressed: 0 bytes in 0 blocks
==9719== Reachable blocks (those to which a pointer was found) are not shown.
==9719== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9719== 
==9719== For counts of detected and suppressed errors, rerun with: -v
==9719== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_nocopy_dealloc FunctionOverload2 ===
The Valgrind memory detector as below:
==9734== Memcheck, a memory error detector
==9734== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9734== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9734== Command: ./FunctionOverload2.out
==9734== Parent PID: 8113
==9734== 
==9734== 
==9734== HEAP SUMMARY:
==9734==     in use at exit: 0 bytes in 0 blocks
==9734==   total heap usage: 3 allocs, 3 frees, 192 bytes allocated
==9734== 
==9734== All heap blocks were freed -- no leaks are possible
==9734== 
==9734== For counts of detected and suppressed errors, rerun with: -v
==9734== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:



=== Test report for ea_dealloc gcd ===
The Valgrind memory detector as below:
==9752== Memcheck, a memory error detector
==9752== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9752== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9752== Command: ./gcd.out
==9752== Parent PID: 8113
==9752== 
==9752== 
==9752== HEAP SUMMARY:
==9752==     in use at exit: 0 bytes in 0 blocks
==9752==   total heap usage: 404 allocs, 404 frees, 107,424 bytes allocated
==9752== 
==9752== All heap blocks were freed -- no leaks are possible
==9752== 
==9752== For counts of detected and suppressed errors, rerun with: -v
==9752== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
N = 10
Number: 0 Number: 0 GCD:0
Number: 0 Number: 1 GCD:1
Number: 0 Number: 2 GCD:2
Number: 0 Number: 3 GCD:3
Number: 0 Number: 4 GCD:4
Number: 0 Number: 5 GCD:5
Number: 0 Number: 6 GCD:6
Number: 0 Number: 7 GCD:7
Number: 0 Number: 8 GCD:8
Number: 0 Number: 9 GCD:9
Number: 1 Number: 0 GCD:1
Number: 1 Number: 1 GCD:1
Number: 1 Number: 2 GCD:1
Number: 1 Number: 3 GCD:1
Number: 1 Number: 4 GCD:1
Number: 1 Number: 5 GCD:1
Number: 1 Number: 6 GCD:1
Number: 1 Number: 7 GCD:1
Number: 1 Number: 8 GCD:1
Number: 1 Number: 9 GCD:1
Number: 2 Number: 0 GCD:2
Number: 2 Number: 1 GCD:1
Number: 2 Number: 2 GCD:2
Number: 2 Number: 3 GCD:1
Number: 2 Number: 4 GCD:2
Number: 2 Number: 5 GCD:1
Number: 2 Number: 6 GCD:2
Number: 2 Number: 7 GCD:1
Number: 2 Number: 8 GCD:2
Number: 2 Number: 9 GCD:1
Number: 3 Number: 0 GCD:3
Number: 3 Number: 1 GCD:1
Number: 3 Number: 2 GCD:1
Number: 3 Number: 3 GCD:3
Number: 3 Number: 4 GCD:1
Number: 3 Number: 5 GCD:1
Number: 3 Number: 6 GCD:3
Number: 3 Number: 7 GCD:1
Number: 3 Number: 8 GCD:1
Number: 3 Number: 9 GCD:3
Number: 4 Number: 0 GCD:4
Number: 4 Number: 1 GCD:1
Number: 4 Number: 2 GCD:2
Number: 4 Number: 3 GCD:1
Number: 4 Number: 4 GCD:4
Number: 4 Number: 5 GCD:1
Number: 4 Number: 6 GCD:2
Number: 4 Number: 7 GCD:1
Number: 4 Number: 8 GCD:4
Number: 4 Number: 9 GCD:1
Number: 5 Number: 0 GCD:5
Number: 5 Number: 1 GCD:1
Number: 5 Number: 2 GCD:1
Number: 5 Number: 3 GCD:1
Number: 5 Number: 4 GCD:1
Number: 5 Number: 5 GCD:5
Number: 5 Number: 6 GCD:1
Number: 5 Number: 7 GCD:1
Number: 5 Number: 8 GCD:1
Number: 5 Number: 9 GCD:1
Number: 6 Number: 0 GCD:6
Number: 6 Number: 1 GCD:1
Number: 6 Number: 2 GCD:2
Number: 6 Number: 3 GCD:3
Number: 6 Number: 4 GCD:2
Number: 6 Number: 5 GCD:1
Number: 6 Number: 6 GCD:6
Number: 6 Number: 7 GCD:1
Number: 6 Number: 8 GCD:2
Number: 6 Number: 9 GCD:3
Number: 7 Number: 0 GCD:7
Number: 7 Number: 1 GCD:1
Number: 7 Number: 2 GCD:1
Number: 7 Number: 3 GCD:1
Number: 7 Number: 4 GCD:1
Number: 7 Number: 5 GCD:1
Number: 7 Number: 6 GCD:1
Number: 7 Number: 7 GCD:7
Number: 7 Number: 8 GCD:1
Number: 7 Number: 9 GCD:1
Number: 8 Number: 0 GCD:8
Number: 8 Number: 1 GCD:1
Number: 8 Number: 2 GCD:2
Number: 8 Number: 3 GCD:1
Number: 8 Number: 4 GCD:4
Number: 8 Number: 5 GCD:1
Number: 8 Number: 6 GCD:2
Number: 8 Number: 7 GCD:1
Number: 8 Number: 8 GCD:8
Number: 8 Number: 9 GCD:1
Number: 9 Number: 0 GCD:9
Number: 9 Number: 1 GCD:1
Number: 9 Number: 2 GCD:1
Number: 9 Number: 3 GCD:3
Number: 9 Number: 4 GCD:1
Number: 9 Number: 5 GCD:1
Number: 9 Number: 6 GCD:3
Number: 9 Number: 7 GCD:1
Number: 9 Number: 8 GCD:1
Number: 9 Number: 9 GCD:9



=== Test report for ea_naive gcd ===
The Valgrind memory detector as below:
==9767== Memcheck, a memory error detector
==9767== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9767== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9767== Command: ./gcd.out
==9767== Parent PID: 8113
==9767== 
==9767== 
==9767== HEAP SUMMARY:
==9767==     in use at exit: 99,232 bytes in 403 blocks
==9767==   total heap usage: 404 allocs, 1 frees, 107,424 bytes allocated
==9767== 
==9767== 3,960 bytes in 99 blocks are definitely lost in loss record 8 of 11
==9767==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9767==    by 0x401409: create1DArray_int64_t (Util.c:23)
==9767==    by 0x401215: main (gcd.c:255)
==9767== 
==9767== 6,336 bytes in 99 blocks are definitely lost in loss record 9 of 11
==9767==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9767==    by 0x401409: create1DArray_int64_t (Util.c:23)
==9767==    by 0x40103B: main (gcd.c:225)
==9767== 
==9767== 7,128 bytes in 99 blocks are definitely lost in loss record 10 of 11
==9767==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9767==    by 0x401409: create1DArray_int64_t (Util.c:23)
==9767==    by 0x40111F: main (gcd.c:240)
==9767== 
==9767== 79,200 bytes in 99 blocks are definitely lost in loss record 11 of 11
==9767==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9767==    by 0x400EBE: main (gcd.c:192)
==9767== 
==9767== LEAK SUMMARY:
==9767==    definitely lost: 96,624 bytes in 396 blocks
==9767==    indirectly lost: 0 bytes in 0 blocks
==9767==      possibly lost: 0 bytes in 0 blocks
==9767==    still reachable: 2,608 bytes in 7 blocks
==9767==         suppressed: 0 bytes in 0 blocks
==9767== Reachable blocks (those to which a pointer was found) are not shown.
==9767== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9767== 
==9767== For counts of detected and suppressed errors, rerun with: -v
==9767== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
N = 10
Number: 0 Number: 0 GCD:0
Number: 0 Number: 1 GCD:1
Number: 0 Number: 2 GCD:2
Number: 0 Number: 3 GCD:3
Number: 0 Number: 4 GCD:4
Number: 0 Number: 5 GCD:5
Number: 0 Number: 6 GCD:6
Number: 0 Number: 7 GCD:7
Number: 0 Number: 8 GCD:8
Number: 0 Number: 9 GCD:9
Number: 1 Number: 0 GCD:1
Number: 1 Number: 1 GCD:1
Number: 1 Number: 2 GCD:1
Number: 1 Number: 3 GCD:1
Number: 1 Number: 4 GCD:1
Number: 1 Number: 5 GCD:1
Number: 1 Number: 6 GCD:1
Number: 1 Number: 7 GCD:1
Number: 1 Number: 8 GCD:1
Number: 1 Number: 9 GCD:1
Number: 2 Number: 0 GCD:2
Number: 2 Number: 1 GCD:1
Number: 2 Number: 2 GCD:2
Number: 2 Number: 3 GCD:1
Number: 2 Number: 4 GCD:2
Number: 2 Number: 5 GCD:1
Number: 2 Number: 6 GCD:2
Number: 2 Number: 7 GCD:1
Number: 2 Number: 8 GCD:2
Number: 2 Number: 9 GCD:1
Number: 3 Number: 0 GCD:3
Number: 3 Number: 1 GCD:1
Number: 3 Number: 2 GCD:1
Number: 3 Number: 3 GCD:3
Number: 3 Number: 4 GCD:1
Number: 3 Number: 5 GCD:1
Number: 3 Number: 6 GCD:3
Number: 3 Number: 7 GCD:1
Number: 3 Number: 8 GCD:1
Number: 3 Number: 9 GCD:3
Number: 4 Number: 0 GCD:4
Number: 4 Number: 1 GCD:1
Number: 4 Number: 2 GCD:2
Number: 4 Number: 3 GCD:1
Number: 4 Number: 4 GCD:4
Number: 4 Number: 5 GCD:1
Number: 4 Number: 6 GCD:2
Number: 4 Number: 7 GCD:1
Number: 4 Number: 8 GCD:4
Number: 4 Number: 9 GCD:1
Number: 5 Number: 0 GCD:5
Number: 5 Number: 1 GCD:1
Number: 5 Number: 2 GCD:1
Number: 5 Number: 3 GCD:1
Number: 5 Number: 4 GCD:1
Number: 5 Number: 5 GCD:5
Number: 5 Number: 6 GCD:1
Number: 5 Number: 7 GCD:1
Number: 5 Number: 8 GCD:1
Number: 5 Number: 9 GCD:1
Number: 6 Number: 0 GCD:6
Number: 6 Number: 1 GCD:1
Number: 6 Number: 2 GCD:2
Number: 6 Number: 3 GCD:3
Number: 6 Number: 4 GCD:2
Number: 6 Number: 5 GCD:1
Number: 6 Number: 6 GCD:6
Number: 6 Number: 7 GCD:1
Number: 6 Number: 8 GCD:2
Number: 6 Number: 9 GCD:3
Number: 7 Number: 0 GCD:7
Number: 7 Number: 1 GCD:1
Number: 7 Number: 2 GCD:1
Number: 7 Number: 3 GCD:1
Number: 7 Number: 4 GCD:1
Number: 7 Number: 5 GCD:1
Number: 7 Number: 6 GCD:1
Number: 7 Number: 7 GCD:7
Number: 7 Number: 8 GCD:1
Number: 7 Number: 9 GCD:1
Number: 8 Number: 0 GCD:8
Number: 8 Number: 1 GCD:1
Number: 8 Number: 2 GCD:2
Number: 8 Number: 3 GCD:1
Number: 8 Number: 4 GCD:4
Number: 8 Number: 5 GCD:1
Number: 8 Number: 6 GCD:2
Number: 8 Number: 7 GCD:1
Number: 8 Number: 8 GCD:8
Number: 8 Number: 9 GCD:1
Number: 9 Number: 0 GCD:9
Number: 9 Number: 1 GCD:1
Number: 9 Number: 2 GCD:1
Number: 9 Number: 3 GCD:3
Number: 9 Number: 4 GCD:1
Number: 9 Number: 5 GCD:1
Number: 9 Number: 6 GCD:3
Number: 9 Number: 7 GCD:1
Number: 9 Number: 8 GCD:1
Number: 9 Number: 9 GCD:9



=== Test report for ea_nocopy gcd ===
The Valgrind memory detector as below:
==9783== Memcheck, a memory error detector
==9783== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9783== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9783== Command: ./gcd.out
==9783== Parent PID: 8113
==9783== 
==9783== 
==9783== HEAP SUMMARY:
==9783==     in use at exit: 18,432 bytes in 302 blocks
==9783==   total heap usage: 303 allocs, 1 frees, 26,624 bytes allocated
==9783== 
==9783== 3,960 bytes in 99 blocks are definitely lost in loss record 6 of 8
==9783==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9783==    by 0x401386: create1DArray_int64_t (Util.c:23)
==9783==    by 0x401192: main (gcd.c:262)
==9783== 
==9783== 6,336 bytes in 99 blocks are definitely lost in loss record 7 of 8
==9783==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9783==    by 0x401386: create1DArray_int64_t (Util.c:23)
==9783==    by 0x400FB8: main (gcd.c:232)
==9783== 
==9783== 7,128 bytes in 99 blocks are definitely lost in loss record 8 of 8
==9783==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9783==    by 0x401386: create1DArray_int64_t (Util.c:23)
==9783==    by 0x40109C: main (gcd.c:247)
==9783== 
==9783== LEAK SUMMARY:
==9783==    definitely lost: 17,424 bytes in 297 blocks
==9783==    indirectly lost: 0 bytes in 0 blocks
==9783==      possibly lost: 0 bytes in 0 blocks
==9783==    still reachable: 1,008 bytes in 5 blocks
==9783==         suppressed: 0 bytes in 0 blocks
==9783== Reachable blocks (those to which a pointer was found) are not shown.
==9783== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9783== 
==9783== For counts of detected and suppressed errors, rerun with: -v
==9783== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
N = 10
Number: 0 Number: 0 GCD:0
Number: 0 Number: 1 GCD:1
Number: 0 Number: 2 GCD:2
Number: 0 Number: 3 GCD:3
Number: 0 Number: 4 GCD:4
Number: 0 Number: 5 GCD:5
Number: 0 Number: 6 GCD:6
Number: 0 Number: 7 GCD:7
Number: 0 Number: 8 GCD:8
Number: 0 Number: 9 GCD:9
Number: 1 Number: 0 GCD:1
Number: 1 Number: 1 GCD:1
Number: 1 Number: 2 GCD:1
Number: 1 Number: 3 GCD:1
Number: 1 Number: 4 GCD:1
Number: 1 Number: 5 GCD:1
Number: 1 Number: 6 GCD:1
Number: 1 Number: 7 GCD:1
Number: 1 Number: 8 GCD:1
Number: 1 Number: 9 GCD:1
Number: 2 Number: 0 GCD:2
Number: 2 Number: 1 GCD:1
Number: 2 Number: 2 GCD:2
Number: 2 Number: 3 GCD:1
Number: 2 Number: 4 GCD:2
Number: 2 Number: 5 GCD:1
Number: 2 Number: 6 GCD:2
Number: 2 Number: 7 GCD:1
Number: 2 Number: 8 GCD:2
Number: 2 Number: 9 GCD:1
Number: 3 Number: 0 GCD:3
Number: 3 Number: 1 GCD:1
Number: 3 Number: 2 GCD:1
Number: 3 Number: 3 GCD:3
Number: 3 Number: 4 GCD:1
Number: 3 Number: 5 GCD:1
Number: 3 Number: 6 GCD:3
Number: 3 Number: 7 GCD:1
Number: 3 Number: 8 GCD:1
Number: 3 Number: 9 GCD:3
Number: 4 Number: 0 GCD:4
Number: 4 Number: 1 GCD:1
Number: 4 Number: 2 GCD:2
Number: 4 Number: 3 GCD:1
Number: 4 Number: 4 GCD:4
Number: 4 Number: 5 GCD:1
Number: 4 Number: 6 GCD:2
Number: 4 Number: 7 GCD:1
Number: 4 Number: 8 GCD:4
Number: 4 Number: 9 GCD:1
Number: 5 Number: 0 GCD:5
Number: 5 Number: 1 GCD:1
Number: 5 Number: 2 GCD:1
Number: 5 Number: 3 GCD:1
Number: 5 Number: 4 GCD:1
Number: 5 Number: 5 GCD:5
Number: 5 Number: 6 GCD:1
Number: 5 Number: 7 GCD:1
Number: 5 Number: 8 GCD:1
Number: 5 Number: 9 GCD:1
Number: 6 Number: 0 GCD:6
Number: 6 Number: 1 GCD:1
Number: 6 Number: 2 GCD:2
Number: 6 Number: 3 GCD:3
Number: 6 Number: 4 GCD:2
Number: 6 Number: 5 GCD:1
Number: 6 Number: 6 GCD:6
Number: 6 Number: 7 GCD:1
Number: 6 Number: 8 GCD:2
Number: 6 Number: 9 GCD:3
Number: 7 Number: 0 GCD:7
Number: 7 Number: 1 GCD:1
Number: 7 Number: 2 GCD:1
Number: 7 Number: 3 GCD:1
Number: 7 Number: 4 GCD:1
Number: 7 Number: 5 GCD:1
Number: 7 Number: 6 GCD:1
Number: 7 Number: 7 GCD:7
Number: 7 Number: 8 GCD:1
Number: 7 Number: 9 GCD:1
Number: 8 Number: 0 GCD:8
Number: 8 Number: 1 GCD:1
Number: 8 Number: 2 GCD:2
Number: 8 Number: 3 GCD:1
Number: 8 Number: 4 GCD:4
Number: 8 Number: 5 GCD:1
Number: 8 Number: 6 GCD:2
Number: 8 Number: 7 GCD:1
Number: 8 Number: 8 GCD:8
Number: 8 Number: 9 GCD:1
Number: 9 Number: 0 GCD:9
Number: 9 Number: 1 GCD:1
Number: 9 Number: 2 GCD:1
Number: 9 Number: 3 GCD:3
Number: 9 Number: 4 GCD:1
Number: 9 Number: 5 GCD:1
Number: 9 Number: 6 GCD:3
Number: 9 Number: 7 GCD:1
Number: 9 Number: 8 GCD:1
Number: 9 Number: 9 GCD:9



=== Test report for ea_nocopy_dealloc gcd ===
The Valgrind memory detector as below:
==9799== Memcheck, a memory error detector
==9799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9799== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9799== Command: ./gcd.out
==9799== Parent PID: 8113
==9799== 
==9799== 
==9799== HEAP SUMMARY:
==9799==     in use at exit: 0 bytes in 0 blocks
==9799==   total heap usage: 303 allocs, 303 frees, 26,624 bytes allocated
==9799== 
==9799== All heap blocks were freed -- no leaks are possible
==9799== 
==9799== For counts of detected and suppressed errors, rerun with: -v
==9799== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
N = 10
Number: 0 Number: 0 GCD:0
Number: 0 Number: 1 GCD:1
Number: 0 Number: 2 GCD:2
Number: 0 Number: 3 GCD:3
Number: 0 Number: 4 GCD:4
Number: 0 Number: 5 GCD:5
Number: 0 Number: 6 GCD:6
Number: 0 Number: 7 GCD:7
Number: 0 Number: 8 GCD:8
Number: 0 Number: 9 GCD:9
Number: 1 Number: 0 GCD:1
Number: 1 Number: 1 GCD:1
Number: 1 Number: 2 GCD:1
Number: 1 Number: 3 GCD:1
Number: 1 Number: 4 GCD:1
Number: 1 Number: 5 GCD:1
Number: 1 Number: 6 GCD:1
Number: 1 Number: 7 GCD:1
Number: 1 Number: 8 GCD:1
Number: 1 Number: 9 GCD:1
Number: 2 Number: 0 GCD:2
Number: 2 Number: 1 GCD:1
Number: 2 Number: 2 GCD:2
Number: 2 Number: 3 GCD:1
Number: 2 Number: 4 GCD:2
Number: 2 Number: 5 GCD:1
Number: 2 Number: 6 GCD:2
Number: 2 Number: 7 GCD:1
Number: 2 Number: 8 GCD:2
Number: 2 Number: 9 GCD:1
Number: 3 Number: 0 GCD:3
Number: 3 Number: 1 GCD:1
Number: 3 Number: 2 GCD:1
Number: 3 Number: 3 GCD:3
Number: 3 Number: 4 GCD:1
Number: 3 Number: 5 GCD:1
Number: 3 Number: 6 GCD:3
Number: 3 Number: 7 GCD:1
Number: 3 Number: 8 GCD:1
Number: 3 Number: 9 GCD:3
Number: 4 Number: 0 GCD:4
Number: 4 Number: 1 GCD:1
Number: 4 Number: 2 GCD:2
Number: 4 Number: 3 GCD:1
Number: 4 Number: 4 GCD:4
Number: 4 Number: 5 GCD:1
Number: 4 Number: 6 GCD:2
Number: 4 Number: 7 GCD:1
Number: 4 Number: 8 GCD:4
Number: 4 Number: 9 GCD:1
Number: 5 Number: 0 GCD:5
Number: 5 Number: 1 GCD:1
Number: 5 Number: 2 GCD:1
Number: 5 Number: 3 GCD:1
Number: 5 Number: 4 GCD:1
Number: 5 Number: 5 GCD:5
Number: 5 Number: 6 GCD:1
Number: 5 Number: 7 GCD:1
Number: 5 Number: 8 GCD:1
Number: 5 Number: 9 GCD:1
Number: 6 Number: 0 GCD:6
Number: 6 Number: 1 GCD:1
Number: 6 Number: 2 GCD:2
Number: 6 Number: 3 GCD:3
Number: 6 Number: 4 GCD:2
Number: 6 Number: 5 GCD:1
Number: 6 Number: 6 GCD:6
Number: 6 Number: 7 GCD:1
Number: 6 Number: 8 GCD:2
Number: 6 Number: 9 GCD:3
Number: 7 Number: 0 GCD:7
Number: 7 Number: 1 GCD:1
Number: 7 Number: 2 GCD:1
Number: 7 Number: 3 GCD:1
Number: 7 Number: 4 GCD:1
Number: 7 Number: 5 GCD:1
Number: 7 Number: 6 GCD:1
Number: 7 Number: 7 GCD:7
Number: 7 Number: 8 GCD:1
Number: 7 Number: 9 GCD:1
Number: 8 Number: 0 GCD:8
Number: 8 Number: 1 GCD:1
Number: 8 Number: 2 GCD:2
Number: 8 Number: 3 GCD:1
Number: 8 Number: 4 GCD:4
Number: 8 Number: 5 GCD:1
Number: 8 Number: 6 GCD:2
Number: 8 Number: 7 GCD:1
Number: 8 Number: 8 GCD:8
Number: 8 Number: 9 GCD:1
Number: 9 Number: 0 GCD:9
Number: 9 Number: 1 GCD:1
Number: 9 Number: 2 GCD:1
Number: 9 Number: 3 GCD:3
Number: 9 Number: 4 GCD:1
Number: 9 Number: 5 GCD:1
Number: 9 Number: 6 GCD:3
Number: 9 Number: 7 GCD:1
Number: 9 Number: 8 GCD:1
Number: 9 Number: 9 GCD:9



=== Test report for ea_dealloc IntToByte ===
The Valgrind memory detector as below:
==9817== Memcheck, a memory error detector
==9817== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9817== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9817== Command: ./IntToByte.out
==9817== Parent PID: 8113
==9817== 
==9817== 
==9817== HEAP SUMMARY:
==9817==     in use at exit: 0 bytes in 0 blocks
==9817==   total heap usage: 3 allocs, 3 frees, 8,792 bytes allocated
==9817== 
==9817== All heap blocks were freed -- no leaks are possible
==9817== 
==9817== For counts of detected and suppressed errors, rerun with: -v
==9817== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43



=== Test report for ea_naive IntToByte ===
The Valgrind memory detector as below:
==9832== Memcheck, a memory error detector
==9832== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9832== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9832== Command: ./IntToByte.out
==9832== Parent PID: 8113
==9832== 
==9832== 
==9832== HEAP SUMMARY:
==9832==     in use at exit: 600 bytes in 2 blocks
==9832==   total heap usage: 3 allocs, 1 frees, 8,792 bytes allocated
==9832== 
==9832== LEAK SUMMARY:
==9832==    definitely lost: 0 bytes in 0 blocks
==9832==    indirectly lost: 0 bytes in 0 blocks
==9832==      possibly lost: 0 bytes in 0 blocks
==9832==    still reachable: 600 bytes in 2 blocks
==9832==         suppressed: 0 bytes in 0 blocks
==9832== Reachable blocks (those to which a pointer was found) are not shown.
==9832== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9832== 
==9832== For counts of detected and suppressed errors, rerun with: -v
==9832== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43



=== Test report for ea_nocopy IntToByte ===
The Valgrind memory detector as below:
==9848== Memcheck, a memory error detector
==9848== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9848== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9848== Command: ./IntToByte.out
==9848== Parent PID: 8113
==9848== 
==9848== 
==9848== HEAP SUMMARY:
==9848==     in use at exit: 300 bytes in 1 blocks
==9848==   total heap usage: 2 allocs, 1 frees, 8,492 bytes allocated
==9848== 
==9848== LEAK SUMMARY:
==9848==    definitely lost: 0 bytes in 0 blocks
==9848==    indirectly lost: 0 bytes in 0 blocks
==9848==      possibly lost: 0 bytes in 0 blocks
==9848==    still reachable: 300 bytes in 1 blocks
==9848==         suppressed: 0 bytes in 0 blocks
==9848== Reachable blocks (those to which a pointer was found) are not shown.
==9848== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9848== 
==9848== For counts of detected and suppressed errors, rerun with: -v
==9848== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43



=== Test report for ea_nocopy_dealloc IntToByte ===
The Valgrind memory detector as below:
==9864== Memcheck, a memory error detector
==9864== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9864== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9864== Command: ./IntToByte.out
==9864== Parent PID: 8113
==9864== 
==9864== 
==9864== HEAP SUMMARY:
==9864==     in use at exit: 0 bytes in 0 blocks
==9864==   total heap usage: 2 allocs, 2 frees, 8,492 bytes allocated
==9864== 
==9864== All heap blocks were freed -- no leaks are possible
==9864== 
==9864== For counts of detected and suppressed errors, rerun with: -v
==9864== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43



=== Test report for ea_dealloc livecheck ===
The Valgrind memory detector as below:
==9882== Memcheck, a memory error detector
==9882== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9882== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9882== Command: ./livecheck.out
==9882== Parent PID: 8113
==9882== 
==9882== 
==9882== HEAP SUMMARY:
==9882==     in use at exit: 0 bytes in 0 blocks
==9882==   total heap usage: 15 allocs, 15 frees, 8,968 bytes allocated
==9882== 
==9882== All heap blocks were freed -- no leaks are possible
==9882== 
==9882== For counts of detected and suppressed errors, rerun with: -v
==9882== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 1
b[0] = 2
c[0] = 1
d[0] = 1
Pass livecheck test case


=== Test report for ea_naive livecheck ===
The Valgrind memory detector as below:
==9899== Memcheck, a memory error detector
==9899== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9899== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9899== Command: ./livecheck.out
==9899== Parent PID: 8113
==9899== 
==9899== 
==9899== HEAP SUMMARY:
==9899==     in use at exit: 776 bytes in 14 blocks
==9899==   total heap usage: 15 allocs, 1 frees, 8,968 bytes allocated
==9899== 
==9899== 40 bytes in 1 blocks are definitely lost in loss record 8 of 14
==9899==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9899==    by 0x401832: copy1DArray_int64_t (Util.c:80)
==9899==    by 0x400CE0: main (livecheck.c:57)
==9899== 
==9899== 40 bytes in 1 blocks are definitely lost in loss record 9 of 14
==9899==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9899==    by 0x401832: copy1DArray_int64_t (Util.c:80)
==9899==    by 0x400D52: main (livecheck.c:65)
==9899== 
==9899== LEAK SUMMARY:
==9899==    definitely lost: 80 bytes in 2 blocks
==9899==    indirectly lost: 0 bytes in 0 blocks
==9899==      possibly lost: 0 bytes in 0 blocks
==9899==    still reachable: 696 bytes in 12 blocks
==9899==         suppressed: 0 bytes in 0 blocks
==9899== Reachable blocks (those to which a pointer was found) are not shown.
==9899== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9899== 
==9899== For counts of detected and suppressed errors, rerun with: -v
==9899== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 1
b[0] = 2
c[0] = 1
d[0] = 1
Pass livecheck test case


=== Test report for ea_nocopy livecheck ===
The Valgrind memory detector as below:
==9914== Memcheck, a memory error detector
==9914== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9914== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9914== Command: ./livecheck.out
==9914== Parent PID: 8113
==9914== 
==9914== 
==9914== HEAP SUMMARY:
==9914==     in use at exit: 616 bytes in 10 blocks
==9914==   total heap usage: 11 allocs, 1 frees, 8,808 bytes allocated
==9914== 
==9914== LEAK SUMMARY:
==9914==    definitely lost: 0 bytes in 0 blocks
==9914==    indirectly lost: 0 bytes in 0 blocks
==9914==      possibly lost: 0 bytes in 0 blocks
==9914==    still reachable: 616 bytes in 10 blocks
==9914==         suppressed: 0 bytes in 0 blocks
==9914== Reachable blocks (those to which a pointer was found) are not shown.
==9914== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9914== 
==9914== For counts of detected and suppressed errors, rerun with: -v
==9914== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 1
b[0] = 2
c[0] = 1
d[0] = 1
Pass livecheck test case


=== Test report for ea_nocopy_dealloc livecheck ===
The Valgrind memory detector as below:
==9929== Memcheck, a memory error detector
==9929== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9929== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9929== Command: ./livecheck.out
==9929== Parent PID: 8113
==9929== 
==9929== 
==9929== HEAP SUMMARY:
==9929==     in use at exit: 0 bytes in 0 blocks
==9929==   total heap usage: 11 allocs, 11 frees, 8,808 bytes allocated
==9929== 
==9929== All heap blocks were freed -- no leaks are possible
==9929== 
==9929== For counts of detected and suppressed errors, rerun with: -v
==9929== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 1
b[0] = 2
c[0] = 1
d[0] = 1
Pass livecheck test case


=== Test report for ea_dealloc lz77_compress ===
The Valgrind memory detector as below:
==9947== Memcheck, a memory error detector
==9947== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9947== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9947== Command: ./lz77_compress.out
==9947== Parent PID: 8113
==9947== 
==9947== 
==9947== HEAP SUMMARY:
==9947==     in use at exit: 0 bytes in 0 blocks
==9947==   total heap usage: 181 allocs, 181 frees, 61,575 bytes allocated
==9947== 
==9947== All heap blocks were freed -- no leaks are possible
==9947== 
==9947== For counts of detected and suppressed errors, rerun with: -v
==9947== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:   
 00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_naive lz77_compress ===
The Valgrind memory detector as below:
==9963== Memcheck, a memory error detector
==9963== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9963== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9963== Command: ./lz77_compress.out
==9963== Parent PID: 8113
==9963== 
==9963== 
==9963== HEAP SUMMARY:
==9963==     in use at exit: 3,068 bytes in 172 blocks
==9963==   total heap usage: 181 allocs, 9 frees, 61,575 bytes allocated
==9963== 
==9963== 0 bytes in 1 blocks are definitely lost in loss record 1 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x402214: create1DArray_BYTE (Util.c:41)
==9963==    by 0x40127E: _compress_ (lz77_compress.c:310)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 0 bytes in 1 blocks are definitely lost in loss record 2 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4022A9: copy1DArray_BYTE (Util.c:61)
==9963==    by 0x4012AC: _compress_ (lz77_compress.c:312)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 72 bytes in 8 blocks are definitely lost in loss record 10 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4022A9: copy1DArray_BYTE (Util.c:61)
==9963==    by 0x401597: _compress_ (lz77_compress.c:384)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 72 bytes in 9 blocks are definitely lost in loss record 11 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x401443: _compress_ (lz77_compress.c:372)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 81 bytes in 9 blocks are definitely lost in loss record 12 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x402214: create1DArray_BYTE (Util.c:41)
==9963==    by 0x40101C: _append_ (lz77_compress.c:197)
==9963==    by 0x4014B7: _compress_ (lz77_compress.c:373)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 81 bytes in 9 blocks are definitely lost in loss record 13 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4022A9: copy1DArray_BYTE (Util.c:61)
==9963==    by 0x40103B: _append_ (lz77_compress.c:199)
==9963==    by 0x4014B7: _compress_ (lz77_compress.c:373)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 81 bytes in 9 blocks are definitely lost in loss record 14 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4022A9: copy1DArray_BYTE (Util.c:61)
==9963==    by 0x4014E5: _compress_ (lz77_compress.c:376)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 81 bytes in 9 blocks are definitely lost in loss record 15 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4014FB: _compress_ (lz77_compress.c:380)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 90 bytes in 9 blocks are definitely lost in loss record 16 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x402214: create1DArray_BYTE (Util.c:41)
==9963==    by 0x40101C: _append_ (lz77_compress.c:197)
==9963==    by 0x40156F: _compress_ (lz77_compress.c:381)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 90 bytes in 9 blocks are definitely lost in loss record 17 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4022A9: copy1DArray_BYTE (Util.c:61)
==9963==    by 0x40103B: _append_ (lz77_compress.c:199)
==9963==    by 0x40156F: _compress_ (lz77_compress.c:381)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 144 bytes in 9 blocks are definitely lost in loss record 20 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x4012DE: _compress_ (lz77_compress.c:322)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 144 bytes in 9 blocks are definitely lost in loss record 21 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x400F79: _findLongestMatch_ (lz77_compress.c:167)
==9963==    by 0x40134E: _compress_ (lz77_compress.c:323)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 144 bytes in 9 blocks are definitely lost in loss record 22 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x400BAB: copy_Match (lz77_compress.c:3)
==9963==    by 0x40135E: _compress_ (lz77_compress.c:326)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== 960 bytes in 60 blocks are definitely lost in loss record 26 of 26
==9963==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9963==    by 0x400E9E: _findLongestMatch_ (lz77_compress.c:140)
==9963==    by 0x40134E: _compress_ (lz77_compress.c:323)
==9963==    by 0x401C2F: main (lz77_compress.c:480)
==9963== 
==9963== LEAK SUMMARY:
==9963==    definitely lost: 2,040 bytes in 160 blocks
==9963==    indirectly lost: 0 bytes in 0 blocks
==9963==      possibly lost: 0 bytes in 0 blocks
==9963==    still reachable: 1,028 bytes in 12 blocks
==9963==         suppressed: 0 bytes in 0 blocks
==9963== Reachable blocks (those to which a pointer was found) are not shown.
==9963== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9963== 
==9963== For counts of detected and suppressed errors, rerun with: -v
==9963== ERROR SUMMARY: 14 errors from 14 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:   
 00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_nocopy lz77_compress ===
The Valgrind memory detector as below:
==9978== Memcheck, a memory error detector
==9978== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9978== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9978== Command: ./lz77_compress.out
==9978== Parent PID: 8113
==9978== 
==9978== 
==9978== HEAP SUMMARY:
==9978==     in use at exit: 1,275 bytes in 36 blocks
==9978==   total heap usage: 45 allocs, 9 frees, 59,782 bytes allocated
==9978== 
==9978== 0 bytes in 1 blocks are definitely lost in loss record 1 of 13
==9978==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9978==    by 0x401F73: create1DArray_BYTE (Util.c:41)
==9978==    by 0x4011E5: _compress_ (lz77_compress.c:329)
==9978==    by 0x4019A0: main (lz77_compress.c:506)
==9978== 
==9978== 72 bytes in 8 blocks are definitely lost in loss record 6 of 13
==9978==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9978==    by 0x401F73: create1DArray_BYTE (Util.c:41)
==9978==    by 0x400FB0: _append_ (lz77_compress.c:209)
==9978==    by 0x40137E: _compress_ (lz77_compress.c:405)
==9978==    by 0x4019A0: main (lz77_compress.c:506)
==9978== 
==9978== 81 bytes in 9 blocks are definitely lost in loss record 7 of 13
==9978==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9978==    by 0x401F73: create1DArray_BYTE (Util.c:41)
==9978==    by 0x400FB0: _append_ (lz77_compress.c:209)
==9978==    by 0x40133D: _compress_ (lz77_compress.c:397)
==9978==    by 0x4019A0: main (lz77_compress.c:506)
==9978== 
==9978== 144 bytes in 9 blocks are definitely lost in loss record 10 of 13
==9978==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==9978==    by 0x400F10: _findLongestMatch_ (lz77_compress.c:179)
==9978==    by 0x40123B: _compress_ (lz77_compress.c:342)
==9978==    by 0x4019A0: main (lz77_compress.c:506)
==9978== 
==9978== LEAK SUMMARY:
==9978==    definitely lost: 297 bytes in 27 blocks
==9978==    indirectly lost: 0 bytes in 0 blocks
==9978==      possibly lost: 0 bytes in 0 blocks
==9978==    still reachable: 978 bytes in 9 blocks
==9978==         suppressed: 0 bytes in 0 blocks
==9978== Reachable blocks (those to which a pointer was found) are not shown.
==9978== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==9978== 
==9978== For counts of detected and suppressed errors, rerun with: -v
==9978== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:   
 00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_nocopy_dealloc lz77_compress ===
The Valgrind memory detector as below:
==9993== Memcheck, a memory error detector
==9993== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9993== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9993== Command: ./lz77_compress.out
==9993== Parent PID: 8113
==9993== 
==9993== 
==9993== HEAP SUMMARY:
==9993==     in use at exit: 0 bytes in 0 blocks
==9993==   total heap usage: 45 allocs, 45 frees, 59,782 bytes allocated
==9993== 
==9993== All heap blocks were freed -- no leaks are possible
==9993== 
==9993== For counts of detected and suppressed errors, rerun with: -v
==9993== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:   
 00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_dealloc lz77_decompress ===
The Valgrind memory detector as below:
==10012== Memcheck, a memory error detector
==10012== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10012== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10012== Command: ./lz77_decompress.out
==10012== Parent PID: 8113
==10012== 
==10012== 
==10012== HEAP SUMMARY:
==10012==     in use at exit: 0 bytes in 0 blocks
==10012==   total heap usage: 79 allocs, 79 frees, 34,484 bytes allocated
==10012== 
==10012== All heap blocks were freed -- no leaks are possible
==10012== 
==10012== For counts of detected and suppressed errors, rerun with: -v
==10012== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_naive lz77_decompress ===
The Valgrind memory detector as below:
==10027== Memcheck, a memory error detector
==10027== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10027== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10027== Command: ./lz77_decompress.out
==10027== Parent PID: 8113
==10027== 
==10027== 
==10027== HEAP SUMMARY:
==10027==     in use at exit: 1,134 bytes in 74 blocks
==10027==   total heap usage: 79 allocs, 5 frees, 34,484 bytes allocated
==10027== 
==10027== 0 bytes in 1 blocks are definitely lost in loss record 1 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x401840: create1DArray_BYTE (Util.c:41)
==10027==    by 0x400D84: _decompress_ (lz77_decompress.c:98)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 0 bytes in 1 blocks are definitely lost in loss record 2 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x4018D5: copy1DArray_BYTE (Util.c:61)
==10027==    by 0x400DB2: _decompress_ (lz77_decompress.c:100)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 12 bytes in 3 blocks are definitely lost in loss record 3 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x4018D5: copy1DArray_BYTE (Util.c:61)
==10027==    by 0x400F72: _decompress_ (lz77_decompress.c:144)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 24 bytes in 4 blocks are definitely lost in loss record 9 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x400ED0: _decompress_ (lz77_decompress.c:140)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 28 bytes in 4 blocks are definitely lost in loss record 10 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x401840: create1DArray_BYTE (Util.c:41)
==10027==    by 0x400C14: _append_ (lz77_decompress.c:24)
==10027==    by 0x400F44: _decompress_ (lz77_decompress.c:141)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 28 bytes in 4 blocks are definitely lost in loss record 11 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x4018D5: copy1DArray_BYTE (Util.c:61)
==10027==    by 0x400C33: _append_ (lz77_decompress.c:26)
==10027==    by 0x400F44: _decompress_ (lz77_decompress.c:141)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 96 bytes in 12 blocks are definitely lost in loss record 13 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x401025: _decompress_ (lz77_decompress.c:182)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 108 bytes in 12 blocks are definitely lost in loss record 14 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x401840: create1DArray_BYTE (Util.c:41)
==10027==    by 0x400C14: _append_ (lz77_decompress.c:24)
==10027==    by 0x401099: _decompress_ (lz77_decompress.c:183)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 108 bytes in 12 blocks are definitely lost in loss record 15 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x4018D5: copy1DArray_BYTE (Util.c:61)
==10027==    by 0x400C33: _append_ (lz77_decompress.c:26)
==10027==    by 0x401099: _decompress_ (lz77_decompress.c:183)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== 108 bytes in 12 blocks are definitely lost in loss record 16 of 19
==10027==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10027==    by 0x4018D5: copy1DArray_BYTE (Util.c:61)
==10027==    by 0x4010C7: _decompress_ (lz77_decompress.c:186)
==10027==    by 0x4014AA: main (lz77_decompress.c:247)
==10027== 
==10027== LEAK SUMMARY:
==10027==    definitely lost: 512 bytes in 65 blocks
==10027==    indirectly lost: 0 bytes in 0 blocks
==10027==      possibly lost: 0 bytes in 0 blocks
==10027==    still reachable: 622 bytes in 9 blocks
==10027==         suppressed: 0 bytes in 0 blocks
==10027== Reachable blocks (those to which a pointer was found) are not shown.
==10027== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10027== 
==10027== For counts of detected and suppressed errors, rerun with: -v
==10027== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_nocopy lz77_decompress ===
The Valgrind memory detector as below:
==10042== Memcheck, a memory error detector
==10042== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10042== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10042== Command: ./lz77_decompress.out
==10042== Parent PID: 8113
==10042== 
==10042== 
==10042== HEAP SUMMARY:
==10042==     in use at exit: 690 bytes in 22 blocks
==10042==   total heap usage: 27 allocs, 5 frees, 34,040 bytes allocated
==10042== 
==10042== 0 bytes in 1 blocks are definitely lost in loss record 1 of 9
==10042==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10042==    by 0x4016A1: create1DArray_BYTE (Util.c:41)
==10042==    by 0x400D75: _decompress_ (lz77_decompress.c:101)
==10042==    by 0x401323: main (lz77_decompress.c:262)
==10042== 
==10042== 12 bytes in 3 blocks are definitely lost in loss record 2 of 9
==10042==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10042==    by 0x4016A1: create1DArray_BYTE (Util.c:41)
==10042==    by 0x400C14: _append_ (lz77_decompress.c:24)
==10042==    by 0x400EB4: _decompress_ (lz77_decompress.c:148)
==10042==    by 0x401323: main (lz77_decompress.c:262)
==10042== 
==10042== 108 bytes in 12 blocks are definitely lost in loss record 6 of 9
==10042==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10042==    by 0x4016A1: create1DArray_BYTE (Util.c:41)
==10042==    by 0x400C14: _append_ (lz77_decompress.c:24)
==10042==    by 0x400F98: _decompress_ (lz77_decompress.c:195)
==10042==    by 0x401323: main (lz77_decompress.c:262)
==10042== 
==10042== LEAK SUMMARY:
==10042==    definitely lost: 120 bytes in 16 blocks
==10042==    indirectly lost: 0 bytes in 0 blocks
==10042==      possibly lost: 0 bytes in 0 blocks
==10042==    still reachable: 570 bytes in 6 blocks
==10042==         suppressed: 0 bytes in 0 blocks
==10042== Reachable blocks (those to which a pointer was found) are not shown.
==10042== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10042== 
==10042== For counts of detected and suppressed errors, rerun with: -v
==10042== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_nocopy_dealloc lz77_decompress ===
The Valgrind memory detector as below:
==10059== Memcheck, a memory error detector
==10059== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10059== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10059== Command: ./lz77_decompress.out
==10059== Parent PID: 8113
==10059== 
==10059== 
==10059== HEAP SUMMARY:
==10059==     in use at exit: 0 bytes in 0 blocks
==10059==   total heap usage: 27 allocs, 27 frees, 34,040 bytes allocated
==10059== 
==10059== All heap blocks were freed -- no leaks are possible
==10059== 
==10059== For counts of detected and suppressed errors, rerun with: -v
==10059== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_dealloc lz77_opt_compress ===
The Valgrind memory detector as below:
==10077== Memcheck, a memory error detector
==10077== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10077== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10077== Command: ./lz77_opt_compress.out
==10077== Parent PID: 8113
==10077== 
==10077== 
==10077== HEAP SUMMARY:
==10077==     in use at exit: 0 bytes in 0 blocks
==10077==   total heap usage: 113 allocs, 113 frees, 61,095 bytes allocated
==10077== 
==10077== All heap blocks were freed -- no leaks are possible
==10077== 
==10077== For counts of detected and suppressed errors, rerun with: -v
==10077== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:    00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_naive lz77_opt_compress ===
The Valgrind memory detector as below:
==10092== Memcheck, a memory error detector
==10092== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10092== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10092== Command: ./lz77_opt_compress.out
==10092== Parent PID: 8113
==10092== 
==10092== 
==10092== HEAP SUMMARY:
==10092==     in use at exit: 2,584 bytes in 104 blocks
==10092==   total heap usage: 113 allocs, 9 frees, 61,095 bytes allocated
==10092== 
==10092== 18 bytes in 1 blocks are definitely lost in loss record 6 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x4022A1: create1DArray_BYTE (Util.c:41)
==10092==    by 0x401123: _resize_ (lz77_opt_compress.c:245)
==10092==    by 0x4015B8: _compress_ (lz77_opt_compress.c:423)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 18 bytes in 1 blocks are definitely lost in loss record 7 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x402336: copy1DArray_BYTE (Util.c:61)
==10092==    by 0x401142: _resize_ (lz77_opt_compress.c:247)
==10092==    by 0x4015B8: _compress_ (lz77_opt_compress.c:423)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 32 bytes in 1 blocks are definitely lost in loss record 8 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x4022A1: create1DArray_BYTE (Util.c:41)
==10092==    by 0x4012A9: _compress_ (lz77_opt_compress.c:324)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 32 bytes in 1 blocks are definitely lost in loss record 9 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x402336: copy1DArray_BYTE (Util.c:61)
==10092==    by 0x4012D7: _compress_ (lz77_opt_compress.c:326)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 32 bytes in 1 blocks are definitely lost in loss record 10 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x401544: _compress_ (lz77_opt_compress.c:422)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 144 bytes in 9 blocks are definitely lost in loss record 15 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x401322: _compress_ (lz77_opt_compress.c:340)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 144 bytes in 9 blocks are definitely lost in loss record 16 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x400F79: _findLongestMatch_ (lz77_opt_compress.c:167)
==10092==    by 0x401392: _compress_ (lz77_opt_compress.c:341)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 144 bytes in 9 blocks are definitely lost in loss record 17 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x400BAB: copy_Match (lz77_opt_compress.c:3)
==10092==    by 0x4013A2: _compress_ (lz77_opt_compress.c:344)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== 960 bytes in 60 blocks are definitely lost in loss record 21 of 21
==10092==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10092==    by 0x400E9E: _findLongestMatch_ (lz77_opt_compress.c:140)
==10092==    by 0x401392: _compress_ (lz77_opt_compress.c:341)
==10092==    by 0x401C78: main (lz77_opt_compress.c:517)
==10092== 
==10092== LEAK SUMMARY:
==10092==    definitely lost: 1,524 bytes in 92 blocks
==10092==    indirectly lost: 0 bytes in 0 blocks
==10092==      possibly lost: 0 bytes in 0 blocks
==10092==    still reachable: 1,060 bytes in 12 blocks
==10092==         suppressed: 0 bytes in 0 blocks
==10092== Reachable blocks (those to which a pointer was found) are not shown.
==10092== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10092== 
==10092== For counts of detected and suppressed errors, rerun with: -v
==10092== ERROR SUMMARY: 9 errors from 9 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:    00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_nocopy lz77_opt_compress ===
The Valgrind memory detector as below:
==10108== Memcheck, a memory error detector
==10108== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10108== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10108== Command: ./lz77_opt_compress.out
==10108== Parent PID: 8113
==10108== 
==10108== 
==10108== HEAP SUMMARY:
==10108==     in use at exit: 1,186 bytes in 19 blocks
==10108==   total heap usage: 28 allocs, 9 frees, 59,697 bytes allocated
==10108== 
==10108== 32 bytes in 1 blocks are definitely lost in loss record 3 of 11
==10108==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10108==    by 0x402080: create1DArray_BYTE (Util.c:41)
==10108==    by 0x401219: _compress_ (lz77_opt_compress.c:344)
==10108==    by 0x401A69: main (lz77_opt_compress.c:547)
==10108== 
==10108== 144 bytes in 9 blocks are definitely lost in loss record 8 of 11
==10108==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10108==    by 0x400F10: _findLongestMatch_ (lz77_opt_compress.c:179)
==10108==    by 0x40128B: _compress_ (lz77_opt_compress.c:362)
==10108==    by 0x401A69: main (lz77_opt_compress.c:547)
==10108== 
==10108== LEAK SUMMARY:
==10108==    definitely lost: 176 bytes in 10 blocks
==10108==    indirectly lost: 0 bytes in 0 blocks
==10108==      possibly lost: 0 bytes in 0 blocks
==10108==    still reachable: 1,010 bytes in 9 blocks
==10108==         suppressed: 0 bytes in 0 blocks
==10108== Reachable blocks (those to which a pointer was found) are not shown.
==10108== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10108== 
==10108== For counts of detected and suppressed errors, rerun with: -v
==10108== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:    00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_nocopy_dealloc lz77_opt_compress ===
The Valgrind memory detector as below:
==10123== Memcheck, a memory error detector
==10123== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10123== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10123== Command: ./lz77_opt_compress.out
==10123== Parent PID: 8113
==10123== 
==10123== 
==10123== HEAP SUMMARY:
==10123==     in use at exit: 0 bytes in 0 blocks
==10123==   total heap usage: 28 allocs, 28 frees, 59,697 bytes allocated
==10123== 
==10123== All heap blocks were freed -- no leaks are possible
==10123== 
==10123== For counts of detected and suppressed errors, rerun with: -v
==10123== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Data:         
AACAACABCABAAAC

16 bytes
COMPRESSED Data:    00  41  01  01  00  43  03  04  00  42  03  03  0b  02  0c  02  00  0a 
18 bytes



=== Test report for ea_dealloc lz77_opt_decompress ===
The Valgrind memory detector as below:
==10141== Memcheck, a memory error detector
==10141== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10141== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10141== Command: ./lz77_opt_decompress.out
==10141== Parent PID: 8113
==10141== 
==10141== 
==10141== HEAP SUMMARY:
==10141==     in use at exit: 0 bytes in 0 blocks
==10141==   total heap usage: 61 allocs, 61 frees, 34,526 bytes allocated
==10141== 
==10141== All heap blocks were freed -- no leaks are possible
==10141== 
==10141== For counts of detected and suppressed errors, rerun with: -v
==10141== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_naive lz77_opt_decompress ===
The Valgrind memory detector as below:
==10157== Memcheck, a memory error detector
==10157== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10157== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10157== Command: ./lz77_opt_decompress.out
==10157== Parent PID: 8113
==10157== 
==10157== 
==10157== HEAP SUMMARY:
==10157==     in use at exit: 1,172 bytes in 56 blocks
==10157==   total heap usage: 61 allocs, 5 frees, 34,526 bytes allocated
==10157== 
==10157== 0 bytes in 1 blocks are definitely lost in loss record 1 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401B86: create1DArray_BYTE (Util.c:41)
==10157==    by 0x400F44: _decompress_ (lz77_opt_decompress.c:180)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 0 bytes in 1 blocks are definitely lost in loss record 2 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401C1B: copy1DArray_BYTE (Util.c:61)
==10157==    by 0x400F72: _decompress_ (lz77_opt_decompress.c:182)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 10 bytes in 2 blocks are definitely lost in loss record 3 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401B86: create1DArray_BYTE (Util.c:41)
==10157==    by 0x400D87: _opt_append_ (lz77_opt_decompress.c:97)
==10157==    by 0x4012BE: _decompress_ (lz77_opt_decompress.c:273)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 10 bytes in 2 blocks are definitely lost in loss record 4 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401C1B: copy1DArray_BYTE (Util.c:61)
==10157==    by 0x400DA6: _opt_append_ (lz77_opt_decompress.c:99)
==10157==    by 0x4012BE: _decompress_ (lz77_opt_decompress.c:273)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 16 bytes in 1 blocks are definitely lost in loss record 7 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401B86: create1DArray_BYTE (Util.c:41)
==10157==    by 0x400BEB: _resize_ (lz77_opt_decompress.c:14)
==10157==    by 0x4013CC: _decompress_ (lz77_opt_decompress.c:305)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 16 bytes in 1 blocks are definitely lost in loss record 8 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401C1B: copy1DArray_BYTE (Util.c:61)
==10157==    by 0x400C0A: _resize_ (lz77_opt_decompress.c:16)
==10157==    by 0x4013CC: _decompress_ (lz77_opt_decompress.c:305)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 25 bytes in 4 blocks are definitely lost in loss record 12 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x4010BB: _decompress_ (lz77_opt_decompress.c:226)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 31 bytes in 1 blocks are definitely lost in loss record 13 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401358: _decompress_ (lz77_opt_decompress.c:304)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 47 bytes in 3 blocks are definitely lost in loss record 14 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401B86: create1DArray_BYTE (Util.c:41)
==10157==    by 0x400D87: _opt_append_ (lz77_opt_decompress.c:97)
==10157==    by 0x401142: _decompress_ (lz77_opt_decompress.c:227)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 47 bytes in 3 blocks are definitely lost in loss record 15 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401C1B: copy1DArray_BYTE (Util.c:61)
==10157==    by 0x400DA6: _opt_append_ (lz77_opt_decompress.c:99)
==10157==    by 0x401142: _decompress_ (lz77_opt_decompress.c:227)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 50 bytes in 4 blocks are definitely lost in loss record 17 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401C1B: copy1DArray_BYTE (Util.c:61)
==10157==    by 0x401170: _decompress_ (lz77_opt_decompress.c:230)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 130 bytes in 12 blocks are definitely lost in loss record 20 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401240: _decompress_ (lz77_opt_decompress.c:272)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== 136 bytes in 12 blocks are definitely lost in loss record 21 of 22
==10157==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10157==    by 0x401C1B: copy1DArray_BYTE (Util.c:61)
==10157==    by 0x4012EC: _decompress_ (lz77_opt_decompress.c:276)
==10157==    by 0x4017F0: main (lz77_opt_decompress.c:351)
==10157== 
==10157== LEAK SUMMARY:
==10157==    definitely lost: 518 bytes in 47 blocks
==10157==    indirectly lost: 0 bytes in 0 blocks
==10157==      possibly lost: 0 bytes in 0 blocks
==10157==    still reachable: 654 bytes in 9 blocks
==10157==         suppressed: 0 bytes in 0 blocks
==10157== Reachable blocks (those to which a pointer was found) are not shown.
==10157== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10157== 
==10157== For counts of detected and suppressed errors, rerun with: -v
==10157== ERROR SUMMARY: 13 errors from 13 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_nocopy lz77_opt_decompress ===
The Valgrind memory detector as below:
==10172== Memcheck, a memory error detector
==10172== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10172== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10172== Command: ./lz77_opt_decompress.out
==10172== Parent PID: 8113
==10172== 
==10172== 
==10172== HEAP SUMMARY:
==10172==     in use at exit: 659 bytes in 12 blocks
==10172==   total heap usage: 17 allocs, 5 frees, 34,013 bytes allocated
==10172== 
==10172== 0 bytes in 1 blocks are definitely lost in loss record 1 of 9
==10172==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10172==    by 0x40195E: create1DArray_BYTE (Util.c:41)
==10172==    by 0x400F26: _decompress_ (lz77_opt_decompress.c:186)
==10172==    by 0x4015E0: main (lz77_opt_decompress.c:372)
==10172== 
==10172== 10 bytes in 2 blocks are definitely lost in loss record 2 of 9
==10172==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10172==    by 0x40195E: create1DArray_BYTE (Util.c:41)
==10172==    by 0x400D78: _opt_append_ (lz77_opt_decompress.c:100)
==10172==    by 0x4011A5: _decompress_ (lz77_opt_decompress.c:290)
==10172==    by 0x4015E0: main (lz77_opt_decompress.c:372)
==10172== 
==10172== 47 bytes in 3 blocks are definitely lost in loss record 5 of 9
==10172==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10172==    by 0x40195E: create1DArray_BYTE (Util.c:41)
==10172==    by 0x400D78: _opt_append_ (lz77_opt_decompress.c:100)
==10172==    by 0x40109A: _decompress_ (lz77_opt_decompress.c:238)
==10172==    by 0x4015E0: main (lz77_opt_decompress.c:372)
==10172== 
==10172== LEAK SUMMARY:
==10172==    definitely lost: 57 bytes in 6 blocks
==10172==    indirectly lost: 0 bytes in 0 blocks
==10172==      possibly lost: 0 bytes in 0 blocks
==10172==    still reachable: 602 bytes in 6 blocks
==10172==         suppressed: 0 bytes in 0 blocks
==10172== Reachable blocks (those to which a pointer was found) are not shown.
==10172== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10172== 
==10172== For counts of detected and suppressed errors, rerun with: -v
==10172== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_nocopy_dealloc lz77_opt_decompress ===
The Valgrind memory detector as below:
==10187== Memcheck, a memory error detector
==10187== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10187== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10187== Command: ./lz77_opt_decompress.out
==10187== Parent PID: 8113
==10187== 
==10187== 
==10187== HEAP SUMMARY:
==10187==     in use at exit: 0 bytes in 0 blocks
==10187==   total heap usage: 17 allocs, 17 frees, 34,013 bytes allocated
==10187== 
==10187== All heap blocks were freed -- no leaks are possible
==10187== 
==10187== For counts of detected and suppressed errors, rerun with: -v
==10187== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
DECOMPRESSED:   
AACAACABCABAAAC

16 bytes



=== Test report for ea_dealloc MatrixMult ===
The Valgrind memory detector as below:
==10205== Memcheck, a memory error detector
==10205== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10205== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10205== Command: ./MatrixMult.out
==10205== Parent PID: 8113
==10205== 
==10205== 
==10205== HEAP SUMMARY:
==10205==     in use at exit: 0 bytes in 0 blocks
==10205==   total heap usage: 18 allocs, 18 frees, 53,464 bytes allocated
==10205== 
==10205== All heap blocks were freed -- no leaks are possible
==10205== 
==10205== For counts of detected and suppressed errors, rerun with: -v
==10205== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
size = 20
Matrix C[size-1][size-1] = 3610
Pass MatrixMult test case



=== Test report for ea_naive MatrixMult ===
The Valgrind memory detector as below:
==10221== Memcheck, a memory error detector
==10221== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10221== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10221== Command: ./MatrixMult.out
==10221== Parent PID: 8113
==10221== 
==10221== 
==10221== HEAP SUMMARY:
==10221==     in use at exit: 45,272 bytes in 17 blocks
==10221==   total heap usage: 18 allocs, 1 frees, 53,464 bytes allocated
==10221== 
==10221== 3,200 bytes in 1 blocks are definitely lost in loss record 15 of 17
==10221==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10221==    by 0x401F1B: copy1DArray_int64_t (Util.c:80)
==10221==    by 0x40115D: main (MatrixMult.c:267)
==10221== 
==10221== 3,200 bytes in 1 blocks are definitely lost in loss record 16 of 17
==10221==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10221==    by 0x401F1B: copy1DArray_int64_t (Util.c:80)
==10221==    by 0x4012B1: main (MatrixMult.c:283)
==10221== 
==10221== 3,200 bytes in 1 blocks are definitely lost in loss record 17 of 17
==10221==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10221==    by 0x401F1B: copy1DArray_int64_t (Util.c:80)
==10221==    by 0x401405: main (MatrixMult.c:299)
==10221== 
==10221== LEAK SUMMARY:
==10221==    definitely lost: 9,600 bytes in 3 blocks
==10221==    indirectly lost: 0 bytes in 0 blocks
==10221==      possibly lost: 0 bytes in 0 blocks
==10221==    still reachable: 35,672 bytes in 14 blocks
==10221==         suppressed: 0 bytes in 0 blocks
==10221== Reachable blocks (those to which a pointer was found) are not shown.
==10221== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10221== 
==10221== For counts of detected and suppressed errors, rerun with: -v
==10221== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
size = 20
Matrix C[size-1][size-1] = 3610
Pass MatrixMult test case



=== Test report for ea_nocopy MatrixMult ===
The Valgrind memory detector as below:
==10236== Memcheck, a memory error detector
==10236== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10236== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10236== Command: ./MatrixMult.out
==10236== Parent PID: 8113
==10236== 
==10236== 
==10236== HEAP SUMMARY:
==10236==     in use at exit: 10,072 bytes in 6 blocks
==10236==   total heap usage: 7 allocs, 1 frees, 18,264 bytes allocated
==10236== 
==10236== LEAK SUMMARY:
==10236==    definitely lost: 0 bytes in 0 blocks
==10236==    indirectly lost: 0 bytes in 0 blocks
==10236==      possibly lost: 0 bytes in 0 blocks
==10236==    still reachable: 10,072 bytes in 6 blocks
==10236==         suppressed: 0 bytes in 0 blocks
==10236== Reachable blocks (those to which a pointer was found) are not shown.
==10236== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10236== 
==10236== For counts of detected and suppressed errors, rerun with: -v
==10236== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
size = 20
Matrix C[size-1][size-1] = 3610
Pass MatrixMult test case



=== Test report for ea_nocopy_dealloc MatrixMult ===
The Valgrind memory detector as below:
==10251== Memcheck, a memory error detector
==10251== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10251== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10251== Command: ./MatrixMult.out
==10251== Parent PID: 8113
==10251== 
==10251== 
==10251== HEAP SUMMARY:
==10251==     in use at exit: 0 bytes in 0 blocks
==10251==   total heap usage: 7 allocs, 7 frees, 18,264 bytes allocated
==10251== 
==10251== All heap blocks were freed -- no leaks are possible
==10251== 
==10251== For counts of detected and suppressed errors, rerun with: -v
==10251== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
size = 20
Matrix C[size-1][size-1] = 3610
Pass MatrixMult test case



=== Test report for ea_dealloc mergesort ===
The Valgrind memory detector as below:
==10271== Memcheck, a memory error detector
==10271== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10271== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10271== Command: ./mergesort.out
==10271== Parent PID: 8113
==10271== 
==10271== 
==10271== HEAP SUMMARY:
==10271==     in use at exit: 0 bytes in 0 blocks
==10271==   total heap usage: 219 allocs, 219 frees, 12,072 bytes allocated
==10271== 
==10271== All heap blocks were freed -- no leaks are possible
==10271== 
==10271== For counts of detected and suppressed errors, rerun with: -v
==10271== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass mergesort test case


=== Test report for ea_naive mergesort ===
The Valgrind memory detector as below:
==10286== Memcheck, a memory error detector
==10286== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10286== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10286== Command: ./mergesort.out
==10286== Parent PID: 8113
==10286== 
==10286== 
==10286== HEAP SUMMARY:
==10286==     in use at exit: 3,880 bytes in 218 blocks
==10286==   total heap usage: 219 allocs, 1 frees, 12,072 bytes allocated
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 1 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 2 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 3 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 4 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 5 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 6 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 7 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 8 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 9 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 10 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 11 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 12 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 13 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 14 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 15 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 16 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 17 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 18 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 19 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 20 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 21 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 22 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 23 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 24 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 25 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 26 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 27 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 28 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 29 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 30 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 31 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 32 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 33 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 34 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 35 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 36 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 37 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 38 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 39 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 40 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 41 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 42 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 43 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 44 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 45 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 46 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 47 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 48 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 49 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 50 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 51 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 52 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 53 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 54 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 55 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 56 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 57 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 58 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 59 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 60 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 61 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 62 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 63 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 64 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 65 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 66 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 67 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 68 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 69 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 70 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 71 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 72 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 73 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 74 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 75 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 76 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 77 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 78 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 79 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 80 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 81 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 82 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 83 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 84 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 85 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 86 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 87 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 88 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 89 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 90 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 91 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 92 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 93 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 94 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 95 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 96 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 97 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 98 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 99 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 100 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 101 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 102 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 103 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 104 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 105 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 106 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 107 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 108 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 109 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 110 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 111 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 112 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 113 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 114 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 115 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 8 bytes in 1 blocks are definitely lost in loss record 116 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 117 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 118 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 119 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 120 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 121 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 122 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 123 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 124 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 125 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 126 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 127 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 128 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 129 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 130 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 131 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 132 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x40195E: main (mergesort.c:389)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 133 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 134 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 135 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 136 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 137 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 138 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 139 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 140 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x401C0E: main (mergesort.c:436)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 141 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 142 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 143 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 144 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 145 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 146 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 147 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 148 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 149 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 150 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 151 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 152 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 153 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 154 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 155 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 156 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 157 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 158 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 159 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 160 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 161 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 162 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 163 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 16 bytes in 1 blocks are definitely lost in loss record 164 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 165 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 166 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 167 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 168 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x40168E: main (mergesort.c:340)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 169 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 170 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 171 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 172 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x401EDE: main (mergesort.c:485)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 173 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 174 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 175 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 176 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400DCA: _sortV1_ (mergesort.c:76)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 177 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 178 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 179 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 180 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 181 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 182 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 183 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 24 bytes in 1 blocks are definitely lost in loss record 184 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x400F33: _sortV1_ (mergesort.c:94)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 32 bytes in 1 blocks are definitely lost in loss record 191 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x40189F: main (mergesort.c:380)
==10286== 
==10286== 32 bytes in 1 blocks are definitely lost in loss record 192 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x40198C: main (mergesort.c:392)
==10286== 
==10286== 32 bytes in 1 blocks are definitely lost in loss record 193 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x401B4F: main (mergesort.c:427)
==10286== 
==10286== 32 bytes in 1 blocks are definitely lost in loss record 194 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x401C3C: main (mergesort.c:439)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 202 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x4015CF: main (mergesort.c:331)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 203 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x4016BC: main (mergesort.c:343)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 204 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x401E1F: main (mergesort.c:476)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 205 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400CD3: _sortV1_ (mergesort.c:66)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 206 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400D16: _sortV1_ (mergesort.c:69)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 207 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400D3B: _sortV1_ (mergesort.c:75)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 40 bytes in 1 blocks are definitely lost in loss record 208 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400DF8: _sortV1_ (mergesort.c:79)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 48 bytes in 1 blocks are definitely lost in loss record 209 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40260E: slice (Util.c:7)
==10286==    by 0x400E27: _sortV1_ (mergesort.c:82)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 48 bytes in 1 blocks are definitely lost in loss record 210 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400E6A: _sortV1_ (mergesort.c:85)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 48 bytes in 1 blocks are definitely lost in loss record 211 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x400EA4: _sortV1_ (mergesort.c:93)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 48 bytes in 1 blocks are definitely lost in loss record 212 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x400F61: _sortV1_ (mergesort.c:97)
==10286==    by 0x402213: main (mergesort.c:560)
==10286== 
==10286== 88 bytes in 1 blocks are definitely lost in loss record 217 of 218
==10286==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10286==    by 0x40284E: copy1DArray_int64_t (Util.c:80)
==10286==    by 0x4020DB: main (mergesort.c:530)
==10286== 
==10286== LEAK SUMMARY:
==10286==    definitely lost: 2,864 bytes in 200 blocks
==10286==    indirectly lost: 0 bytes in 0 blocks
==10286==      possibly lost: 0 bytes in 0 blocks
==10286==    still reachable: 1,016 bytes in 18 blocks
==10286==         suppressed: 0 bytes in 0 blocks
==10286== Reachable blocks (those to which a pointer was found) are not shown.
==10286== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10286== 
==10286== For counts of detected and suppressed errors, rerun with: -v
==10286== ERROR SUMMARY: 200 errors from 200 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass mergesort test case


=== Test report for ea_nocopy mergesort ===
The Valgrind memory detector as below:
==10301== Memcheck, a memory error detector
==10301== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10301== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10301== Command: ./mergesort.out
==10301== Parent PID: 8113
==10301== 
==10301== 
==10301== HEAP SUMMARY:
==10301==     in use at exit: 1,288 bytes in 59 blocks
==10301==   total heap usage: 60 allocs, 1 frees, 9,480 bytes allocated
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 1 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 2 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 3 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 4 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 5 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 6 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401710: main (mergesort.c:403)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 7 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401710: main (mergesort.c:403)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 8 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401710: main (mergesort.c:403)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 9 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401710: main (mergesort.c:403)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 10 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401928: main (mergesort.c:451)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 11 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401928: main (mergesort.c:451)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 12 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401928: main (mergesort.c:451)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 13 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401928: main (mergesort.c:451)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 14 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 15 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 16 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 17 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 18 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 19 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 20 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 21 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 22 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 23 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 24 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 25 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 26 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 27 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 28 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 8 bytes in 1 blocks are definitely lost in loss record 29 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 30 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 31 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 32 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x401710: main (mergesort.c:403)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 33 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x401710: main (mergesort.c:403)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 34 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x401928: main (mergesort.c:451)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 35 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x401928: main (mergesort.c:451)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 36 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 37 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 38 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 39 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 40 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 16 bytes in 1 blocks are definitely lost in loss record 41 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 24 bytes in 1 blocks are definitely lost in loss record 42 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x4014D8: main (mergesort.c:353)
==10301== 
==10301== 24 bytes in 1 blocks are definitely lost in loss record 43 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x401B60: main (mergesort.c:501)
==10301== 
==10301== 24 bytes in 1 blocks are definitely lost in loss record 44 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400D44: _sortV1_ (mergesort.c:77)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 24 bytes in 1 blocks are definitely lost in loss record 45 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 24 bytes in 1 blocks are definitely lost in loss record 46 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x400E15: _sortV1_ (mergesort.c:96)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 40 bytes in 1 blocks are definitely lost in loss record 55 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400CD3: _sortV1_ (mergesort.c:67)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== 48 bytes in 1 blocks are definitely lost in loss record 56 of 59
==10301==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10301==    by 0x4021E9: slice (Util.c:7)
==10301==    by 0x400D8F: _sortV1_ (mergesort.c:84)
==10301==    by 0x401E00: main (mergesort.c:580)
==10301== 
==10301== LEAK SUMMARY:
==10301==    definitely lost: 632 bytes in 48 blocks
==10301==    indirectly lost: 0 bytes in 0 blocks
==10301==      possibly lost: 0 bytes in 0 blocks
==10301==    still reachable: 656 bytes in 11 blocks
==10301==         suppressed: 0 bytes in 0 blocks
==10301== Reachable blocks (those to which a pointer was found) are not shown.
==10301== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10301== 
==10301== For counts of detected and suppressed errors, rerun with: -v
==10301== ERROR SUMMARY: 48 errors from 48 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass mergesort test case


=== Test report for ea_nocopy_dealloc mergesort ===
The Valgrind memory detector as below:
==10317== Memcheck, a memory error detector
==10317== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10317== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10317== Command: ./mergesort.out
==10317== Parent PID: 8113
==10317== 
==10317== 
==10317== HEAP SUMMARY:
==10317==     in use at exit: 0 bytes in 0 blocks
==10317==   total heap usage: 60 allocs, 60 frees, 9,480 bytes allocated
==10317== 
==10317== All heap blocks were freed -- no leaks are possible
==10317== 
==10317== For counts of detected and suppressed errors, rerun with: -v
==10317== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass mergesort test case


=== Test report for ea_dealloc newTicTacToe ===
The Valgrind memory detector as below:
==10336== Memcheck, a memory error detector
==10336== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10336== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10336== Command: ./newTicTacToe.out
==10336== Parent PID: 8113
==10336== 
==10336== 
==10336== HEAP SUMMARY:
==10336==     in use at exit: 0 bytes in 0 blocks
==10336==   total heap usage: 59 allocs, 59 frees, 12,800 bytes allocated
==10336== 
==10336== All heap blocks were freed -- no leaks are possible
==10336== 
==10336== For counts of detected and suppressed errors, rerun with: -v
==10336== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Pass new TicTacToe test case


=== Test report for ea_naive newTicTacToe ===
The Valgrind memory detector as below:
==10351== Memcheck, a memory error detector
==10351== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10351== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10351== Command: ./newTicTacToe.out
==10351== Parent PID: 8113
==10351== 
==10351== 
==10351== HEAP SUMMARY:
==10351==     in use at exit: 4,608 bytes in 58 blocks
==10351==   total heap usage: 59 allocs, 1 frees, 12,800 bytes allocated
==10351== 
==10351== 72 bytes in 1 blocks are definitely lost in loss record 12 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x401C78: create1DArray_int64_t (Util.c:23)
==10351==    by 0x400D63: _EmptyBoard_ (newTicTacToe.c:63)
==10351==    by 0x400FB8: main (newTicTacToe.c:181)
==10351== 
==10351== 72 bytes in 1 blocks are definitely lost in loss record 13 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x401C78: create1DArray_int64_t (Util.c:23)
==10351==    by 0x400D63: _EmptyBoard_ (newTicTacToe.c:63)
==10351==    by 0x400FDF: main (newTicTacToe.c:187)
==10351== 
==10351== 96 (24 direct, 72 indirect) bytes in 1 blocks are definitely lost in loss record 14 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x400B6B: copy_Board (newTicTacToe.c:3)
==10351==    by 0x400FCE: main (newTicTacToe.c:184)
==10351== 
==10351== 96 (24 direct, 72 indirect) bytes in 1 blocks are definitely lost in loss record 15 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x400B6B: copy_Board (newTicTacToe.c:3)
==10351==    by 0x400FF5: main (newTicTacToe.c:190)
==10351== 
==10351== 384 (96 direct, 288 indirect) bytes in 4 blocks are definitely lost in loss record 21 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x400B6B: copy_Board (newTicTacToe.c:3)
==10351==    by 0x401488: main (newTicTacToe.c:251)
==10351== 
==10351== 384 (96 direct, 288 indirect) bytes in 4 blocks are definitely lost in loss record 22 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x400B6B: copy_Board (newTicTacToe.c:3)
==10351==    by 0x4016F6: main (newTicTacToe.c:284)
==10351== 
==10351== 504 bytes in 3 blocks are definitely lost in loss record 23 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x401C78: create1DArray_int64_t (Util.c:23)
==10351==    by 0x4014D5: main (newTicTacToe.c:265)
==10351== 
==10351== 576 bytes in 8 blocks are definitely lost in loss record 24 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x401C78: create1DArray_int64_t (Util.c:23)
==10351==    by 0x40111A: main (newTicTacToe.c:205)
==10351== 
==10351== 648 bytes in 9 blocks are definitely lost in loss record 25 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x401C78: create1DArray_int64_t (Util.c:23)
==10351==    by 0x401034: main (newTicTacToe.c:198)
==10351== 
==10351== 704 bytes in 4 blocks are definitely lost in loss record 26 of 26
==10351==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10351==    by 0x401C78: create1DArray_int64_t (Util.c:23)
==10351==    by 0x40125F: main (newTicTacToe.c:232)
==10351== 
==10351== LEAK SUMMARY:
==10351==    definitely lost: 2,816 bytes in 36 blocks
==10351==    indirectly lost: 720 bytes in 10 blocks
==10351==      possibly lost: 0 bytes in 0 blocks
==10351==    still reachable: 1,072 bytes in 12 blocks
==10351==         suppressed: 0 bytes in 0 blocks
==10351== Reachable blocks (those to which a pointer was found) are not shown.
==10351== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10351== 
==10351== For counts of detected and suppressed errors, rerun with: -v
==10351== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Pass new TicTacToe test case


=== Test report for ea_nocopy newTicTacToe ===
The Valgrind memory detector as below:
==10366== Memcheck, a memory error detector
==10366== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10366== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10366== Command: ./newTicTacToe.out
==10366== Parent PID: 8113
==10366== 
==10366== 
==10366== HEAP SUMMARY:
==10366==     in use at exit: 3,408 bytes in 34 blocks
==10366==   total heap usage: 35 allocs, 1 frees, 11,600 bytes allocated
==10366== 
==10366== 504 bytes in 3 blocks are definitely lost in loss record 11 of 14
==10366==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10366==    by 0x401C46: create1DArray_int64_t (Util.c:23)
==10366==    by 0x4014AB: main (newTicTacToe.c:276)
==10366== 
==10366== 576 bytes in 8 blocks are definitely lost in loss record 12 of 14
==10366==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10366==    by 0x401C46: create1DArray_int64_t (Util.c:23)
==10366==    by 0x4010F8: main (newTicTacToe.c:213)
==10366== 
==10366== 648 bytes in 9 blocks are definitely lost in loss record 13 of 14
==10366==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10366==    by 0x401C46: create1DArray_int64_t (Util.c:23)
==10366==    by 0x401012: main (newTicTacToe.c:206)
==10366== 
==10366== 704 bytes in 4 blocks are definitely lost in loss record 14 of 14
==10366==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10366==    by 0x401C46: create1DArray_int64_t (Util.c:23)
==10366==    by 0x40123D: main (newTicTacToe.c:241)
==10366== 
==10366== LEAK SUMMARY:
==10366==    definitely lost: 2,432 bytes in 24 blocks
==10366==    indirectly lost: 0 bytes in 0 blocks
==10366==      possibly lost: 0 bytes in 0 blocks
==10366==    still reachable: 976 bytes in 10 blocks
==10366==         suppressed: 0 bytes in 0 blocks
==10366== Reachable blocks (those to which a pointer was found) are not shown.
==10366== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10366== 
==10366== For counts of detected and suppressed errors, rerun with: -v
==10366== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Pass new TicTacToe test case


=== Test report for ea_nocopy_dealloc newTicTacToe ===
The Valgrind memory detector as below:
==10382== Memcheck, a memory error detector
==10382== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10382== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10382== Command: ./newTicTacToe.out
==10382== Parent PID: 8113
==10382== 
==10382== 
==10382== HEAP SUMMARY:
==10382==     in use at exit: 0 bytes in 0 blocks
==10382==   total heap usage: 35 allocs, 35 frees, 11,600 bytes allocated
==10382== 
==10382== All heap blocks were freed -- no leaks are possible
==10382== 
==10382== For counts of detected and suppressed errors, rerun with: -v
==10382== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Play 2's turn (CROSS)
play 1's turn (CIRCLE)
Pass new TicTacToe test case


=== Test report for ea_dealloc opt_append ===
The Valgrind memory detector as below:
==10400== Memcheck, a memory error detector
==10400== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10400== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10400== Command: ./opt_append.out
==10400== Parent PID: 8113
==10400== 
==10400== 
==10400== HEAP SUMMARY:
==10400==     in use at exit: 0 bytes in 0 blocks
==10400==   total heap usage: 10 allocs, 10 frees, 8,374 bytes allocated
==10400== 
==10400== All heap blocks were freed -- no leaks are possible
==10400== 
==10400== For counts of detected and suppressed errors, rerun with: -v
==10400== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[3]=1
Array a: 7bytes



=== Test report for ea_naive opt_append ===
The Valgrind memory detector as below:
==10415== Memcheck, a memory error detector
==10415== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10415== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10415== Command: ./opt_append.out
==10415== Parent PID: 8113
==10415== 
==10415== 
==10415== HEAP SUMMARY:
==10415==     in use at exit: 182 bytes in 9 blocks
==10415==   total heap usage: 10 allocs, 1 frees, 8,374 bytes allocated
==10415== 
==10415== 7 bytes in 1 blocks are definitely lost in loss record 6 of 9
==10415==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10415==    by 0x4014C5: create1DArray_BYTE (Util.c:41)
==10415==    by 0x400C5F: _opt_append_ (opt_append.c:53)
==10415==    by 0x400F12: main (opt_append.c:152)
==10415== 
==10415== LEAK SUMMARY:
==10415==    definitely lost: 7 bytes in 1 blocks
==10415==    indirectly lost: 0 bytes in 0 blocks
==10415==      possibly lost: 0 bytes in 0 blocks
==10415==    still reachable: 175 bytes in 8 blocks
==10415==         suppressed: 0 bytes in 0 blocks
==10415== Reachable blocks (those to which a pointer was found) are not shown.
==10415== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10415== 
==10415== For counts of detected and suppressed errors, rerun with: -v
==10415== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[3]=1
Array a: 7bytes



=== Test report for ea_nocopy opt_append ===
The Valgrind memory detector as below:
==10431== Memcheck, a memory error detector
==10431== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10431== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10431== Command: ./opt_append.out
==10431== Parent PID: 8113
==10431== 
==10431== 
==10431== HEAP SUMMARY:
==10431==     in use at exit: 165 bytes in 6 blocks
==10431==   total heap usage: 7 allocs, 1 frees, 8,357 bytes allocated
==10431== 
==10431== LEAK SUMMARY:
==10431==    definitely lost: 0 bytes in 0 blocks
==10431==    indirectly lost: 0 bytes in 0 blocks
==10431==      possibly lost: 0 bytes in 0 blocks
==10431==    still reachable: 165 bytes in 6 blocks
==10431==         suppressed: 0 bytes in 0 blocks
==10431== Reachable blocks (those to which a pointer was found) are not shown.
==10431== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10431== 
==10431== For counts of detected and suppressed errors, rerun with: -v
==10431== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[3]=1
Array a: 7bytes



=== Test report for ea_nocopy_dealloc opt_append ===
The Valgrind memory detector as below:
==10446== Memcheck, a memory error detector
==10446== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10446== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10446== Command: ./opt_append.out
==10446== Parent PID: 8113
==10446== 
==10446== 
==10446== HEAP SUMMARY:
==10446==     in use at exit: 0 bytes in 0 blocks
==10446==   total heap usage: 7 allocs, 7 frees, 8,357 bytes allocated
==10446== 
==10446== All heap blocks were freed -- no leaks are possible
==10446== 
==10446== For counts of detected and suppressed errors, rerun with: -v
==10446== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[3]=1
Array a: 7bytes



=== Test report for ea_dealloc ResetMacro1 ===
The Valgrind memory detector as below:
==10465== Memcheck, a memory error detector
==10465== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10465== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10465== Command: ./ResetMacro1.out
==10465== Parent PID: 8113
==10465== 
==10465== 
==10465== HEAP SUMMARY:
==10465==     in use at exit: 0 bytes in 0 blocks
==10465==   total heap usage: 7 allocs, 7 frees, 8,368 bytes allocated
==10465== 
==10465== All heap blocks were freed -- no leaks are possible
==10465== 
==10465== For counts of detected and suppressed errors, rerun with: -v
==10465== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
x[0] = 11



=== Test report for ea_naive ResetMacro1 ===
The Valgrind memory detector as below:
==10480== Memcheck, a memory error detector
==10480== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10480== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10480== Command: ./ResetMacro1.out
==10480== Parent PID: 8113
==10480== 
==10480== 
==10480== HEAP SUMMARY:
==10480==     in use at exit: 176 bytes in 6 blocks
==10480==   total heap usage: 7 allocs, 1 frees, 8,368 bytes allocated
==10480== 
==10480== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==10480==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10480==    by 0x401117: copy1DArray_int64_t (Util.c:80)
==10480==    by 0x400C7C: main (ResetMacro1.c:38)
==10480== 
==10480== LEAK SUMMARY:
==10480==    definitely lost: 24 bytes in 1 blocks
==10480==    indirectly lost: 0 bytes in 0 blocks
==10480==      possibly lost: 0 bytes in 0 blocks
==10480==    still reachable: 152 bytes in 5 blocks
==10480==         suppressed: 0 bytes in 0 blocks
==10480== Reachable blocks (those to which a pointer was found) are not shown.
==10480== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10480== 
==10480== For counts of detected and suppressed errors, rerun with: -v
==10480== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
x[0] = 11



=== Test report for ea_nocopy ResetMacro1 ===
The Valgrind memory detector as below:
==10495== Memcheck, a memory error detector
==10495== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10495== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10495== Command: ./ResetMacro1.out
==10495== Parent PID: 8113
==10495== 
==10495== 
==10495== HEAP SUMMARY:
==10495==     in use at exit: 80 bytes in 2 blocks
==10495==   total heap usage: 3 allocs, 1 frees, 8,272 bytes allocated
==10495== 
==10495== LEAK SUMMARY:
==10495==    definitely lost: 0 bytes in 0 blocks
==10495==    indirectly lost: 0 bytes in 0 blocks
==10495==      possibly lost: 0 bytes in 0 blocks
==10495==    still reachable: 80 bytes in 2 blocks
==10495==         suppressed: 0 bytes in 0 blocks
==10495== Reachable blocks (those to which a pointer was found) are not shown.
==10495== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10495== 
==10495== For counts of detected and suppressed errors, rerun with: -v
==10495== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
x[0] = 11



=== Test report for ea_nocopy_dealloc ResetMacro1 ===
The Valgrind memory detector as below:
==10510== Memcheck, a memory error detector
==10510== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10510== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10510== Command: ./ResetMacro1.out
==10510== Parent PID: 8113
==10510== 
==10510== 
==10510== HEAP SUMMARY:
==10510==     in use at exit: 0 bytes in 0 blocks
==10510==   total heap usage: 3 allocs, 3 frees, 8,272 bytes allocated
==10510== 
==10510== All heap blocks were freed -- no leaks are possible
==10510== 
==10510== For counts of detected and suppressed errors, rerun with: -v
==10510== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
x[0] = 11



=== Test report for ea_dealloc ResetMacro2 ===
The Valgrind memory detector as below:
==10529== Memcheck, a memory error detector
==10529== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10529== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10529== Command: ./ResetMacro2.out
==10529== Parent PID: 8113
==10529== 
==10529== 
==10529== HEAP SUMMARY:
==10529==     in use at exit: 0 bytes in 0 blocks
==10529==   total heap usage: 7 allocs, 7 frees, 8,368 bytes allocated
==10529== 
==10529== All heap blocks were freed -- no leaks are possible
==10529== 
==10529== For counts of detected and suppressed errors, rerun with: -v
==10529== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 11



=== Test report for ea_naive ResetMacro2 ===
The Valgrind memory detector as below:
==10544== Memcheck, a memory error detector
==10544== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10544== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10544== Command: ./ResetMacro2.out
==10544== Parent PID: 8113
==10544== 
==10544== 
==10544== HEAP SUMMARY:
==10544==     in use at exit: 176 bytes in 6 blocks
==10544==   total heap usage: 7 allocs, 1 frees, 8,368 bytes allocated
==10544== 
==10544== 24 bytes in 1 blocks are definitely lost in loss record 3 of 6
==10544==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10544==    by 0x400FAF: create1DArray_int64_t (Util.c:23)
==10544==    by 0x400C48: _g2_ (ResetMacro2.c:29)
==10544==    by 0x400D92: main (ResetMacro2.c:61)
==10544== 
==10544== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==10544==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10544==    by 0x40115B: copy1DArray_int64_t (Util.c:80)
==10544==    by 0x400C67: _g2_ (ResetMacro2.c:31)
==10544==    by 0x400D92: main (ResetMacro2.c:61)
==10544== 
==10544== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==10544==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10544==    by 0x400C83: _g2_ (ResetMacro2.c:37)
==10544==    by 0x400D92: main (ResetMacro2.c:61)
==10544== 
==10544== LEAK SUMMARY:
==10544==    definitely lost: 72 bytes in 3 blocks
==10544==    indirectly lost: 0 bytes in 0 blocks
==10544==      possibly lost: 0 bytes in 0 blocks
==10544==    still reachable: 104 bytes in 3 blocks
==10544==         suppressed: 0 bytes in 0 blocks
==10544== Reachable blocks (those to which a pointer was found) are not shown.
==10544== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10544== 
==10544== For counts of detected and suppressed errors, rerun with: -v
==10544== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 11



=== Test report for ea_nocopy ResetMacro2 ===
The Valgrind memory detector as below:
==10559== Memcheck, a memory error detector
==10559== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10559== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10559== Command: ./ResetMacro2.out
==10559== Parent PID: 8113
==10559== 
==10559== 
==10559== HEAP SUMMARY:
==10559==     in use at exit: 80 bytes in 2 blocks
==10559==   total heap usage: 3 allocs, 1 frees, 8,272 bytes allocated
==10559== 
==10559== LEAK SUMMARY:
==10559==    definitely lost: 0 bytes in 0 blocks
==10559==    indirectly lost: 0 bytes in 0 blocks
==10559==      possibly lost: 0 bytes in 0 blocks
==10559==    still reachable: 80 bytes in 2 blocks
==10559==         suppressed: 0 bytes in 0 blocks
==10559== Reachable blocks (those to which a pointer was found) are not shown.
==10559== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10559== 
==10559== For counts of detected and suppressed errors, rerun with: -v
==10559== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 11



=== Test report for ea_nocopy_dealloc ResetMacro2 ===
The Valgrind memory detector as below:
==10574== Memcheck, a memory error detector
==10574== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10574== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10574== Command: ./ResetMacro2.out
==10574== Parent PID: 8113
==10574== 
==10574== 
==10574== HEAP SUMMARY:
==10574==     in use at exit: 0 bytes in 0 blocks
==10574==   total heap usage: 3 allocs, 3 frees, 8,272 bytes allocated
==10574== 
==10574== All heap blocks were freed -- no leaks are possible
==10574== 
==10574== For counts of detected and suppressed errors, rerun with: -v
==10574== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
a[0] = 11



=== Test report for ea_dealloc ResetMacro3 ===
The Valgrind memory detector as below:
==10593== Memcheck, a memory error detector
==10593== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10593== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10593== Command: ./ResetMacro3.out
==10593== Parent PID: 8113
==10593== 
==10593== 
==10593== HEAP SUMMARY:
==10593==     in use at exit: 0 bytes in 0 blocks
==10593==   total heap usage: 12 allocs, 12 frees, 8,456 bytes allocated
==10593== 
==10593== All heap blocks were freed -- no leaks are possible
==10593== 
==10593== For counts of detected and suppressed errors, rerun with: -v
==10593== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
11
65536



=== Test report for ea_naive ResetMacro3 ===
The Valgrind memory detector as below:
==10609== Memcheck, a memory error detector
==10609== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10609== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10609== Command: ./ResetMacro3.out
==10609== Parent PID: 8113
==10609== 
==10609== 
==10609== HEAP SUMMARY:
==10609==     in use at exit: 264 bytes in 11 blocks
==10609==   total heap usage: 12 allocs, 1 frees, 8,456 bytes allocated
==10609== 
==10609== 24 bytes in 1 blocks are definitely lost in loss record 6 of 11
==10609==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10609==    by 0x4012B5: copy1DArray_int64_t (Util.c:80)
==10609==    by 0x400D3C: main (ResetMacro3.c:70)
==10609== 
==10609== 24 bytes in 1 blocks are definitely lost in loss record 7 of 11
==10609==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10609==    by 0x401109: create1DArray_int64_t (Util.c:23)
==10609==    by 0x400BC8: _func_ (ResetMacro3.c:15)
==10609==    by 0x400DD7: main (ResetMacro3.c:77)
==10609== 
==10609== 24 bytes in 1 blocks are definitely lost in loss record 8 of 11
==10609==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10609==    by 0x4012B5: copy1DArray_int64_t (Util.c:80)
==10609==    by 0x400BE7: _func_ (ResetMacro3.c:17)
==10609==    by 0x400DD7: main (ResetMacro3.c:77)
==10609== 
==10609== 24 bytes in 1 blocks are definitely lost in loss record 9 of 11
==10609==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10609==    by 0x4012B5: copy1DArray_int64_t (Util.c:80)
==10609==    by 0x400E33: main (ResetMacro3.c:82)
==10609== 
==10609== 24 bytes in 1 blocks are definitely lost in loss record 10 of 11
==10609==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10609==    by 0x401109: create1DArray_int64_t (Util.c:23)
==10609==    by 0x400BC8: _func_ (ResetMacro3.c:15)
==10609==    by 0x400F69: main (ResetMacro3.c:116)
==10609== 
==10609== 24 bytes in 1 blocks are definitely lost in loss record 11 of 11
==10609==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10609==    by 0x4012B5: copy1DArray_int64_t (Util.c:80)
==10609==    by 0x400BE7: _func_ (ResetMacro3.c:17)
==10609==    by 0x400F69: main (ResetMacro3.c:116)
==10609== 
==10609== LEAK SUMMARY:
==10609==    definitely lost: 144 bytes in 6 blocks
==10609==    indirectly lost: 0 bytes in 0 blocks
==10609==      possibly lost: 0 bytes in 0 blocks
==10609==    still reachable: 120 bytes in 5 blocks
==10609==         suppressed: 0 bytes in 0 blocks
==10609== Reachable blocks (those to which a pointer was found) are not shown.
==10609== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10609== 
==10609== For counts of detected and suppressed errors, rerun with: -v
==10609== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
11
65536



=== Test report for ea_nocopy ResetMacro3 ===
The Valgrind memory detector as below:
==10624== Memcheck, a memory error detector
==10624== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10624== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10624== Command: ./ResetMacro3.out
==10624== Parent PID: 8113
==10624== 
==10624== 
==10624== HEAP SUMMARY:
==10624==     in use at exit: 72 bytes in 3 blocks
==10624==   total heap usage: 4 allocs, 1 frees, 8,264 bytes allocated
==10624== 
==10624== 24 bytes in 1 blocks are definitely lost in loss record 2 of 3
==10624==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10624==    by 0x400FCD: create1DArray_int64_t (Util.c:23)
==10624==    by 0x400BC8: _func_ (ResetMacro3.c:15)
==10624==    by 0x400D42: main (ResetMacro3.c:78)
==10624== 
==10624== 24 bytes in 1 blocks are definitely lost in loss record 3 of 3
==10624==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10624==    by 0x400FCD: create1DArray_int64_t (Util.c:23)
==10624==    by 0x400BC8: _func_ (ResetMacro3.c:15)
==10624==    by 0x400E45: main (ResetMacro3.c:118)
==10624== 
==10624== LEAK SUMMARY:
==10624==    definitely lost: 48 bytes in 2 blocks
==10624==    indirectly lost: 0 bytes in 0 blocks
==10624==      possibly lost: 0 bytes in 0 blocks
==10624==    still reachable: 24 bytes in 1 blocks
==10624==         suppressed: 0 bytes in 0 blocks
==10624== Reachable blocks (those to which a pointer was found) are not shown.
==10624== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10624== 
==10624== For counts of detected and suppressed errors, rerun with: -v
==10624== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
11
65536



=== Test report for ea_nocopy_dealloc ResetMacro3 ===
The Valgrind memory detector as below:
==10640== Memcheck, a memory error detector
==10640== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10640== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10640== Command: ./ResetMacro3.out
==10640== Parent PID: 8113
==10640== 
==10640== 
==10640== HEAP SUMMARY:
==10640==     in use at exit: 0 bytes in 0 blocks
==10640==   total heap usage: 4 allocs, 4 frees, 8,264 bytes allocated
==10640== 
==10640== All heap blocks were freed -- no leaks are possible
==10640== 
==10640== For counts of detected and suppressed errors, rerun with: -v
==10640== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
11
65536



=== Test report for ea_dealloc ResetMacro4 ===
The Valgrind memory detector as below:
==10658== Memcheck, a memory error detector
==10658== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10658== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10658== Command: ./ResetMacro4.out
==10658== Parent PID: 8113
==10658== 
==10658== 
==10658== HEAP SUMMARY:
==10658==     in use at exit: 0 bytes in 0 blocks
==10658==   total heap usage: 8 allocs, 8 frees, 8,752 bytes allocated
==10658== 
==10658== All heap blocks were freed -- no leaks are possible
==10658== 
==10658== For counts of detected and suppressed errors, rerun with: -v
==10658== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
2
4
6
8
10
12
14
16
18



=== Test report for ea_naive ResetMacro4 ===
The Valgrind memory detector as below:
==10673== Memcheck, a memory error detector
==10673== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10673== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10673== Command: ./ResetMacro4.out
==10673== Parent PID: 8113
==10673== 
==10673== 
==10673== HEAP SUMMARY:
==10673==     in use at exit: 560 bytes in 7 blocks
==10673==   total heap usage: 8 allocs, 1 frees, 8,752 bytes allocated
==10673== 
==10673== 80 bytes in 1 blocks are definitely lost in loss record 6 of 7
==10673==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10673==    by 0x401181: create1DArray_int64_t (Util.c:23)
==10673==    by 0x400BEF: _add_ (ResetMacro4.c:26)
==10673==    by 0x400F84: main (ResetMacro4.c:128)
==10673== 
==10673== 80 bytes in 1 blocks are definitely lost in loss record 7 of 7
==10673==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10673==    by 0x40132D: copy1DArray_int64_t (Util.c:80)
==10673==    by 0x400C0E: _add_ (ResetMacro4.c:28)
==10673==    by 0x400F84: main (ResetMacro4.c:128)
==10673== 
==10673== LEAK SUMMARY:
==10673==    definitely lost: 160 bytes in 2 blocks
==10673==    indirectly lost: 0 bytes in 0 blocks
==10673==      possibly lost: 0 bytes in 0 blocks
==10673==    still reachable: 400 bytes in 5 blocks
==10673==         suppressed: 0 bytes in 0 blocks
==10673== Reachable blocks (those to which a pointer was found) are not shown.
==10673== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10673== 
==10673== For counts of detected and suppressed errors, rerun with: -v
==10673== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
2
4
6
8
10
12
14
16
18



=== Test report for ea_nocopy ResetMacro4 ===
The Valgrind memory detector as below:
==10688== Memcheck, a memory error detector
==10688== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10688== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10688== Command: ./ResetMacro4.out
==10688== Parent PID: 8113
==10688== 
==10688== 
==10688== HEAP SUMMARY:
==10688==     in use at exit: 320 bytes in 4 blocks
==10688==   total heap usage: 5 allocs, 1 frees, 8,512 bytes allocated
==10688== 
==10688== 80 bytes in 1 blocks are definitely lost in loss record 4 of 4
==10688==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10688==    by 0x40114E: create1DArray_int64_t (Util.c:23)
==10688==    by 0x400BEF: _add_ (ResetMacro4.c:27)
==10688==    by 0x400F63: main (ResetMacro4.c:139)
==10688== 
==10688== LEAK SUMMARY:
==10688==    definitely lost: 80 bytes in 1 blocks
==10688==    indirectly lost: 0 bytes in 0 blocks
==10688==      possibly lost: 0 bytes in 0 blocks
==10688==    still reachable: 240 bytes in 3 blocks
==10688==         suppressed: 0 bytes in 0 blocks
==10688== Reachable blocks (those to which a pointer was found) are not shown.
==10688== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10688== 
==10688== For counts of detected and suppressed errors, rerun with: -v
==10688== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
2
4
6
8
10
12
14
16
18



=== Test report for ea_nocopy_dealloc ResetMacro4 ===
The Valgrind memory detector as below:
==10704== Memcheck, a memory error detector
==10704== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10704== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10704== Command: ./ResetMacro4.out
==10704== Parent PID: 8113
==10704== 
==10704== 
==10704== HEAP SUMMARY:
==10704==     in use at exit: 0 bytes in 0 blocks
==10704==   total heap usage: 5 allocs, 5 frees, 8,512 bytes allocated
==10704== 
==10704== All heap blocks were freed -- no leaks are possible
==10704== 
==10704== For counts of detected and suppressed errors, rerun with: -v
==10704== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
0
2
4
6
8
10
12
14
16
18



=== Test report for ea_dealloc reverse ===
The Valgrind memory detector as below:
==10722== Memcheck, a memory error detector
==10722== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10722== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10722== Command: ./reverse.out
==10722== Parent PID: 8113
==10722== 
==10722== 
==10722== HEAP SUMMARY:
==10722==     in use at exit: 0 bytes in 0 blocks
==10722==   total heap usage: 14 allocs, 14 frees, 9,136 bytes allocated
==10722== 
==10722== All heap blocks were freed -- no leaks are possible
==10722== 
==10722== For counts of detected and suppressed errors, rerun with: -v
==10722== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass reverse test case


=== Test report for ea_naive reverse ===
The Valgrind memory detector as below:
==10741== Memcheck, a memory error detector
==10741== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10741== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10741== Command: ./reverse.out
==10741== Parent PID: 8113
==10741== 
==10741== 
==10741== HEAP SUMMARY:
==10741==     in use at exit: 944 bytes in 13 blocks
==10741==   total heap usage: 14 allocs, 1 frees, 9,136 bytes allocated
==10741== 
==10741== 40 bytes in 1 blocks are definitely lost in loss record 6 of 13
==10741==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10741==    by 0x401539: create1DArray_int64_t (Util.c:23)
==10741==    by 0x400BE9: _reverse_ (reverse.c:29)
==10741==    by 0x400EEA: main (reverse.c:116)
==10741== 
==10741== 88 bytes in 1 blocks are definitely lost in loss record 11 of 13
==10741==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10741==    by 0x4016E5: copy1DArray_int64_t (Util.c:80)
==10741==    by 0x4010BD: main (reverse.c:161)
==10741== 
==10741== 88 bytes in 1 blocks are definitely lost in loss record 12 of 13
==10741==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10741==    by 0x401539: create1DArray_int64_t (Util.c:23)
==10741==    by 0x400BE9: _reverse_ (reverse.c:29)
==10741==    by 0x4011B3: main (reverse.c:185)
==10741== 
==10741== LEAK SUMMARY:
==10741==    definitely lost: 216 bytes in 3 blocks
==10741==    indirectly lost: 0 bytes in 0 blocks
==10741==      possibly lost: 0 bytes in 0 blocks
==10741==    still reachable: 728 bytes in 10 blocks
==10741==         suppressed: 0 bytes in 0 blocks
==10741== Reachable blocks (those to which a pointer was found) are not shown.
==10741== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10741== 
==10741== For counts of detected and suppressed errors, rerun with: -v
==10741== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass reverse test case


=== Test report for ea_nocopy reverse ===
The Valgrind memory detector as below:
==10756== Memcheck, a memory error detector
==10756== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10756== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10756== Command: ./reverse.out
==10756== Parent PID: 8113
==10756== 
==10756== 
==10756== HEAP SUMMARY:
==10756==     in use at exit: 472 bytes in 6 blocks
==10756==   total heap usage: 7 allocs, 1 frees, 8,664 bytes allocated
==10756== 
==10756== LEAK SUMMARY:
==10756==    definitely lost: 0 bytes in 0 blocks
==10756==    indirectly lost: 0 bytes in 0 blocks
==10756==      possibly lost: 0 bytes in 0 blocks
==10756==    still reachable: 472 bytes in 6 blocks
==10756==         suppressed: 0 bytes in 0 blocks
==10756== Reachable blocks (those to which a pointer was found) are not shown.
==10756== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10756== 
==10756== For counts of detected and suppressed errors, rerun with: -v
==10756== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass reverse test case


=== Test report for ea_nocopy_dealloc reverse ===
The Valgrind memory detector as below:
==10772== Memcheck, a memory error detector
==10772== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10772== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10772== Command: ./reverse.out
==10772== Parent PID: 8113
==10772== 
==10772== 
==10772== HEAP SUMMARY:
==10772==     in use at exit: 0 bytes in 0 blocks
==10772==   total heap usage: 7 allocs, 7 frees, 8,664 bytes allocated
==10772== 
==10772== All heap blocks were freed -- no leaks are possible
==10772== 
==10772== For counts of detected and suppressed errors, rerun with: -v
==10772== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass reverse test case


=== Test report for ea_dealloc SobelEdge ===
The Valgrind memory detector as below:
==10790== Memcheck, a memory error detector
==10790== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10790== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10790== Command: ./SobelEdge.out
==10790== Parent PID: 8113
==10790== 
==10790== 
==10790== HEAP SUMMARY:
==10790==     in use at exit: 0 bytes in 0 blocks
==10790==   total heap usage: 16,468 allocs, 16,468 frees, 34,223,251 bytes allocated
==10790== 
==10790== All heap blocks were freed -- no leaks are possible
==10790== 
==10790== For counts of detected and suppressed errors, rerun with: -v
==10790== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111100011111110001111111000111111100011111100000
0000100000110010000110010000011001000001100100000110010000110000
0000101111110010111111010111111001011111100101111110010111111000
0000101000000010100101010100000001010000000101000000010100101000
0000101111100010111111010111110001011111000101111100010111111000
0000100000100010000110010000010001000001000100000100010000110000
0000101111100010111100010111110001011111000101111100010111100000
0000101000000010100000010100000001010000000101000000010100000000
0000101111110010100000010110000001011111100101111110010100000000
0000100000110010100000010000000001000001100100000110010100000000
0000111111100011100000011110000001111111000111111100011100000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000



=== Test report for ea_naive SobelEdge ===
The Valgrind memory detector as below:
==10805== Memcheck, a memory error detector
==10805== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10805== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10805== Command: ./SobelEdge.out
==10805== Parent PID: 8113
==10805== 
==10805== 
==10805== HEAP SUMMARY:
==10805==     in use at exit: 34,174,064 bytes in 16,463 blocks
==10805==   total heap usage: 16,468 allocs, 5 frees, 34,223,251 bytes allocated
==10805== 
==10805== 0 bytes in 64 blocks are definitely lost in loss record 1 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401EC6: create1DArray_int64_t (Util.c:23)
==10805==    by 0x401958: _print_pbm_ (SobelEdge.c:532)
==10805==    by 0x401DF6: main (SobelEdge.c:600)
==10805== 
==10805== 8 bytes in 1 blocks are definitely lost in loss record 2 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401EC6: create1DArray_int64_t (Util.c:23)
==10805==    by 0x4017F2: _print_pbm_ (SobelEdge.c:456)
==10805==    by 0x401DF6: main (SobelEdge.c:600)
==10805== 
==10805== 16 bytes in 1 blocks are definitely lost in loss record 3 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401EC6: create1DArray_int64_t (Util.c:23)
==10805==    by 0x401783: _print_pbm_ (SobelEdge.c:441)
==10805==    by 0x401DF6: main (SobelEdge.c:600)
==10805== 
==10805== 72 bytes in 1 blocks are definitely lost in loss record 4 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401EC6: create1DArray_int64_t (Util.c:23)
==10805==    by 0x4010CA: _sobelEdgeDetection_ (SobelEdge.c:286)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 72 bytes in 1 blocks are definitely lost in loss record 5 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x402072: copy1DArray_int64_t (Util.c:80)
==10805==    by 0x4011B1: _sobelEdgeDetection_ (SobelEdge.c:289)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 72 bytes in 1 blocks are definitely lost in loss record 6 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401EC6: create1DArray_int64_t (Util.c:23)
==10805==    by 0x40126D: _sobelEdgeDetection_ (SobelEdge.c:315)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 72 bytes in 1 blocks are definitely lost in loss record 7 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x402072: copy1DArray_int64_t (Util.c:80)
==10805==    by 0x401354: _sobelEdgeDetection_ (SobelEdge.c:318)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 4,096 bytes in 1 blocks are definitely lost in loss record 16 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401F57: create1DArray_BYTE (Util.c:41)
==10805==    by 0x400FE0: _sobelEdgeDetection_ (SobelEdge.c:258)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 8,192 bytes in 2 blocks are possibly lost in loss record 17 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401400: _sobelEdgeDetection_ (SobelEdge.c:344)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 294,912 bytes in 4,096 blocks are definitely lost in loss record 18 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x40146C: _sobelEdgeDetection_ (SobelEdge.c:346)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 294,912 bytes in 4,096 blocks are definitely lost in loss record 19 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x40158D: _sobelEdgeDetection_ (SobelEdge.c:356)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 16,769,024 bytes in 4,094 blocks are definitely lost in loss record 20 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401400: _sobelEdgeDetection_ (SobelEdge.c:344)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== 16,777,216 bytes in 4,096 blocks are definitely lost in loss record 21 of 21
==10805==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10805==    by 0x401527: _sobelEdgeDetection_ (SobelEdge.c:354)
==10805==    by 0x401D55: main (SobelEdge.c:592)
==10805== 
==10805== LEAK SUMMARY:
==10805==    definitely lost: 34,140,472 bytes in 16,453 blocks
==10805==    indirectly lost: 0 bytes in 0 blocks
==10805==      possibly lost: 8,192 bytes in 2 blocks
==10805==    still reachable: 25,400 bytes in 8 blocks
==10805==         suppressed: 0 bytes in 0 blocks
==10805== Reachable blocks (those to which a pointer was found) are not shown.
==10805== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10805== 
==10805== For counts of detected and suppressed errors, rerun with: -v
==10805== ERROR SUMMARY: 13 errors from 13 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111100011111110001111111000111111100011111100000
0000100000110010000110010000011001000001100100000110010000110000
0000101111110010111111010111111001011111100101111110010111111000
0000101000000010100101010100000001010000000101000000010100101000
0000101111100010111111010111110001011111000101111100010111111000
0000100000100010000110010000010001000001000100000100010000110000
0000101111100010111100010111110001011111000101111100010111100000
0000101000000010100000010100000001010000000101000000010100000000
0000101111110010100000010110000001011111100101111110010100000000
0000100000110010100000010000000001000001100100000110010100000000
0000111111100011100000011110000001111111000111111100011100000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000



=== Test report for ea_nocopy SobelEdge ===
The Valgrind memory detector as below:
==10822== Memcheck, a memory error detector
==10822== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10822== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10822== Command: ./SobelEdge.out
==10822== Parent PID: 8113
==10822== 
==10822== 
==10822== HEAP SUMMARY:
==10822==     in use at exit: 9,184 bytes in 72 blocks
==10822==   total heap usage: 77 allocs, 5 frees, 58,371 bytes allocated
==10822== 
==10822== 0 bytes in 64 blocks are definitely lost in loss record 1 of 9
==10822==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10822==    by 0x401BFC: create1DArray_int64_t (Util.c:23)
==10822==    by 0x401773: _print_pbm_ (SobelEdge.c:556)
==10822==    by 0x401B2C: main (SobelEdge.c:628)
==10822== 
==10822== 8 bytes in 1 blocks are definitely lost in loss record 2 of 9
==10822==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10822==    by 0x401BFC: create1DArray_int64_t (Util.c:23)
==10822==    by 0x40160D: _print_pbm_ (SobelEdge.c:476)
==10822==    by 0x401B2C: main (SobelEdge.c:628)
==10822== 
==10822== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==10822==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10822==    by 0x401BFC: create1DArray_int64_t (Util.c:23)
==10822==    by 0x40159E: _print_pbm_ (SobelEdge.c:461)
==10822==    by 0x401B2C: main (SobelEdge.c:628)
==10822== 
==10822== 72 bytes in 1 blocks are definitely lost in loss record 4 of 9
==10822==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10822==    by 0x401BFC: create1DArray_int64_t (Util.c:23)
==10822==    by 0x4010B8: _sobelEdgeDetection_ (SobelEdge.c:300)
==10822==    by 0x401AF6: main (SobelEdge.c:620)
==10822== 
==10822== 72 bytes in 1 blocks are definitely lost in loss record 5 of 9
==10822==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10822==    by 0x401BFC: create1DArray_int64_t (Util.c:23)
==10822==    by 0x401249: _sobelEdgeDetection_ (SobelEdge.c:330)
==10822==    by 0x401AF6: main (SobelEdge.c:620)
==10822== 
==10822== LEAK SUMMARY:
==10822==    definitely lost: 168 bytes in 68 blocks
==10822==    indirectly lost: 0 bytes in 0 blocks
==10822==      possibly lost: 0 bytes in 0 blocks
==10822==    still reachable: 9,016 bytes in 4 blocks
==10822==         suppressed: 0 bytes in 0 blocks
==10822== Reachable blocks (those to which a pointer was found) are not shown.
==10822== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10822== 
==10822== For counts of detected and suppressed errors, rerun with: -v
==10822== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111100011111110001111111000111111100011111100000
0000100000110010000110010000011001000001100100000110010000110000
0000101111110010111111010111111001011111100101111110010111111000
0000101000000010100101010100000001010000000101000000010100101000
0000101111100010111111010111110001011111000101111100010111111000
0000100000100010000110010000010001000001000100000100010000110000
0000101111100010111100010111110001011111000101111100010111100000
0000101000000010100000010100000001010000000101000000010100000000
0000101111110010100000010110000001011111100101111110010100000000
0000100000110010100000010000000001000001100100000110010100000000
0000111111100011100000011110000001111111000111111100011100000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000



=== Test report for ea_nocopy_dealloc SobelEdge ===
The Valgrind memory detector as below:
==10837== Memcheck, a memory error detector
==10837== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10837== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10837== Command: ./SobelEdge.out
==10837== Parent PID: 8113
==10837== 
==10837== 
==10837== HEAP SUMMARY:
==10837==     in use at exit: 0 bytes in 0 blocks
==10837==   total heap usage: 77 allocs, 77 frees, 58,371 bytes allocated
==10837== 
==10837== All heap blocks were freed -- no leaks are possible
==10837== 
==10837== For counts of detected and suppressed errors, rerun with: -v
==10837== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
P1
64 64
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111100011111110001111111000111111100011111100000
0000100000110010000110010000011001000001100100000110010000110000
0000101111110010111111010111111001011111100101111110010111111000
0000101000000010100101010100000001010000000101000000010100101000
0000101111100010111111010111110001011111000101111100010111111000
0000100000100010000110010000010001000001000100000100010000110000
0000101111100010111100010111110001011111000101111100010111100000
0000101000000010100000010100000001010000000101000000010100000000
0000101111110010100000010110000001011111100101111110010100000000
0000100000110010100000010000000001000001100100000110010100000000
0000111111100011100000011110000001111111000111111100011100000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000111111100011111110001111111000111111000111111100011111110000
0000100000110010000011001000001100100001100100000110010000011000
0000101111110010111111001011111100101111110101111110010111111000
0000101000000010100000001010000000101001010101000000010100000000
0000101111100010111110001011111000101111110101111100010111110000
0000100000100010000010001000001000100001100100000100010000010000
0000101111100010111110001011111000101111000101111100010111110000
0000101000000010100000001010000000101000000101000000010100000000
0000101100000010111111001011111100101000000101100000010111111000
0000100000000010000011001000001100101000000100000000010000011000
0000111100000011111110001111111000111000000111100000011111110000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000



=== Test report for ea_dealloc swap ===
The Valgrind memory detector as below:
==10855== Memcheck, a memory error detector
==10855== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10855== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10855== Command: ./swap.out
==10855== Parent PID: 8113
==10855== 
==10855== 
==10855== HEAP SUMMARY:
==10855==     in use at exit: 0 bytes in 0 blocks
==10855==   total heap usage: 11 allocs, 11 frees, 8,704 bytes allocated
==10855== 
==10855== All heap blocks were freed -- no leaks are possible
==10855== 
==10855== For counts of detected and suppressed errors, rerun with: -v
==10855== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass swap test case


=== Test report for ea_naive swap ===
The Valgrind memory detector as below:
==10871== Memcheck, a memory error detector
==10871== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10871== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10871== Command: ./swap.out
==10871== Parent PID: 8113
==10871== 
==10871== 
==10871== HEAP SUMMARY:
==10871==     in use at exit: 512 bytes in 10 blocks
==10871==   total heap usage: 11 allocs, 1 frees, 8,704 bytes allocated
==10871== 
==10871== 40 bytes in 1 blocks are definitely lost in loss record 8 of 10
==10871==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10871==    by 0x40145E: copy1DArray_int64_t (Util.c:80)
==10871==    by 0x400D00: main (swap.c:46)
==10871== 
==10871== 40 bytes in 1 blocks are definitely lost in loss record 9 of 10
==10871==    at 0x4C2DBF6: malloc (vg_replace_malloc.c:299)
==10871==    by 0x40145E: copy1DArray_int64_t (Util.c:80)
==10871==    by 0x400DD2: main (swap.c:61)
==10871== 
==10871== LEAK SUMMARY:
==10871==    definitely lost: 80 bytes in 2 blocks
==10871==    indirectly lost: 0 bytes in 0 blocks
==10871==      possibly lost: 0 bytes in 0 blocks
==10871==    still reachable: 432 bytes in 8 blocks
==10871==         suppressed: 0 bytes in 0 blocks
==10871== Reachable blocks (those to which a pointer was found) are not shown.
==10871== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10871== 
==10871== For counts of detected and suppressed errors, rerun with: -v
==10871== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass swap test case


=== Test report for ea_nocopy swap ===
The Valgrind memory detector as below:
==10888== Memcheck, a memory error detector
==10888== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10888== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10888== Command: ./swap.out
==10888== Parent PID: 8113
==10888== 
==10888== 
==10888== HEAP SUMMARY:
==10888==     in use at exit: 312 bytes in 5 blocks
==10888==   total heap usage: 6 allocs, 1 frees, 8,504 bytes allocated
==10888== 
==10888== LEAK SUMMARY:
==10888==    definitely lost: 0 bytes in 0 blocks
==10888==    indirectly lost: 0 bytes in 0 blocks
==10888==      possibly lost: 0 bytes in 0 blocks
==10888==    still reachable: 312 bytes in 5 blocks
==10888==         suppressed: 0 bytes in 0 blocks
==10888== Reachable blocks (those to which a pointer was found) are not shown.
==10888== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==10888== 
==10888== For counts of detected and suppressed errors, rerun with: -v
==10888== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass swap test case


=== Test report for ea_nocopy_dealloc swap ===
The Valgrind memory detector as below:
==10905== Memcheck, a memory error detector
==10905== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10905== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10905== Command: ./swap.out
==10905== Parent PID: 8113
==10905== 
==10905== 
==10905== HEAP SUMMARY:
==10905==     in use at exit: 0 bytes in 0 blocks
==10905==   total heap usage: 6 allocs, 6 frees, 8,504 bytes allocated
==10905== 
==10905== All heap blocks were freed -- no leaks are possible
==10905== 
==10905== For counts of detected and suppressed errors, rerun with: -v
==10905== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
The deallocation macros are as below:
Pass swap test case


