WARNING: version numbering unavailable
Parsed 1 source file(s). ....................................................... [85ms+1mb]
Typed 1 source file(s). ........................................................ [87ms+1mb]
Generated code for 1 source file(s). ............................................... [19ms]
[./reverse.whiley] applied definite assignment check ............................ [2ms+1mb]
[./reverse.whiley] applied module check ......................................... [2ms+1mb]
[./reverse.whiley] applied loop variants ........................................ [1ms+1mb]
[./reverse.whiley] applied coercion check ........................................... [0ms]
Whiley => Wyil: compiled 1 file(s) ............................................ [235ms-1mb]
reverse.0 [	lengthof %5 = %0 : int[]]
reverse.1 [	assign %2 = %5  : int]
reverse.2 [	const %6 = 0 : int]
reverse.3 [	lengthof %7 = %0 : int[]]
reverse.4 [	arraygen %8 = [6; 7] : int[]]
reverse.5 [	assign %3 = %8  : int[]]
reverse.6 [	loop (%2, %3, %4, %9, %10, %11, %12, %13, %14, %15, %16, %17)]
reverse.7 [	invariant]
reverse.8 [	const %12 = 0 : int]
reverse.9 [	ifle %2, %12 goto blklab0 : int]
reverse.10 [	lengthof %13 = %0 : int[]]
reverse.11 [	sub %14 = %13, %2 : int]
reverse.12 [	indexof %15 = %0, %14 : int[]]
reverse.13 [	assign %4 = %15  : int]
reverse.14 [	const %16 = 1 : int]
reverse.15 [	sub %17 = %2, %16 : int]
reverse.16 [	assign %2 = %17  : int]
reverse.17 [	update %3[%2] = %4 : int[] -> int[]]
reverse.18 [.blklab1]
reverse.19 [.blklab0]
reverse.20 [	return %3]
reverse.21 [	return]
main.0 [	const %5 = 0 : int]
main.1 [	const %6 = 10 : int]
main.2 [	arraygen %7 = [5; 6] : int[]]
main.3 [	assign %1 = %7  : int[]]
main.4 [	const %8 = 0 : int]
main.5 [	assign %2 = %8  : int]
main.6 [	loop (%1, %2, %9, %10, %11, %12, %13)]
main.7 [	const %9 = 10 : int]
main.8 [	ifge %2, %9 goto blklab4 : int]
main.9 [	const %10 = 10 : int]
main.10 [	sub %11 = %10, %2 : int]
main.11 [	update %1[%2] = %11 : int[] -> int[]]
main.12 [	const %12 = 1 : int]
main.13 [	add %13 = %2, %12 : int]
main.14 [	assign %2 = %13  : int]
main.15 [.blklab5]
main.16 [.blklab4]
main.17 [	invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])]
main.18 [	assign %3 = %14  : int[]]
main.19 [	assert]
main.20 [	assign %4 = %3  : int[]]
main.21 [	assert]
main.22 [	return]
root->reverse
root->main
reverse.0 [	lengthof %5 = %0 : int[]]
reverse.1 [	assign %2 = %5  : int]
reverse.2 [	const %6 = 0 : int]
reverse.3 [	lengthof %7 = %0 : int[]]
reverse.4 [	arraygen %8 = [6; 7] : int[]]
reverse.5 [	assign %3 = %8  : int[]]
reverse.6 [	loop (%2, %3, %4, %9, %10, %11, %12, %13, %14, %15, %16, %17)]
reverse.7 [	invariant]
reverse.8 [	const %12 = 0 : int]
reverse.9 [	ifle %2, %12 goto blklab0 : int]
reverse.10 [	lengthof %13 = %0 : int[]]
reverse.11 [	sub %14 = %13, %2 : int]
reverse.12 [	indexof %15 = %0, %14 : int[]]
reverse.13 [	assign %4 = %15  : int]
reverse.14 [	const %16 = 1 : int]
reverse.15 [	sub %17 = %2, %16 : int]
reverse.16 [	assign %2 = %17  : int]
reverse.17 [	update %3[%2] = %4 : int[] -> int[]]
reverse.18 [.blklab1]
reverse.19 [.blklab0]
reverse.20 [	return %3]
reverse.21 [	return]
main.0 [	const %5 = 0 : int]
main.1 [	const %6 = 10 : int]
main.2 [	arraygen %7 = [5; 6] : int[]]
main.3 [	assign %1 = %7  : int[]]
main.4 [	const %8 = 0 : int]
main.5 [	assign %2 = %8  : int]
main.6 [	loop (%1, %2, %9, %10, %11, %12, %13)]
main.7 [	const %9 = 10 : int]
main.8 [	ifge %2, %9 goto blklab4 : int]
main.9 [	const %10 = 10 : int]
main.10 [	sub %11 = %10, %2 : int]
main.11 [	update %1[%2] = %11 : int[] -> int[]]
main.12 [	const %12 = 1 : int]
main.13 [	add %13 = %2, %12 : int]
main.14 [	assign %2 = %13  : int]
main.15 [.blklab5]
main.16 [.blklab4]
main.17 [	invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])]
main.18 [	assign %3 = %14  : int[]]
main.19 [	assert]
main.20 [	assign %4 = %3  : int[]]
main.21 [	assert]
main.22 [	return]
reverse.0 [	lengthof %5 = %0 : int[]]
reverse.1 [	assign %2 = %5  : int]
reverse.2 [	const %6 = 0 : int]
reverse.3 [	lengthof %7 = %0 : int[]]
reverse.4 [	arraygen %8 = [6; 7] : int[]]
reverse.5 [	assign %3 = %8  : int[]]
reverse.6 [	loop (%2, %3, %4, %9, %10, %11, %12, %13, %14, %15, %16, %17)]
reverse.7 [	invariant]
reverse.8 [	const %12 = 0 : int]
reverse.9 [	ifle %2, %12 goto blklab0 : int]
reverse.10 [	lengthof %13 = %0 : int[]]
reverse.11 [	sub %14 = %13, %2 : int]
reverse.12 [	indexof %15 = %0, %14 : int[]]
reverse.13 [	assign %4 = %15  : int]
reverse.14 [	const %16 = 1 : int]
reverse.15 [	sub %17 = %2, %16 : int]
reverse.16 [	assign %2 = %17  : int]
reverse.17 [	update %3[%2] = %4 : int[] -> int[]]
reverse.18 [.blklab1]
reverse.19 [.blklab0]
reverse.20 [	return %3]
reverse.21 [	return]
main.0 [	const %5 = 0 : int]
main.1 [	const %6 = 10 : int]
main.2 [	arraygen %7 = [5; 6] : int[]]
main.3 [	assign %1 = %7  : int[]]
main.4 [	const %8 = 0 : int]
main.5 [	assign %2 = %8  : int]
main.6 [	loop (%1, %2, %9, %10, %11, %12, %13)]
main.7 [	const %9 = 10 : int]
main.8 [	ifge %2, %9 goto blklab4 : int]
main.9 [	const %10 = 10 : int]
main.10 [	sub %11 = %10, %2 : int]
main.11 [	update %1[%2] = %11 : int[] -> int[]]
main.12 [	const %12 = 1 : int]
main.13 [	add %13 = %2, %12 : int]
main.14 [	assign %2 = %13  : int]
main.15 [.blklab5]
main.16 [.blklab4]
main.17 [	invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])]
main.18 [	assign %3 = %14  : int[]]
main.19 [	assert]
main.20 [	assign %4 = %3  : int[]]
main.21 [	assert]
main.22 [	return]
###### Live analysis for reverse function. ######
Iteration 1
In:{[]}
blklab1 [BLOCK] 
Out:{[]}

In:{[3]}
blklab0 [LOOP_EXIT] 
Out:{[3]}

In:{[0, 2, 3]}
blklab0 [LOOP_BODY] 
-------------------------------
l.0:const %12 = 0 : int
l.1:ifle %2, %12 goto blklab0 : int
l.2:lengthof %13 = %0 : int[]
l.3:sub %14 = %13, %2 : int
l.4:indexof %15 = %0, %14 : int[]
l.5:assign %4 = %15  : int
l.6:const %16 = 1 : int
l.7:sub %17 = %2, %16 : int
l.8:assign %2 = %17  : int
l.9:update %3[%2] = %4 : int[] -> int[]
-------------------------------
Out:{[]}

In:{[0, 2, 3]}
blklab0 [LOOP_HEADER] 
Out:{[0, 2, 3]}

In:{[0]}
code [BLOCK] 
-------------------------------
l.0:lengthof %5 = %0 : int[]
l.1:assign %2 = %5  : int
l.2:const %6 = 0 : int
l.3:lengthof %7 = %0 : int[]
l.4:arraygen %8 = [6; 7] : int[]
l.5:assign %3 = %8  : int[]
-------------------------------
Out:{[0, 2, 3]}

In:{[0]}
entry [ENTRY] 
Out:{[0]}

###### Live analysis for reverse function. ######
Iteration 2
In:{[0, 2, 3]}
blklab1 [BLOCK] 
Out:{[0, 2, 3]}

In:{[3]}
blklab0 [LOOP_EXIT] 
Out:{[3]}

In:{[0, 2, 3]}
blklab0 [LOOP_BODY] 
-------------------------------
l.0:const %12 = 0 : int
l.1:ifle %2, %12 goto blklab0 : int
l.2:lengthof %13 = %0 : int[]
l.3:sub %14 = %13, %2 : int
l.4:indexof %15 = %0, %14 : int[]
l.5:assign %4 = %15  : int
l.6:const %16 = 1 : int
l.7:sub %17 = %2, %16 : int
l.8:assign %2 = %17  : int
l.9:update %3[%2] = %4 : int[] -> int[]
-------------------------------
Out:{[0, 2, 3]}

In:{[0, 2, 3]}
blklab0 [LOOP_HEADER] 
Out:{[0, 2, 3]}

In:{[0]}
code [BLOCK] 
-------------------------------
l.0:lengthof %5 = %0 : int[]
l.1:assign %2 = %5  : int
l.2:const %6 = 0 : int
l.3:lengthof %7 = %0 : int[]
l.4:arraygen %8 = [6; 7] : int[]
l.5:assign %3 = %8  : int[]
-------------------------------
Out:{[0, 2, 3]}

In:{[0]}
entry [ENTRY] 
Out:{[0]}

###### Live analysis for reverse function. ######
Iteration 3
In:{[0, 2, 3]}
blklab1 [BLOCK] 
Out:{[0, 2, 3]}

In:{[3]}
blklab0 [LOOP_EXIT] 
Out:{[3]}

In:{[0, 2, 3]}
blklab0 [LOOP_BODY] 
-------------------------------
l.0:const %12 = 0 : int
l.1:ifle %2, %12 goto blklab0 : int
l.2:lengthof %13 = %0 : int[]
l.3:sub %14 = %13, %2 : int
l.4:indexof %15 = %0, %14 : int[]
l.5:assign %4 = %15  : int
l.6:const %16 = 1 : int
l.7:sub %17 = %2, %16 : int
l.8:assign %2 = %17  : int
l.9:update %3[%2] = %4 : int[] -> int[]
-------------------------------
Out:{[0, 2, 3]}

In:{[0, 2, 3]}
blklab0 [LOOP_HEADER] 
Out:{[0, 2, 3]}

In:{[0]}
code [BLOCK] 
-------------------------------
l.0:lengthof %5 = %0 : int[]
l.1:assign %2 = %5  : int
l.2:const %6 = 0 : int
l.3:lengthof %7 = %0 : int[]
l.4:arraygen %8 = [6; 7] : int[]
l.5:assign %3 = %8  : int[]
-------------------------------
Out:{[0, 2, 3]}

In:{[0]}
entry [ENTRY] 
Out:{[0]}

###### Live variables for reverse function. ######
In:{ls}
entry [ENTRY] 
Out:{ls}

In:{ls}
code [BLOCK] 
-------------------------------
l.0:lengthof %5 = %0 : int[]
l.1:assign %2 = %5  : int
l.2:const %6 = 0 : int
l.3:lengthof %7 = %0 : int[]
l.4:arraygen %8 = [6; 7] : int[]
l.5:assign %3 = %8  : int[]
-------------------------------
Out:{ls, i, r}

In:{ls, i, r}
blklab0 [LOOP_HEADER] 
Out:{ls, i, r}

In:{ls, i, r}
blklab0 [LOOP_BODY] 
-------------------------------
l.0:const %12 = 0 : int
l.1:ifle %2, %12 goto blklab0 : int
l.2:lengthof %13 = %0 : int[]
l.3:sub %14 = %13, %2 : int
l.4:indexof %15 = %0, %14 : int[]
l.5:assign %4 = %15  : int
l.6:const %16 = 1 : int
l.7:sub %17 = %2, %16 : int
l.8:assign %2 = %17  : int
l.9:update %3[%2] = %4 : int[] -> int[]
-------------------------------
Out:{ls, i, r}

In:{r}
blklab0 [LOOP_EXIT] 
Out:{r}

In:{ls, i, r}
blklab1 [BLOCK] 
Out:{ls, i, r}

In:{r}
return_3 [RETURN] 
-------------------------------
l.0:return %3
-------------------------------
Out:{r}

In:{}
exit [EXIT] 
Out:{}

###### Live analysis for main function. ######
Iteration 1
In:{[14]}
reverse18 [BLOCK] 
-------------------------------
l.0:assign %3 = %14  : int[]
l.1:assign %4 = %3  : int[]
-------------------------------
Out:{[]}

In:{[1]}
reverse18 [INVOKE] 
-------------------------------
l.0:invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])
-------------------------------
Out:{[14]}

In:{[]}
blklab5 [BLOCK] 
Out:{[]}

In:{[1]}
blklab4 [LOOP_EXIT] 
Out:{[1]}

In:{[1, 2]}
blklab4 [LOOP_BODY] 
-------------------------------
l.0:const %9 = 10 : int
l.1:ifge %2, %9 goto blklab4 : int
l.2:const %10 = 10 : int
l.3:sub %11 = %10, %2 : int
l.4:update %1[%2] = %11 : int[] -> int[]
l.5:const %12 = 1 : int
l.6:add %13 = %2, %12 : int
l.7:assign %2 = %13  : int
-------------------------------
Out:{[]}

In:{[1, 2]}
blklab4 [LOOP_HEADER] 
Out:{[1, 2]}

In:{[]}
code [BLOCK] 
-------------------------------
l.0:const %5 = 0 : int
l.1:const %6 = 10 : int
l.2:arraygen %7 = [5; 6] : int[]
l.3:assign %1 = %7  : int[]
l.4:const %8 = 0 : int
l.5:assign %2 = %8  : int
-------------------------------
Out:{[1, 2]}

In:{[]}
entry [ENTRY] 
Out:{[]}

###### Live analysis for main function. ######
Iteration 2
In:{[14]}
reverse18 [BLOCK] 
-------------------------------
l.0:assign %3 = %14  : int[]
l.1:assign %4 = %3  : int[]
-------------------------------
Out:{[]}

In:{[1]}
reverse18 [INVOKE] 
-------------------------------
l.0:invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])
-------------------------------
Out:{[14]}

In:{[1, 2]}
blklab5 [BLOCK] 
Out:{[1, 2]}

In:{[1]}
blklab4 [LOOP_EXIT] 
Out:{[1]}

In:{[1, 2]}
blklab4 [LOOP_BODY] 
-------------------------------
l.0:const %9 = 10 : int
l.1:ifge %2, %9 goto blklab4 : int
l.2:const %10 = 10 : int
l.3:sub %11 = %10, %2 : int
l.4:update %1[%2] = %11 : int[] -> int[]
l.5:const %12 = 1 : int
l.6:add %13 = %2, %12 : int
l.7:assign %2 = %13  : int
-------------------------------
Out:{[1, 2]}

In:{[1, 2]}
blklab4 [LOOP_HEADER] 
Out:{[1, 2]}

In:{[]}
code [BLOCK] 
-------------------------------
l.0:const %5 = 0 : int
l.1:const %6 = 10 : int
l.2:arraygen %7 = [5; 6] : int[]
l.3:assign %1 = %7  : int[]
l.4:const %8 = 0 : int
l.5:assign %2 = %8  : int
-------------------------------
Out:{[1, 2]}

In:{[]}
entry [ENTRY] 
Out:{[]}

###### Live analysis for main function. ######
Iteration 3
In:{[14]}
reverse18 [BLOCK] 
-------------------------------
l.0:assign %3 = %14  : int[]
l.1:assign %4 = %3  : int[]
-------------------------------
Out:{[]}

In:{[1]}
reverse18 [INVOKE] 
-------------------------------
l.0:invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])
-------------------------------
Out:{[14]}

In:{[1, 2]}
blklab5 [BLOCK] 
Out:{[1, 2]}

In:{[1]}
blklab4 [LOOP_EXIT] 
Out:{[1]}

In:{[1, 2]}
blklab4 [LOOP_BODY] 
-------------------------------
l.0:const %9 = 10 : int
l.1:ifge %2, %9 goto blklab4 : int
l.2:const %10 = 10 : int
l.3:sub %11 = %10, %2 : int
l.4:update %1[%2] = %11 : int[] -> int[]
l.5:const %12 = 1 : int
l.6:add %13 = %2, %12 : int
l.7:assign %2 = %13  : int
-------------------------------
Out:{[1, 2]}

In:{[1, 2]}
blklab4 [LOOP_HEADER] 
Out:{[1, 2]}

In:{[]}
code [BLOCK] 
-------------------------------
l.0:const %5 = 0 : int
l.1:const %6 = 10 : int
l.2:arraygen %7 = [5; 6] : int[]
l.3:assign %1 = %7  : int[]
l.4:const %8 = 0 : int
l.5:assign %2 = %8  : int
-------------------------------
Out:{[1, 2]}

In:{[]}
entry [ENTRY] 
Out:{[]}

###### Live variables for main function. ######
In:{}
entry [ENTRY] 
Out:{}

In:{}
code [BLOCK] 
-------------------------------
l.0:const %5 = 0 : int
l.1:const %6 = 10 : int
l.2:arraygen %7 = [5; 6] : int[]
l.3:assign %1 = %7  : int[]
l.4:const %8 = 0 : int
l.5:assign %2 = %8  : int
-------------------------------
Out:{input, index}

In:{input, index}
blklab4 [LOOP_HEADER] 
Out:{input, index}

In:{input, index}
blklab4 [LOOP_BODY] 
-------------------------------
l.0:const %9 = 10 : int
l.1:ifge %2, %9 goto blklab4 : int
l.2:const %10 = 10 : int
l.3:sub %11 = %10, %2 : int
l.4:update %1[%2] = %11 : int[] -> int[]
l.5:const %12 = 1 : int
l.6:add %13 = %2, %12 : int
l.7:assign %2 = %13  : int
-------------------------------
Out:{input, index}

In:{input}
blklab4 [LOOP_EXIT] 
Out:{input}

In:{input, index}
blklab5 [BLOCK] 
Out:{input, index}

In:{input}
reverse18 [INVOKE] 
-------------------------------
l.0:invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])
-------------------------------
Out:{_14}

In:{_14}
reverse18 [BLOCK] 
-------------------------------
l.0:assign %3 = %14  : int[]
l.1:assign %4 = %3  : int[]
-------------------------------
Out:{}

In:{}
exit [EXIT] 
Out:{}

reverse.0 [	lengthof %5 = %0 : int[]]
reverse.1 [	assign %2 = %5  : int]
reverse.2 [	const %6 = 0 : int]
reverse.3 [	lengthof %7 = %0 : int[]]
reverse.4 [	arraygen %8 = [6; 7] : int[]]
reverse.5 [	assign %3 = %8  : int[]]
reverse.6 [	loop (%2, %3, %4, %9, %10, %11, %12, %13, %14, %15, %16, %17)]
reverse.7 [	invariant]
reverse.8 [	const %12 = 0 : int]
reverse.9 [	ifle %2, %12 goto blklab0 : int]
reverse.10 [	lengthof %13 = %0 : int[]]
reverse.11 [	sub %14 = %13, %2 : int]
reverse.12 [	indexof %15 = %0, %14 : int[]]
reverse.13 [	assign %4 = %15  : int]
reverse.14 [	const %16 = 1 : int]
reverse.15 [	sub %17 = %2, %16 : int]
reverse.16 [	assign %2 = %17  : int]
reverse.17 [	update %3[%2] = %4 : int[] -> int[]]
reverse.18 [.blklab1]
reverse.19 [.blklab0]
reverse.20 [	return %3]
reverse.21 [	return]
main.0 [	const %5 = 0 : int]
main.1 [	const %6 = 10 : int]
main.2 [	arraygen %7 = [5; 6] : int[]]
main.3 [	assign %1 = %7  : int[]]
main.4 [	const %8 = 0 : int]
main.5 [	assign %2 = %8  : int]
main.6 [	loop (%1, %2, %9, %10, %11, %12, %13)]
main.7 [	const %9 = 10 : int]
main.8 [	ifge %2, %9 goto blklab4 : int]
main.9 [	const %10 = 10 : int]
main.10 [	sub %11 = %10, %2 : int]
main.11 [	update %1[%2] = %11 : int[] -> int[]]
main.12 [	const %12 = 1 : int]
main.13 [	add %13 = %2, %12 : int]
main.14 [	assign %2 = %13  : int]
main.15 [.blklab5]
main.16 [.blklab4]
main.17 [	invoke (%14) = (%1) reverse:reverse : function(int[])->(int[])]
main.18 [	assign %3 = %14  : int[]]
main.19 [	assert]
main.20 [	assign %4 = %3  : int[]]
main.21 [	assert]
main.22 [	return]

Copy elimination analysis completed. File: reverse.wyil
