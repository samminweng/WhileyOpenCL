root->func
root->main
func.0 [const %3 = 0 : int]
func.1 [assign %2 = %3  : int]
func.2 [loop (%0, %2, %4, %5, %6, %7)]
func.3 [.blklab0]
func.4 [return %0]
func.5 [return]
//End of func function
[func.1 i = _3] //assign %2 = %3  : int
	 liveness: _3 = false
main.0 [const %4 = 2 : int]
main.1 [const %5 = 2 : int]
main.2 [arraygen %6 = [4; 5] : int[]]
main.3 [assign %1 = %6  : int[]]
main.4 [const %7 = 2 : int]
main.5 [const %8 = 2 : int]
main.6 [arraygen %9 = [7; 8] : int[]]
main.7 [assign %2 = %9  : int[]]
main.8 [const %10 = 2 : int]
main.9 [const %11 = 2 : int]
main.10 [arraygen %12 = [10; 11] : int[]]
main.11 [assign %3 = %12  : int[]]
main.12 [invoke (%13) = (%2) testcase6:func : function(int[])->(int[])]
main.13 [assign %1 = %13  : int[]]
main.14 [fieldload %14 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.15 [fieldload %15 = %14 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.16 [const %16 = 0 : int]
main.17 [indexof %17 = %1, %16 : int[]]
main.18 [indirectinvoke () = %15 (%17) : method(any)->()]
main.19 [fieldload %18 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.20 [fieldload %19 = %18 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.21 [const %20 = 0 : int]
main.22 [indexof %21 = %2, %20 : int[]]
main.23 [indirectinvoke () = %19 (%21) : method(any)->()]
main.24 [fieldload %22 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.25 [fieldload %23 = %22 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.26 [const %24 = 0 : int]
main.27 [indexof %25 = %3, %24 : int[]]
main.28 [indirectinvoke () = %23 (%25) : method(any)->()]
main.29 [return]
//End of main function
[main.3 a = _6] //assign %1 = %6  : int[]
	 liveness: _6 = false
[main.7 b = _9] //assign %2 = %9  : int[]
	 liveness: _9 = false
[main.11 c = _12] //assign %3 = %12  : int[]
	 liveness: _12 = false
[main.12 _13 = func(b)] //invoke (%13) = (%2) testcase6:func : function(int[])->(int[])
	 liveness: b = true	 readonly: b = false	 return: b = ALWAYS_RETURN
[main.13 a = _13] //assign %1 = %13  : int[]
	 liveness: _13 = false

Copy elimination analysis completed. File: testcase6.wyil
