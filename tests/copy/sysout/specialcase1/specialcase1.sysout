// Read-write variables in func:[11, 12, 4, 13, 14, 5, 15, 16, 6, 17, 18, 19, 20, 9, 10]
// Return variables in func:[10]
// Live variables for func function
// In Set: [[1, 0, 2], [1, 0, 2], [1, 0, 18, 20, 2], [1, 0, 18, 20], [2, 18, 20], [1], [10], [10], [], [9], [10], []]
// Out Set:[[1, 0, 2], [1, 0, 18, 20, 2], [1, 0, 18, 20, 2], [1], [9], [10], [10], [10], [], [10], [10], []]
func.0 [const %11 = 0 : int]
func.1 [indexof %12 = %0, %11 : int[]]
func.2 [assign %4 = %12  : int]
func.3 [const %13 = 0 : int]
func.4 [indexof %14 = %1, %13 : int[]]
func.5 [assign %5 = %14  : int]
func.6 [const %15 = 0 : int]
func.7 [indexof %16 = %2, %15 : int[]]
func.8 [assign %6 = %16  : int]
func.9 [const %17 = 0 : int]
func.10 [indexof %18 = %0, %17 : int[]]
func.11 [const %19 = 0 : int]
func.12 [indexof %20 = %1, %19 : int[]]
func.13 [ifne %18, %20 goto blklab0 : int]
func.14 [assign %9 = %0  : int[]]
func.15 [assign %10 = %1  : int[]]
func.16 [return %10]
func.17 [goto blklab1]
func.18 [.blklab0]
func.19 [assign %9 = %2  : int[]]
func.20 [assign %10 = %9  : int[]]
func.21 [return %10]
func.22 [.blklab1]
func.23 [return]
//End of func function
[func.2 ra = _12] //assign %4 = %12  : int
	 liveness: _12 = false
[func.5 rb = _14] //assign %5 = %14  : int
	 liveness: _14 = false
[func.8 rc = _16] //assign %6 = %16  : int
	 liveness: _16 = false
[func.14 y = a] //assign %9 = %0  : int[]
	 liveness: a = false
[func.15 x = b] //assign %10 = %1  : int[]
	 liveness: b = false
[func.19 y = c] //assign %9 = %2  : int[]
	 liveness: c = false
[func.20 x = y] //assign %10 = %9  : int[]
	 liveness: y = false
	 liveness: _12 = false
	 liveness: _14 = false
	 liveness: _16 = false
	 liveness: a = false
	 liveness: b = false
	 liveness: c = false
	 liveness: y = false
// Read-write variables in main:[5, 6, 7, 1, 8, 9, 10, 2, 11, 12, 13, 3, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
// Return variables in main:[]
// Live variables for main function
// In Set: [[0], [0], [0, 1], [0, 2, 1], [3, 0, 2, 1], [3, 0, 2, 1], [3, 0, 2, 1, 14], [3, 0, 2, 1], []]
// Out Set:[[0], [0, 1], [0, 2, 1], [3, 0, 2, 1], [3, 0, 2, 1], [3, 0, 2, 1, 14], [3, 0, 2, 1], [], []]
main.0 [const %5 = 2 : int]
main.1 [const %6 = 2 : int]
main.2 [arraygen %7 = [5; 6] : int[]]
main.3 [assign %1 = %7  : int[]]
main.4 [const %8 = 2 : int]
main.5 [const %9 = 2 : int]
main.6 [arraygen %10 = [8; 9] : int[]]
main.7 [assign %2 = %10  : int[]]
main.8 [const %11 = 2 : int]
main.9 [const %12 = 2 : int]
main.10 [arraygen %13 = [11; 12] : int[]]
main.11 [assign %3 = %13  : int[]]
main.12 [invoke (%14) = (%1, %2, %3) specialcase1:func : function(int[],int[],int[])->(int[])]
main.13 [assign %4 = %14  : int[]]
main.14 [fieldload %15 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.15 [fieldload %16 = %15 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.16 [const %17 = 0 : int]
main.17 [indexof %18 = %1, %17 : int[]]
main.18 [indirectinvoke () = %16 (%18) : method(any)->()]
main.19 [fieldload %19 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.20 [fieldload %20 = %19 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.21 [const %21 = 0 : int]
main.22 [indexof %22 = %2, %21 : int[]]
main.23 [indirectinvoke () = %20 (%22) : method(any)->()]
main.24 [fieldload %23 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.25 [fieldload %24 = %23 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.26 [const %25 = 0 : int]
main.27 [indexof %26 = %3, %25 : int[]]
main.28 [indirectinvoke () = %24 (%26) : method(any)->()]
main.29 [return]
//End of main function
[main.3 a = _7] //assign %1 = %7  : int[]
	 liveness: _7 = false
[main.7 b = _10] //assign %2 = %10  : int[]
	 liveness: _10 = false
[main.11 c = _13] //assign %3 = %13  : int[]
	 liveness: _13 = false
[main.12 _14 = func(a, b, c)] //invoke (%14) = (%1, %2, %3) specialcase1:func : function(int[],int[],int[])->(int[])
	 liveness: a = true	 readonly: a = false	 return: a = MAYBE_RETURN
	 liveness: b = true	 readonly: b = false	 return: b = MAYBE_RETURN
	 liveness: c = true	 readonly: c = false	 return: c = MAYBE_RETURN
[main.13 r = _14] //assign %4 = %14  : int[]
	 liveness: _14 = false
	 liveness: _7 = false
	 liveness: _10 = false
	 liveness: _13 = false
	 liveness: a = true	 readonly: a = false	 return: a = MAYBE_RETURN
	 liveness: b = true	 readonly: b = false	 return: b = MAYBE_RETURN
	 liveness: c = true	 readonly: c = false	 return: c = MAYBE_RETURN
	 liveness: _14 = false

Copy elimination analysis completed. File: specialcase1.wyil
Code Generation completed. File: specialcase1.c, specialcase1.h
