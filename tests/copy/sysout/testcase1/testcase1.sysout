func.0 [const %7 = 0 : int]
func.1 [indexof %8 = %0, %7 : int[]]
func.2 [assign %4 = %8  : int]
func.3 [const %9 = 0 : int]
func.4 [indexof %10 = %1, %9 : int[]]
func.5 [assign %5 = %10  : int]
func.6 [const %11 = 0 : int]
func.7 [indexof %12 = %2, %11 : int[]]
func.8 [assign %6 = %12  : int]
func.9 [return %0]
func.10 [return]
//End of func function
[func.2 ra = _8] //assign %4 = %8  : int
	 liveness: _8 = false
[func.5 rb = _10] //assign %5 = %10  : int
	 liveness: _10 = false
[func.8 rc = _12] //assign %6 = %12  : int
	 liveness: _12 = false
// Read-write variables in func: [_7, _8, ra, _9, _10, rb, _11, _12, rc]
// Return variables in func: [a]
// Live variables for func function
// In Set:[[a, c, b], [a, c, b], [a], []]
// Out Set:[[a, c, b], [a], [a], []]
	 liveness: _8 = false
	 liveness: _10 = false
	 liveness: _12 = false
main.0 [const %5 = 2 : int]
main.1 [const %6 = 2 : int]
main.2 [arraygen %7 = [5; 6] : int[]]
main.3 [assign %1 = %7  : int[]]
main.4 [const %8 = 2 : int]
main.5 [const %9 = 2 : int]
main.6 [arraygen %10 = [8; 9] : int[]]
main.7 [assign %2 = %10  : int[]]
main.8 [const %11 = 2 : int]
main.9 [const %12 = 2 : int]
main.10 [arraygen %13 = [11; 12] : int[]]
main.11 [assign %3 = %13  : int[]]
main.12 [invoke (%14) = (%1, %2, %3) testcase1:func : function(int[],int[],int[])->(int[])]
main.13 [assign %4 = %14  : int[]]
main.14 [fieldload %15 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.15 [fieldload %16 = %15 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.16 [const %17 = 0 : int]
main.17 [indexof %18 = %1, %17 : int[]]
main.18 [indirectinvoke () = %16 (%18) : method(any)->()]
main.19 [fieldload %19 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.20 [fieldload %20 = %19 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.21 [const %21 = 0 : int]
main.22 [indexof %22 = %2, %21 : int[]]
main.23 [indirectinvoke () = %20 (%22) : method(any)->()]
main.24 [fieldload %23 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.25 [fieldload %24 = %23 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.26 [const %25 = 0 : int]
main.27 [indexof %26 = %3, %25 : int[]]
main.28 [indirectinvoke () = %24 (%26) : method(any)->()]
main.29 [return]
//End of main function
[main.3 a = _7] //assign %1 = %7  : int[]
	 liveness: _7 = false
[main.7 b = _10] //assign %2 = %10  : int[]
	 liveness: _10 = false
[main.11 c = _13] //assign %3 = %13  : int[]
	 liveness: _13 = false
[main.12 _14 = func(a, b, c)] //invoke (%14) = (%1, %2, %3) testcase1:func : function(int[],int[],int[])->(int[])
	 liveness: a = true	 readonly: a = true	 return: a = ALWAYS_RETURN
	 liveness: b = true	 readonly: b = true	 return: b = NEVER_RETURN
	 liveness: c = true	 readonly: c = true	 return: c = NEVER_RETURN
[main.13 r = _14] //assign %4 = %14  : int[]
	 liveness: _14 = false
// Read-write variables in main: [_5, _6, _7, a, _8, _9, _10, b, _11, _12, _13, c, _14, r, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26]
// Return variables in main: []
// Live variables for main function
// In Set:[[console], [console], [console, a], [console, b, a], [c, console, b, a], [c, console, b, a], [c, console, b, a, _14], [c, console, b, a], []]
// Out Set:[[console], [console, a], [console, b, a], [c, console, b, a], [c, console, b, a], [c, console, b, a, _14], [c, console, b, a], [], []]
	 liveness: _7 = false
	 liveness: _10 = false
	 liveness: _13 = false
	 liveness: a = true	 readonly: a = true	 return: a = ALWAYS_RETURN
	 liveness: b = true	 readonly: b = true	 return: b = NEVER_RETURN
	 liveness: c = true	 readonly: c = true	 return: c = NEVER_RETURN
	 liveness: _14 = false

Copy elimination analysis completed. File: testcase1.wyil
Deallocation analysis completed.
File: testcase1.wyil
Code Generation completed. File: testcase1.c, testcase1.h
