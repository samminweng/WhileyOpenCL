func.0 [assign %4 = %0  : int[]]
func.1 [assign %4 = %1  : int[]]
func.2 [assign %4 = %2  : int[]]
func.3 [return %4]
func.4 [return]
//End of func function
[func.0 x = a] //assign %4 = %0  : int[]
	 liveness: a = false
[func.1 x = b] //assign %4 = %1  : int[]
	 liveness: b = false
[func.2 x = c] //assign %4 = %2  : int[]
	 liveness: c = false
// Read-write variables in func: [x, a, b, c]
// Return variables in func: [x,a,b,c]
// Live variables for func function
// In Set:[[c, b, a], [c, b, a], [c, b], [c], [x], [x], []]
// Out Set:[[c, b, a], [c, b], [c], [x], [x], [x], []]
	 liveness: a = false
	 liveness: b = false
	 liveness: c = false
main.0 [const %5 = 1 : int]
main.1 [const %6 = 2 : int]
main.2 [arraygen %7 = [5; 6] : int[]]
main.3 [assign %1 = %7  : int[]]
main.4 [const %8 = 2 : int]
main.5 [const %9 = 2 : int]
main.6 [arraygen %10 = [8; 9] : int[]]
main.7 [assign %2 = %10  : int[]]
main.8 [const %11 = 3 : int]
main.9 [const %12 = 2 : int]
main.10 [arraygen %13 = [11; 12] : int[]]
main.11 [assign %3 = %13  : int[]]
main.12 [invoke (%14) = (%1, %2, %3) specialcase4:func : function(int[],int[],int[])->(int[])]
main.13 [assign %4 = %14  : int[]]
main.14 [assert]
main.15 [assert]
main.16 [assert]
main.17 [assert]
main.18 [return]
//End of main function
[main.3 a = _7] //assign %1 = %7  : int[]
	 liveness: _7 = false
[main.7 b = _10] //assign %2 = %10  : int[]
	 liveness: _10 = false
[main.11 c = _13] //assign %3 = %13  : int[]
	 liveness: _13 = false
[main.12 _14 = func(a, b, c)] //invoke (%14) = (%1, %2, %3) specialcase4:func : function(int[],int[],int[])->(int[])
	 liveness: a = true	 readonly: a = false	 return: a = MAYBE_RETURN
	 liveness: b = true	 readonly: b = false	 return: b = MAYBE_RETURN
	 liveness: c = true	 readonly: c = false	 return: c = MAYBE_RETURN
[main.13 r = _14] //assign %4 = %14  : int[]
	 liveness: _14 = false
// Read-write variables in main: [_5, _6, _7, a, _8, _9, _10, b, _11, _12, _13, c, _14, r, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26]
// Return variables in main: []
// Live variables for main function
// In Set:[[], [], [a], [b, a], [c, b, a], [c, b, a], [c, b, a, _14], [r, c, b, a], []]
// Out Set:[[], [a], [b, a], [c, b, a], [c, b, a], [c, b, a, _14], [r, c, b, a], [], []]
	 liveness: _7 = false
	 liveness: _10 = false
	 liveness: _13 = false
	 liveness: a = true	 readonly: a = false	 return: a = MAYBE_RETURN
	 liveness: b = true	 readonly: b = false	 return: b = MAYBE_RETURN
	 liveness: c = true	 readonly: c = false	 return: c = MAYBE_RETURN
	 liveness: _14 = false

Copy elimination analysis completed. File: specialcase4.wyil
Deallocation analysis completed.
File: specialcase4.wyil
Code Generation completed. File: specialcase4.c, specialcase4.h
