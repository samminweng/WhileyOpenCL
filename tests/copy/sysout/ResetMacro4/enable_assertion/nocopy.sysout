root->add
root->main
###### Live variables for add function. ######
In:{a, b}
entry [ENTRY] 
Out:{a, b}

In:{a, b}
code [BLOCK] 
-------------------------------
l.0:lengthof %8 = %0 : int[]
l.1:assign %3 = %8  : int
l.2:const %9 = 0 : int
l.3:arraygen %10 = [9; 3] : int[]
l.4:assign %4 = %10  : int[]
l.5:const %11 = 0 : int
l.6:assign %5 = %11  : int
-------------------------------
Out:{a, b, length, i}

In:{a, b, length, i}
blklab0 [LOOP_HEADER] 
Out:{a, b, length, i}

In:{a, b, length, i}
blklab0 [LOOP_BODY] 
-------------------------------
l.0:ifge %5, %3 goto blklab0 : int
l.1:indexof %12 = %0, %5 : int[]
l.2:assign %6 = %12  : int
l.3:indexof %13 = %1, %5 : int[]
l.4:assign %7 = %13  : int
l.5:add %14 = %6, %7 : int
-------------------------------
Out:{a, b, length, i}

In:{a}
blklab0 [LOOP_EXIT] 
Out:{a}

In:{a, b, length, i}
Update15 [UPDATE] 
-------------------------------
l.0:update %0[%5] = %14 : int[] -> int[]
-------------------------------
Out:{a, b, length, i}

In:{a, b, length, i}
Update15 [BLOCK] 
-------------------------------
l.0:const %15 = 0 : int
-------------------------------
Out:{a, b, length, i}

In:{a, b, length, i}
Update17 [UPDATE] 
-------------------------------
l.0:update %1[%5] = %15 : int[] -> int[]
-------------------------------
Out:{a, b, length, i}

In:{a, b, length, i}
Update17 [BLOCK] 
-------------------------------
l.0:const %16 = 1 : int
l.1:add %17 = %5, %16 : int
l.2:assign %5 = %17  : int
-------------------------------
Out:{a, b, length, i}

In:{a, b, length, i}
blklab1 [BLOCK] 
Out:{a, b, length, i}

In:{a}
return_0 [RETURN] 
-------------------------------
l.0:return %0
-------------------------------
Out:{a}

In:{}
exit [EXIT] 
Out:{}

###### Live variables for main function. ######
In:{sys}
entry [ENTRY] 
Out:{sys}

In:{sys}
code [BLOCK] 
-------------------------------
l.0:const %4 = 0 : int
l.1:const %5 = 10 : int
l.2:arraygen %6 = [4; 5] : int[]
l.3:assign %1 = %6  : int[]
l.4:const %7 = 0 : int
l.5:assign %2 = %7  : int
-------------------------------
Out:{sys, a, i}

In:{sys, a, i}
blklab2 [LOOP_HEADER] 
Out:{sys, a, i}

In:{sys, a, i}
blklab2 [LOOP_BODY] 
-------------------------------
l.0:const %8 = 10 : int
l.1:ifge %2, %8 goto blklab2 : int
-------------------------------
Out:{sys, a, i}

In:{sys, a}
blklab2 [LOOP_EXIT] 
Out:{sys, a}

In:{sys, a, i}
Update10 [UPDATE] 
-------------------------------
l.0:update %1[%2] = %2 : int[] -> int[]
-------------------------------
Out:{sys, a, i}

In:{sys, a, i}
Update10 [BLOCK] 
-------------------------------
l.0:const %9 = 1 : int
l.1:add %10 = %2, %9 : int
l.2:assign %2 = %10  : int
-------------------------------
Out:{sys, a, i}

In:{sys, a, i}
blklab3 [BLOCK] 
Out:{sys, a, i}

In:{sys, a}
add16 [INVOKE] 
-------------------------------
l.0:invoke (%11) = (%1, %1) ResetMacro4:add : function(int[],int[])->(int[])
-------------------------------
Out:{sys, _11}

In:{sys, _11}
add16 [BLOCK] 
-------------------------------
l.0:assign %3 = %11  : int[]
l.1:const %12 = 0 : int
l.2:assign %2 = %12  : int
-------------------------------
Out:{sys, i, sum}

In:{sys, i, sum}
blklab4 [LOOP_HEADER] 
Out:{sys, i, sum}

In:{sys, i, sum}
blklab4 [LOOP_BODY] 
-------------------------------
l.0:const %13 = 10 : int
l.1:ifge %2, %13 goto blklab4 : int
l.2:fieldload %14 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}
l.3:fieldload %15 = %14 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}
l.4:indexof %16 = %3, %2 : int[]
l.5:indirectinvoke () = %15 (%16) : method(any)->()
l.6:assert
l.7:const %20 = 1 : int
l.8:add %21 = %2, %20 : int
l.9:assign %2 = %21  : int
-------------------------------
Out:{sys, i, sum}

In:{}
blklab4 [LOOP_EXIT] 
Out:{}

In:{sys, i, sum}
blklab5 [BLOCK] 
Out:{sys, i, sum}

In:{}
exit [EXIT] 
Out:{}


Copy elimination analysis completed. File: ResetMacro4.wyil
