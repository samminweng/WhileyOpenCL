root->func
root->main
###### Live variables for func function. ######
In:{x, num}
entry [ENTRY] 
Out:{x, num}

In:{x, num}
code [BLOCK] 
-------------------------------
l.0:const %4 = 0 : int
l.1:const %5 = 3 : int
l.2:arraygen %6 = [4; 5] : int[]
l.3:assign %3 = %6  : int[]
l.4:const %7 = 10 : int
-------------------------------
Out:{x, num, a, _7}

In:{x, num, a, _7}
blklab0 [CONDITION] 
Out:{x, num, a, _7}

In:{x, num, _7}
blklab0 [IF] 
-------------------------------
l.0:ifgt %1, %7 goto blklab0 : int
l.1:const %8 = 0 : int
-------------------------------
Out:{x}

In:{num, a, _7}
blklab0 [ELSE] 
-------------------------------
l.0:ifle %1, %7 goto blklab0 : int
-------------------------------
Out:{a}

In:{x}
Update8 [UPDATE] 
-------------------------------
l.0:update %0[%8] = %1 : int[] -> int[]
-------------------------------
Out:{x}

In:{x}
Update8 [BLOCK] 
Out:{x}

In:{x}
return_0 [RETURN] 
-------------------------------
l.0:return %0
-------------------------------
Out:{x}

In:{}
blklab1 [BLOCK] 
Out:{}

In:{a}
return_3 [RETURN] 
-------------------------------
l.0:return %3
-------------------------------
Out:{a}

In:{}
exit [EXIT] 
Out:{}

###### Live variables for main function. ######
In:{sys}
entry [ENTRY] 
Out:{sys}

In:{sys}
code [BLOCK] 
-------------------------------
l.0:const %3 = 2 : int
l.1:const %4 = 3 : int
l.2:arraygen %5 = [3; 4] : int[]
l.3:assign %1 = %5  : int[]
l.4:const %7 = 11 : int
-------------------------------
Out:{sys, x, _7}

In:{sys, x, _7}
func6 [INVOKE] 
-------------------------------
l.0:invoke (%6) = (%1, %7) ResetMacro3:func : function(int[],int)->(int[])
-------------------------------
Out:{sys, _6}

In:{sys, _6}
func6 [BLOCK] 
-------------------------------
l.0:assign %2 = %6  : int[]
l.1:assign %1 = %2  : int[]
l.2:assert
l.3:fieldload %11 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}
l.4:fieldload %12 = %11 print_s : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}
l.5:const %13 = [120,91,48,93,32,61,32] : int[]
l.6:indirectinvoke () = %12 (%13) : method(int[])->()
l.7:fieldload %14 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}
l.8:fieldload %15 = %14 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}
l.9:const %16 = 0 : int
l.10:indexof %17 = %1, %16 : int[]
l.11:indirectinvoke () = %15 (%17) : method(any)->()
l.12:const %19 = 65536 : int
-------------------------------
Out:{sys, x, _19}

In:{sys, x, _19}
func20 [INVOKE] 
-------------------------------
l.0:invoke (%18) = (%1, %19) ResetMacro3:func : function(int[],int)->(int[])
-------------------------------
Out:{sys, _18}

In:{sys, _18}
func20 [BLOCK] 
-------------------------------
l.0:assign %1 = %18  : int[]
l.1:assert
l.2:fieldload %23 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}
l.3:fieldload %24 = %23 print_s : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}
l.4:const %25 = [120,91,48,93,32,61,32] : int[]
l.5:indirectinvoke () = %24 (%25) : method(int[])->()
l.6:fieldload %26 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}
l.7:fieldload %27 = %26 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}
l.8:const %28 = 0 : int
l.9:indexof %29 = %1, %28 : int[]
l.10:indirectinvoke () = %27 (%29) : method(any)->()
l.11:assert
-------------------------------
Out:{}

In:{}
exit [EXIT] 
Out:{}


Copy elimination analysis completed. File: ResetMacro3.wyil
