func.0 [const %7 = 0 : int]
func.1 [const %8 = 3 : int]
func.2 [arraygen %9 = [7; 8] : int[]]
func.3 [assign %3 = %9  : int[]]
func.4 [const %10 = 1 : int]
func.5 [const %11 = 3 : int]
func.6 [arraygen %12 = [10; 11] : int[]]
func.7 [assign %4 = %12  : int[]]
func.8 [assign %5 = %3  : int[]]
func.9 [assign %6 = %4  : int[]]
func.10 [const %13 = 10 : int]
func.11 [ifle %1, %13 goto blklab0 : int]
func.12 [return %0]
func.13 [goto blklab1]
func.14 [.blklab0]
func.15 [const %14 = 9 : int]
func.16 [ifle %1, %14 goto blklab2 : int]
func.17 [return %5]
func.18 [.blklab2]
func.19 [return %6]
func.20 [.blklab1]
func.21 [return]
//End of func function
[func.3 a = _9] //assign %3 = %9  : int[]
	 liveness: _9 = false
[func.7 b = _12] //assign %4 = %12  : int[]
	 liveness: _12 = false
[func.8 c = a] //assign %5 = %3  : int[]
	 liveness: a = false
[func.9 d = b] //assign %6 = %4  : int[]
	 liveness: b = false
// Read-write variables in func: [_7, _8, _9, a, _10, _11, _12, b, c, d, _13, _14]
// Return variables in func: [x,c,d,a,_9,b,_12]
// Live variables for func function
// In Set:[[x, num], [x, num], [x, num, a], [x, num, b, a], [x, num, c, b], [x, num, c, d], [x, num, _13, c, d], [x, num, _13], [c, num, d, _13], [x], [], [c, num, _14, d], [c, num, _14], [d, num, _14], [c], [d], []]
// Out Set:[[x, num], [x, num, a], [x, num, b, a], [x, num, c, b], [x, num, c, d], [x, num, _13, c, d], [x, num, _13, c, d], [x], [c, num, _14, d], [x], [], [c, num, _14, d], [c], [d], [c], [d], []]
	 liveness: _9 = false
	 liveness: _12 = false
	 liveness: a = false
	 liveness: b = false
main.0 [const %4 = 2 : int]
main.1 [const %5 = 2 : int]
main.2 [arraygen %6 = [4; 5] : int[]]
main.3 [assign %1 = %6  : int[]]
main.4 [const %7 = 2 : int]
main.5 [const %8 = 2 : int]
main.6 [arraygen %9 = [7; 8] : int[]]
main.7 [assign %2 = %9  : int[]]
main.8 [const %10 = 2 : int]
main.9 [const %11 = 2 : int]
main.10 [arraygen %12 = [10; 11] : int[]]
main.11 [assign %3 = %12  : int[]]
main.12 [const %14 = 11 : int]
main.13 [invoke (%13) = (%2, %14) testcase4:func : function(int[],int)->(int[])]
main.14 [assign %1 = %13  : int[]]
main.15 [fieldload %15 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.16 [fieldload %16 = %15 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.17 [const %17 = 0 : int]
main.18 [indexof %18 = %1, %17 : int[]]
main.19 [indirectinvoke () = %16 (%18) : method(any)->()]
main.20 [fieldload %19 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.21 [fieldload %20 = %19 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.22 [const %21 = 0 : int]
main.23 [indexof %22 = %2, %21 : int[]]
main.24 [indirectinvoke () = %20 (%22) : method(any)->()]
main.25 [fieldload %23 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.26 [fieldload %24 = %23 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.27 [const %25 = 0 : int]
main.28 [indexof %26 = %3, %25 : int[]]
main.29 [indirectinvoke () = %24 (%26) : method(any)->()]
main.30 [return]
//End of main function
[main.3 a = _6] //assign %1 = %6  : int[]
	 liveness: _6 = false
[main.7 b = _9] //assign %2 = %9  : int[]
	 liveness: _9 = false
[main.11 c = _12] //assign %3 = %12  : int[]
	 liveness: _12 = false
[main.13 _13 = func(b, _14)] //invoke (%13) = (%2, %14) testcase4:func : function(int[],int)->(int[])
	 liveness: b = true	 readonly: b = true	 return: b = MAYBE_RETURN
	 liveness: _14 = false	 readonly: _14 = true	 return: _14 = NEVER_RETURN
[main.14 a = _13] //assign %1 = %13  : int[]
	 liveness: _13 = false
// Read-write variables in main: [_4, _5, _6, a, _7, _8, _9, b, _10, _11, _12, c, _14, _13, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26]
// Return variables in main: []
// Live variables for main function
// In Set:[[console], [console], [console], [console, b], [c, console, b], [c, console, b, _14], [c, console, b, _13], [c, console, b, a], []]
// Out Set:[[console], [console], [console, b], [c, console, b], [c, console, b, _14], [c, console, b, _13], [c, console, b, a], [], []]
	 liveness: _6 = false
	 liveness: _9 = false
	 liveness: _12 = false
	 liveness: b = true	 readonly: b = true	 return: b = MAYBE_RETURN
	 liveness: _13 = false

Copy elimination analysis completed. File: testcase4.wyil
Deallocation analysis completed.
File: testcase4.wyil
Code Generation completed. File: testcase4.c, testcase4.h
