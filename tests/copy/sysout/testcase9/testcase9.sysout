main.0 [const %3 = 0 : int]
main.1 [const %4 = 5 : int]
main.2 [arraygen %5 = [3; 4] : int[]]
main.3 [assign %1 = %5  : int[]]
main.4 [assign %2 = %1  : int[]]
main.5 [const %6 = 1 : int]
main.6 [const %7 = 0 : int]
main.7 [update %2[%7] = %6 : int[] -> int[]]
main.8 [assert]
main.9 [assert]
main.10 [fieldload %14 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.11 [fieldload %15 = %14 print_s : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.12 [const %16 = [97,91,48,93,32,61,32] : int[]]
main.13 [indirectinvoke () = %15 (%16) : method(int[])->()]
main.14 [fieldload %17 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.15 [fieldload %18 = %17 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.16 [const %19 = 0 : int]
main.17 [indexof %20 = %1, %19 : int[]]
main.18 [indirectinvoke () = %18 (%20) : method(any)->()]
main.19 [fieldload %21 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.20 [fieldload %22 = %21 print_s : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.21 [const %23 = [98,91,48,93,32,61,32] : int[]]
main.22 [indirectinvoke () = %22 (%23) : method(int[])->()]
main.23 [fieldload %24 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.24 [fieldload %25 = %24 println : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.25 [const %26 = 0 : int]
main.26 [indexof %27 = %2, %26 : int[]]
main.27 [indirectinvoke () = %25 (%27) : method(any)->()]
main.28 [fieldload %28 = %0 out : {int[][] args,{method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s} out}]
main.29 [fieldload %29 = %28 print_s : {method(any)->() print,method(int[])->() print_s,method(any)->() println,method(int[])->() println_s}]
main.30 [const %30 = [80,97,115,115,32,108,105,118,101,99,104,101,99,107,49,32,116,101,115,116,32,99,97,115,101] : int[]]
main.31 [indirectinvoke () = %29 (%30) : method(int[])->()]
main.32 [return]
//End of main function
[main.3 a = _5] //assign %1 = %5  : int[]
	 liveness: _5 = false
[main.4 b = a] //assign %2 = %1  : int[]
	 liveness: a = true
// Read-write variables in main: [_3, _4, _5, a, b, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30]
// Return variables in main: []
// Live variables for main function
// In Set:[[sys], [sys], [sys, a], [sys, a, b], [sys, a, b], [sys, b, a], []]
// Out Set:[[sys], [sys, a], [sys, a, b], [sys, a, b], [sys, b, a], [], []]
	 liveness: _5 = false
	 liveness: a = true
	 liveness: _7 = false

Copy elimination analysis completed. File: testcase9.wyil
Code Generation completed. File: testcase9.c, testcase9.h
